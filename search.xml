<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>C#实现网络通信共享库NetShare</title>
      
      <link href="/2025/05/04/2025-05-04-C-%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%85%B1%E4%BA%AB%E5%BA%93NetShare/"/>
      <url>/2025/05/04/2025-05-04-C-%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%85%B1%E4%BA%AB%E5%BA%93NetShare/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>网络通信共享库NetShare用于保证客户端与服务器通信数据包的规范和统一，客户端与服务器共同使用本库，提升数据包序列化和反序列化的准确性和安全性，并且用于满足不同的通信数据需求。</p><h5 id="NetShare：DataPacket（通用数据包）"><a href="#NetShare：DataPacket（通用数据包）" class="headerlink" title="NetShare：DataPacket（通用数据包）"></a>NetShare：DataPacket（通用数据包）</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetShare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 通用数据包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">KnownType(typeof(PCDataPacket)), KnownType(typeof(PSDataPacket)), KnownType(typeof(ServerDataPacket))</span>]</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataPacket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 当前数据发送端的IPEndPoint字符串内容(ip地址:端口号)</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mLocalEndPointStr;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 当前数据发送端发送的其它内容</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mContent;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将当前数据包实例转换为字节数组</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字节数组<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Array.Empty&lt;<span class="built_in">byte</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将指定的字节数组转换为DataPacket(数据包)对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bytes&quot;&gt;</span>指定的字节数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;type&quot;&gt;</span>DataPacket派生类类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>DataPacket(数据包)对象或null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataPacket <span class="title">ToObject</span>(<span class="params"><span class="built_in">byte</span>[] bytes, Type type</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes?.Length &gt; <span class="number">0</span> &amp;&amp; type != <span class="literal">null</span> &amp;&amp; type.IsAssignableFrom(<span class="keyword">typeof</span>(DataPacket)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(bytes))</span><br><span class="line">                &#123;</span><br><span class="line">                    DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(type);</span><br><span class="line">                    <span class="built_in">object</span> obj = serializer.ReadObject(ms);</span><br><span class="line">                    <span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp; obj.GetType().Equals(type)) <span class="keyword">return</span> (DataPacket)obj;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将指定的字节数组转换为DataPacket派生类(数据包)对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>DataPacket派生类类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bytes&quot;&gt;</span>指定的字节数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>DataPacket派生类(数据包)对象或null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">ToObject</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">byte</span>[] bytes</span>) <span class="keyword">where</span> T : DataPacket</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (bytes?.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(bytes))</span><br><span class="line">                &#123;</span><br><span class="line">                    DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">                    <span class="built_in">object</span> obj = serializer.ReadObject(ms);</span><br><span class="line">                    <span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp; obj <span class="keyword">is</span> T t) <span class="keyword">return</span> t;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="NetShare：ClientDataPacket（客户端数据包）"><a href="#NetShare：ClientDataPacket（客户端数据包）" class="headerlink" title="NetShare：ClientDataPacket（客户端数据包）"></a>NetShare：ClientDataPacket（客户端数据包）</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetShare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 客户端数据包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClientDataPacket</span> : <span class="title">DataPacket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 当前客户端的名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mClientName;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientDataPacket</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            mLocalEndPointStr = <span class="built_in">string</span>.Empty;</span><br><span class="line">            mContent = <span class="built_in">string</span>.Empty;</span><br><span class="line">            mClientName = <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将客户端数据包实例转换为字节数组</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字节数组<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(ClientDataPacket));</span><br><span class="line">                serializer.WriteObject(ms, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 客户端数据包的字符串内容</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字符串内容<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[LocalEndPointStr:<span class="subst">&#123;mLocalEndPointStr&#125;</span>,ClientName:<span class="subst">&#123;mClientName&#125;</span>,Content:<span class="subst">&#123;mContent&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="NetShare：ServerDataPacket（服务器数据包）"><a href="#NetShare：ServerDataPacket（服务器数据包）" class="headerlink" title="NetShare：ServerDataPacket（服务器数据包）"></a>NetShare：ServerDataPacket（服务器数据包）</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetShare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 服务端数据包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServerDataPacket</span> : <span class="title">DataPacket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServerDataPacket</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            mLocalEndPointStr = <span class="built_in">string</span>.Empty;</span><br><span class="line">            mContent = <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将服务端数据包实例转换为字节数组</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字节数组<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(ServerDataPacket));</span><br><span class="line">                serializer.WriteObject(ms, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 服务端数据包的字符串内容</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字符串内容<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[LocalEndPointStr:<span class="subst">&#123;mLocalEndPointStr&#125;</span>,Content:<span class="subst">&#123;mContent&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="NetShare：PCDataPacket（私聊频道客户端数据包）"><a href="#NetShare：PCDataPacket（私聊频道客户端数据包）" class="headerlink" title="NetShare：PCDataPacket（私聊频道客户端数据包）"></a>NetShare：PCDataPacket（私聊频道客户端数据包）</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetShare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 私聊频道客户端数据包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PCDataPacket</span> : <span class="title">ClientDataPacket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 目标客户端的名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mDestinationClientName;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PCDataPacket</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            mDestinationClientName = <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将私聊频道客户端数据包实例转换为字节数组</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字节数组<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(PCDataPacket));</span><br><span class="line">                serializer.WriteObject(ms, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="NetShare：PSDataPacket（私聊频道服务器数据包）"><a href="#NetShare：PSDataPacket（私聊频道服务器数据包）" class="headerlink" title="NetShare：PSDataPacket（私聊频道服务器数据包）"></a>NetShare：PSDataPacket（私聊频道服务器数据包）</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetShare</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 私聊频道服务端数据包</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PSDataPacket</span> : <span class="title">ServerDataPacket</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 已与服务器进行连接的客户端名称合集</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>[] mClientNames;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PSDataPacket</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            mClientNames = Array.Empty&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将私聊频道服务端数据包实例转换为字节数组</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>字节数组<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">byte</span>[] <span class="title">ToBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(PSDataPacket));</span><br><span class="line">                serializer.WriteObject(ms, <span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/134541554">https://blog.csdn.net/hgf1037882434/article/details/134541554</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 网络 </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>C#实现本地服务器客户端私聊通信</title>
      
      <link href="/2025/05/04/2025-05-04-C-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A7%81%E8%81%8A%E9%80%9A%E4%BF%A1/"/>
      <url>/2025/05/04/2025-05-04-C-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A7%81%E8%81%8A%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="（一）需求"><a href="#（一）需求" class="headerlink" title="（一）需求"></a>（一）需求</h4><p>在游戏中我们经常能够看到玩家与玩家之间可以进行私聊，在QQ或微信中最基本的功能就是用户与用户之间的通信。抽象成计算机网络，就是两个客户端通过服务器进行私聊通信，两个客户端可以互相看到对方发送过来的信息。这种两个客户端的私聊通信是如何实现的呢？在本篇文章我们就来探讨一下。</p><h4 id="（二）解决思路"><a href="#（二）解决思路" class="headerlink" title="（二）解决思路"></a>（二）解决思路</h4><p>这个需求的重点部分在于网络通信，需要我们掌握基本的计算机网络通信知识，具体到每种编程语言又有对应的API。如果把这个需求抽象到计算机网络中，我们就可以理解成两个客户端向服务器发送信息，服务器接收信息后又把信息发送给另一个客户端。这样，一个客户端就可以接收到另一个客户端发送的信息了。</p><h4 id="（三）设计思路"><a href="#（三）设计思路" class="headerlink" title="（三）设计思路"></a>（三）设计思路</h4><p>服务器基于本地服务器开发，通过一个单独的C#控制台项目模拟，编程语言使用C#，客户端通过Unity3D构建GUI并编写客户端脚本。两个客户端则通过打开两个Unity3D项目的可执行文件进行模拟，客户端的GUI需要有调试面板、客户端名称下拉菜单、连接和断开连接按钮、消息显示面板、消息输入框和消息发送按钮等。</p><h4 id="（四）代码实现"><a href="#（四）代码实现" class="headerlink" title="（四）代码实现"></a>（四）代码实现</h4><p>由于代码中引用了自定义的网络通信共享库NetShare，关于NetShare请阅读本栏目下的“<a href="https://blog.csdn.net/hgf1037882434/article/details/134541554?spm=1001.2014.3001.5502" title="C#实现网络通信共享库NetShare">C#实现网络通信共享库NetShare</a>”。</p><hr><p><em><strong>客户端</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义网络通信共享库NetShare，包括通用数据包DataPacket、私聊频道服务器数据包PSDataPacket、</span></span><br><span class="line"><span class="comment">服务器数据包ServerDataPacket和私聊频道客户端数据包PCDataPacket等。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> NetShare;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私聊频道客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonalChannelClient</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Text BaseInfo;<span class="comment">//显示Socket连接基本信息的文本</span></span><br><span class="line">    <span class="keyword">public</span> Text EchoContents;<span class="comment">//Socket回显信息的文本</span></span><br><span class="line">    <span class="keyword">public</span> Text ChatContents;<span class="comment">//聊天信息的文本</span></span><br><span class="line">    <span class="keyword">public</span> Dropdown Friends;<span class="comment">//目标客户端名称下拉菜单</span></span><br><span class="line">    <span class="keyword">public</span> Dropdown ClientMenu;<span class="comment">//客户端名称下拉菜单</span></span><br><span class="line">    <span class="keyword">public</span> Button Connect;<span class="comment">//连接按钮</span></span><br><span class="line">    <span class="keyword">public</span> Button DisConnect;<span class="comment">//断开连接按钮</span></span><br><span class="line">    <span class="keyword">public</span> InputField SendInput;<span class="comment">//聊天消息输入框</span></span><br><span class="line">    <span class="keyword">public</span> Button Send;<span class="comment">//聊天信息发送按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">string</span> ipAddressStr;<span class="comment">//IP地址字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> port;<span class="comment">//端口</span></span><br><span class="line">    <span class="keyword">static</span> IPAddress iPAddress;<span class="comment">//IP地址对象</span></span><br><span class="line">    <span class="keyword">static</span> IPEndPoint iPEndPoint;<span class="comment">//IP端点对象</span></span><br><span class="line">    <span class="built_in">string</span> clientName, sendStr;<span class="comment">//客户端名称和发送信息字符串</span></span><br><span class="line">    Socket currentClientSocket;<span class="comment">//当前客户端Socket</span></span><br><span class="line">    <span class="built_in">bool</span> isLockSend;<span class="comment">//是否锁定聊天信息发送按钮</span></span><br><span class="line">    <span class="built_in">byte</span>[] buffer;<span class="comment">//消息接收缓冲区</span></span><br><span class="line">    Queue&lt;<span class="built_in">string</span>&gt; echoContentQueue, chatContentQueue;<span class="comment">//回显信息队列和聊天信息队列</span></span><br><span class="line">    PCDataPacket dataPacket;<span class="comment">//通用数据包</span></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; desClientNames;<span class="comment">//目标客户端名称合集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反映Socket是否与服务器有效连接的属性</span></span><br><span class="line">    <span class="built_in">bool</span> isConnected</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentClientSocket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> !currentClientSocket.Poll(<span class="number">10</span>, SelectMode.SelectRead) &amp;&amp; currentClientSocket.Connected;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        ipAddressStr = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        clientName = ClientMenu.options.Count &gt; <span class="number">0</span> ? ClientMenu.options[<span class="number">0</span>].text : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        port = <span class="number">5500</span>;</span><br><span class="line">        iPAddress = IPAddress.Parse(ipAddressStr);</span><br><span class="line">        iPEndPoint = <span class="keyword">new</span> IPEndPoint(iPAddress, port);</span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        echoContentQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        chatContentQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        desClientNames = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;None&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为UI控件添加监听事件</span></span><br><span class="line">        ClientMenu.onValueChanged.AddListener((index) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            clientName = ClientMenu.options[index].text;</span><br><span class="line">        &#125;);</span><br><span class="line">        Connect.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(ConnectDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;);</span><br><span class="line">        DisConnect.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(DisConnectDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;);</span><br><span class="line">        Send.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            sendStr = SendInput.text;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(SendDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">            SendInput.text = <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//不断更新Socket基本信息</span></span><br><span class="line">        BaseInfo.text = <span class="string">$&quot;ClientName:<span class="subst">&#123;clientName&#125;</span>&quot;</span> +</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;\nSocketHashCode:&#123;0&#125;&quot;</span>, currentClientSocket == <span class="literal">null</span> ? <span class="string">&quot;None&quot;</span> : currentClientSocket.GetHashCode().ToString()) +</span><br><span class="line">                        <span class="string">$&quot;\nisLock:<span class="subst">&#123;isLockSend&#125;</span>&quot;</span> +</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;\nPoll:&#123;0&#125;&quot;</span>, currentClientSocket == <span class="literal">null</span> ? <span class="string">&quot;None&quot;</span> : (!currentClientSocket.Poll(<span class="number">10</span>, SelectMode.SelectRead)).ToString()) +</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;\nIsConnected:&#123;0&#125;&quot;</span>, currentClientSocket == <span class="literal">null</span> ? <span class="string">&quot;False&quot;</span> : currentClientSocket.Connected.ToString());</span><br><span class="line">        <span class="comment">//更新回显信息</span></span><br><span class="line">        <span class="keyword">if</span> (echoContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (echoContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SetEchoContents(echoContentQueue.Dequeue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新聊天信息</span></span><br><span class="line">        <span class="keyword">if</span> (chatContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (chatContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SetChatContents(chatContentQueue.Dequeue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新目标客户端名称下拉菜单</span></span><br><span class="line">        <span class="keyword">if</span> (desClientNames?.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Friends.AddOptions(desClientNames);</span><br><span class="line">            desClientNames.Clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置回显信息相关UI的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetEchoContents</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        EchoContents.text += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置聊天信息相关UI的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetChatContents</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ChatContents.text += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ConnectDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>正在请求服务器连接...&quot;</span>);</span><br><span class="line">        Socket clientSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">        clientSocket.BeginConnect(iPEndPoint, ConnectCallback, clientSocket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步断开连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DisConnectDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>正在断开与服务器的连接...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isConnected)</span><br><span class="line">        &#123;</span><br><span class="line">            currentClientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line">            currentClientSocket.BeginDisconnect(<span class="literal">false</span>, DisConnectCallback, currentClientSocket);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>未与服务器建立连接,无法进行断开连接的操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步接收信息处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReceiveDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>开始监听服务器响应...&quot;</span>);</span><br><span class="line">        currentClientSocket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, currentClientSocket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步发送信息处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SendDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLockSend &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(sendStr))</span><br><span class="line">        &#123;</span><br><span class="line">            dataPacket.mContent = sendStr;</span><br><span class="line">            <span class="built_in">string</span> v_desClientName = Friends.options[Friends.<span class="keyword">value</span>].text;</span><br><span class="line">            <span class="keyword">if</span> (!v_desClientName.Equals(<span class="string">&quot;None&quot;</span>)) dataPacket.mDestinationClientName = v_desClientName;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = dataPacket.ToBytes();</span><br><span class="line">            currentClientSocket.BeginSend(bytes, <span class="number">0</span>, bytes.Length, SocketFlags.None, SendCallback, currentClientSocket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步连接处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ConnectCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            socket.EndConnect(ar);</span><br><span class="line">            currentClientSocket = socket;</span><br><span class="line">            <span class="keyword">if</span> (isConnected)</span><br><span class="line">            &#123;</span><br><span class="line">                dataPacket = <span class="keyword">new</span> PCDataPacket()</span><br><span class="line">                &#123;</span><br><span class="line">                    mLocalEndPointStr = socket.LocalEndPoint.ToString(),</span><br><span class="line">                    mClientName = clientName,</span><br><span class="line">                    mDestinationClientName = <span class="built_in">string</span>.Empty,</span><br><span class="line">                    mContent = <span class="string">$&quot;成功与服务器建立连接!&quot;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="built_in">byte</span>[] bytes = dataPacket.ToBytes();</span><br><span class="line">                socket.BeginSend(bytes, <span class="number">0</span>, bytes.Length, SocketFlags.None, SendCallback, currentClientSocket);</span><br><span class="line">                isLockSend = <span class="literal">false</span>;</span><br><span class="line">                echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=orange&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器连接成功!&lt;/color&gt;&quot;</span>);</span><br><span class="line">                ReceiveDeal();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=red&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器连接失败!&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=red&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器连接失败!&lt;/color&gt;\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步断开连接处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DisConnectCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            isLockSend = <span class="literal">true</span>;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            socket.EndDisconnect(ar);</span><br><span class="line">            dataPacket = <span class="literal">null</span>;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=orange&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器断开连接操作成功!&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>与服务器断开连接操作失败！\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步发送信息处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            socket.EndSend(ar);</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>向服务器发送了一条消息！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>向服务器发送信息操作失败！\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步接收信息处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReceiveCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            <span class="built_in">int</span> count = socket.EndReceive(ar);</span><br><span class="line">            DataPacket dataPacket = DataPacket.ToObject&lt;DataPacket&gt;(buffer.Take(count).ToArray());</span><br><span class="line">            <span class="keyword">if</span> (dataPacket <span class="keyword">is</span> PSDataPacket psdp &amp;&amp; psdp.mClientNames?.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                desClientNames.Clear();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> name <span class="keyword">in</span> psdp.mClientNames)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Friends.options.FindIndex((od) =&gt; od.text.Equals(name)) == <span class="number">-1</span>) desClientNames.Add(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dataPacket <span class="keyword">is</span> ServerDataPacket sdp)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> v_res = sdp.mContent;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(v_res)) chatContentQueue.Enqueue(<span class="string">&quot;\n&quot;</span> + v_res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若Socket连接有效则继续接收消息</span></span><br><span class="line">            <span class="keyword">if</span> (isConnected)</span><br><span class="line">                socket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, socket);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>接收服务器消息失败！\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><em><strong>服务器</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义网络通信共享库NetShare，其中包括了私聊频道服务器数据包PSDataPacket、通用数据包DataPacket、</span></span><br><span class="line"><span class="comment">服务器数据包ServerDataPacket和私聊频道客户端数据包PCDataPacket等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> NetShare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UnityServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//私聊频道服务器</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">PersonalChannelServer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> ipAddress = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//IP地址字符串</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> port = <span class="number">5500</span>;<span class="comment">//端口</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> maxConnect = <span class="number">20</span>;<span class="comment">//最大连接数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];<span class="comment">//消息缓冲区</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端Socket合集，key为IPEndPoint字符串，value为服务器为客户端分配的Socket</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, Socket&gt; clients = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Socket&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Socket? serverSocket;<span class="comment">//服务器Socket</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端键值对，key为客户端名称，value为IPEndPoint字符串</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; clientKVs = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(ServerDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Socket是否进行有效连接</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsConnected</span>(<span class="params">Socket socket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> !socket.Poll(<span class="number">10</span>, SelectMode.SelectRead) &amp;&amp; socket.Connected;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行逻辑：服务器处理</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ServerDeal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">            IPAddress v_ipAddress = IPAddress.Parse(ipAddress);</span><br><span class="line">            serverSocket.Bind(<span class="keyword">new</span> IPEndPoint(v_ipAddress, port));</span><br><span class="line">            serverSocket.Listen(maxConnect);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;开启服务器[<span class="subst">&#123;serverSocket.LocalEndPoint&#125;</span>]...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            serverSocket.BeginAccept(AcceptCallback, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行逻辑：Socket异步接收消息</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReceiveDeal</span>(<span class="params"><span class="built_in">object</span>? clientSocket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (clientSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Socket? v_clientSocket = clientSocket <span class="keyword">as</span> Socket;</span><br><span class="line">            <span class="keyword">if</span> (v_clientSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;接收到客户端的连接请求！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IsConnected(v_clientSocket))</span><br><span class="line">                v_clientSocket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, v_clientSocket);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加客户端Socket到客户端Socket合集</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddClient</span>(<span class="params">Socket clientSocket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (clientSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            EndPoint? endPoint = clientSocket.RemoteEndPoint;</span><br><span class="line">            <span class="keyword">if</span> (endPoint != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span>? v_endPointStr = endPoint.ToString();</span><br><span class="line">                <span class="keyword">if</span> (v_endPointStr != <span class="literal">null</span>) clients[v_endPointStr] = clientSocket;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向所有客户端发送指定信息</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendToAll</span>(<span class="params">PSDataPacket dataPacket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataPacket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = dataPacket.ToBytes();</span><br><span class="line">            <span class="keyword">foreach</span> (Socket clientSocket <span class="keyword">in</span> clients.Values)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (IsConnected(clientSocket))</span><br><span class="line">                &#123;</span><br><span class="line">                    Thread thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        clientSocket.BeginSend(bytes, <span class="number">0</span>, bytes.Length, SocketFlags.None, SendCallback, clientSocket);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    thread.Start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向指定的客户端发送服务器数据包</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendTo</span>(<span class="params">ServerDataPacket dataPacket, Socket? destinationSocket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataPacket == <span class="literal">null</span> || destinationSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = dataPacket.ToBytes();</span><br><span class="line">            <span class="keyword">if</span> (IsConnected(destinationSocket))</span><br><span class="line">            &#123;</span><br><span class="line">                Thread thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    destinationSocket.BeginSend(bytes, <span class="number">0</span>, bytes.Length, SocketFlags.None, SendCallback, destinationSocket);</span><br><span class="line">                &#125;);</span><br><span class="line">                thread.Start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket监听请求回调</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AcceptCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Socket clientSocket = serverSocket.EndAccept(ar);</span><br><span class="line">                    AddClient(clientSocket);</span><br><span class="line">                    Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(ReceiveDeal));</span><br><span class="line">                    thread.Start(clientSocket);</span><br><span class="line">                    serverSocket.BeginAccept(AcceptCallback, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;AcceptException:&quot;</span> + se.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket发送信息回调</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Socket? clientSocket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">                <span class="keyword">if</span> (clientSocket != <span class="literal">null</span>) clientSocket.EndSend(ar);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;SendException:&quot;</span> + se.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket接收信息回调</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReceiveCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Socket? clientSocket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">                <span class="keyword">if</span> (clientSocket != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> bytesCount = clientSocket.EndReceive(ar);</span><br><span class="line">                    PCDataPacket? dataPacket = DataPacket.ToObject&lt;PCDataPacket&gt;(buffer.Take(bytesCount).ToArray());</span><br><span class="line">                    <span class="keyword">if</span> (dataPacket != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (clientSocket.RemoteEndPoint != <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">string</span>? v_endPointStr = clientSocket.RemoteEndPoint.ToString();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(v_endPointStr))</span><br><span class="line">                            &#123;</span><br><span class="line">                                clientKVs[dataPacket.mClientName] = v_endPointStr;</span><br><span class="line">                                SendToAll(<span class="keyword">new</span> PSDataPacket()</span><br><span class="line">                                &#123;</span><br><span class="line">                                    mClientNames = clientKVs.Keys.ToArray()</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">string</span> v_content = <span class="string">$&quot;客户端<span class="subst">&#123;dataPacket.mClientName&#125;</span>：<span class="subst">&#123;dataPacket.mContent&#125;</span>&quot;</span>;</span><br><span class="line">                        Socket? destinationSocket;</span><br><span class="line">                        <span class="built_in">string</span>? endPointStr;</span><br><span class="line">                        clientKVs.TryGetValue(dataPacket.mDestinationClientName, <span class="keyword">out</span> endPointStr);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(endPointStr) &amp;&amp; clients.TryGetValue(endPointStr, <span class="keyword">out</span> destinationSocket))</span><br><span class="line">                            SendTo(<span class="keyword">new</span> ServerDataPacket() &#123; mContent = v_content &#125;, destinationSocket);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (IsConnected(clientSocket))</span><br><span class="line">                        clientSocket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, clientSocket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;ReceiveException:&quot;</span> + se.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（五）测试"><a href="#（五）测试" class="headerlink" title="（五）测试"></a>（五）测试</h4><p>测试流程大概是先启动服务器，然后启动三个客户端，三个客户端分别以A、B、C的名称作为客户端名称与服务器建立连接，连接后再由客户端A、B、C分别向服务器发送信息，通过观察三个客户端的消息面板来确定测试结果，这里之所以启动三个客户端是为了进行对比测试，以区分多客户端的同频道通信，具体测试流程请观看下列视频：</p><p>本地服务器客户端单独通信</p><h4 id="（六）总结"><a href="#（六）总结" class="headerlink" title="（六）总结"></a>（六）总结</h4><p>在服务器端，我们通过一个C#控制台项目来模拟服务器后台，服务器与客户端具有类似的功能，同样具有发送、接收消息的功能，不同的是服务器具有监听客户端连接的功能，而客户端具有向服务器发送连接请求的功能，本质上这些都是通过Socket实现的功能，人为划分成服务器端和客户端。在客户端我们通过GUI将用户的操作进行可视化构建，实现了回显、客户端名称选择、连接、断开连接、发送和显示消息等基本交互。</p><p>为了模拟多客户端并发操作，所有功能我们都采用了异步的方式启动，对于真正的网络通信而言，这对我们来说才刚刚开始，不过通过这个案例也让我们了解了基本的网络通信流程。</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/134540785">https://blog.csdn.net/hgf1037882434/article/details/134540785</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 网络 </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>C#实现本地服务器多客户端同频道通信</title>
      
      <link href="/2025/05/04/2025-05-04-C-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8C%E9%A2%91%E9%81%93%E9%80%9A%E4%BF%A1/"/>
      <url>/2025/05/04/2025-05-04-C-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8C%E9%A2%91%E9%81%93%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="（一）需求"><a href="#（一）需求" class="headerlink" title="（一）需求"></a>（一）需求</h4><p>在游戏中我们经常能够看到玩家在世界频道聊天，在QQ或微信中也有群聊功能。抽象成计算机网络，就是多个客户端通过服务器进行同频道通信，所有连接的客户端都可以看到其他客户端发送的消息。这种多客户端同频道通信是如何实现的呢？在本篇文章我们就来探讨一下。</p><h4 id="（二）解决思路"><a href="#（二）解决思路" class="headerlink" title="（二）解决思路"></a>（二）解决思路</h4><p>这个需求的重点部分在于网络通信，需要我们掌握基本的计算机网络通信知识，具体到每种编程语言又有对应的API。如果把这个需求抽象到计算机网络中，我们就可以理解成多个客户端向服务器发送信息，服务器接收信息后又把信息发送给所有连接的客户端。这样，在各个客户端就可以接收到其他客户端发送的信息了。</p><h4 id="（三）设计思路"><a href="#（三）设计思路" class="headerlink" title="（三）设计思路"></a>（三）设计思路</h4><p>服务器基于本地服务器开发，通过一个单独的C#控制台项目模拟，编程语言使用C#，客户端通过Unity3D构建GUI并编写客户端脚本。多客户端则通过打开多个Unity3D项目的可执行文件进行模拟，客户端的GUI需要有调试面板、客户端名称下拉菜单、连接和断开连接按钮、消息显示面板、消息输入框和消息发送按钮等。</p><h4 id="（四）代码实现"><a href="#（四）代码实现" class="headerlink" title="（四）代码实现"></a>（四）代码实现</h4><p>由于代码中引用了自定义的网络通信共享库NetShare，关于NetShare请阅读本栏目下的“<a href="https://blog.csdn.net/hgf1037882434/article/details/134541554?spm=1001.2014.3001.5502" title="C#实现网络通信共享库NetShare">C#实现网络通信共享库NetShare</a>”。</p><hr><p><em><strong>客户端</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> NetShare;<span class="comment">//自定义网络通信共享库，包括通用数据包DataPacket等</span></span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="comment">//世界频道客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WorldChannelClient</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Text BaseInfo;<span class="comment">//显示Socket连接基本信息的文本</span></span><br><span class="line">    <span class="keyword">public</span> Text EchoContents;<span class="comment">//Socket回显信息的文本</span></span><br><span class="line">    <span class="keyword">public</span> Text ChatContents;<span class="comment">//聊天信息的文本</span></span><br><span class="line">    <span class="keyword">public</span> Dropdown ClientMenu;<span class="comment">//客户端名称下拉菜单</span></span><br><span class="line">    <span class="keyword">public</span> Button Connect;<span class="comment">//连接按钮</span></span><br><span class="line">    <span class="keyword">public</span> Button DisConnect;<span class="comment">//断开连接按钮</span></span><br><span class="line">    <span class="keyword">public</span> InputField SendInput;<span class="comment">//聊天消息输入框</span></span><br><span class="line">    <span class="keyword">public</span> Button Send;<span class="comment">//聊天信息发送按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">string</span> ipAddressStr;<span class="comment">//IP地址字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> port;<span class="comment">//端口</span></span><br><span class="line">    <span class="keyword">static</span> IPAddress iPAddress;<span class="comment">//IP地址对象</span></span><br><span class="line">    <span class="keyword">static</span> IPEndPoint iPEndPoint;<span class="comment">//IP端点对象</span></span><br><span class="line">    <span class="built_in">string</span> clientName;<span class="comment">//客户端名称</span></span><br><span class="line">    Socket currentClientSocket;<span class="comment">//当前客户端Socket</span></span><br><span class="line">    <span class="built_in">bool</span> isLockSend;<span class="comment">//是否锁定聊天信息发送按钮</span></span><br><span class="line">    <span class="built_in">byte</span>[] buffer;<span class="comment">//消息接收缓冲区</span></span><br><span class="line">    Queue&lt;<span class="built_in">string</span>&gt; echoContentQueue, chatContentQueue;<span class="comment">//回显信息队列和聊天信息队列</span></span><br><span class="line">    DataPacket dataPacket;<span class="comment">//通用数据包</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反映Socket是否与服务器有效连接的属性</span></span><br><span class="line">    <span class="built_in">bool</span> isConnected</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentClientSocket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> !currentClientSocket.Poll(<span class="number">10</span>, SelectMode.SelectRead) &amp;&amp; currentClientSocket.Connected;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        ipAddressStr = <span class="string">&quot;8.137.8.206&quot;</span>;</span><br><span class="line">        clientName = ClientMenu.options.Count &gt; <span class="number">0</span> ? ClientMenu.options[<span class="number">0</span>].text : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        port = <span class="number">5500</span>;</span><br><span class="line">        iPAddress = IPAddress.Parse(ipAddressStr);</span><br><span class="line">        iPEndPoint = <span class="keyword">new</span> IPEndPoint(iPAddress, port);</span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        echoContentQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        chatContentQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为UI控件添加监听事件</span></span><br><span class="line">        ClientMenu.onValueChanged.AddListener((index) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            clientName = ClientMenu.options[index].text;</span><br><span class="line">        &#125;);</span><br><span class="line">        Connect.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(ConnectDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;);</span><br><span class="line">        DisConnect.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(DisConnectDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;);</span><br><span class="line">        Send.onClick.AddListener(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(SendDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//不断更新Socket基本信息</span></span><br><span class="line">        BaseInfo.text = <span class="string">$&quot;ClientName:<span class="subst">&#123;clientName&#125;</span>&quot;</span> +</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;\nSocketHashCode:&#123;0&#125;&quot;</span>, currentClientSocket == <span class="literal">null</span> ? <span class="string">&quot;None&quot;</span> : currentClientSocket.GetHashCode().ToString()) +</span><br><span class="line">                        <span class="string">$&quot;\nisLock:<span class="subst">&#123;isLockSend&#125;</span>&quot;</span> +</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;\nPoll:&#123;0&#125;&quot;</span>, currentClientSocket == <span class="literal">null</span> ? <span class="string">&quot;None&quot;</span> : (!currentClientSocket.Poll(<span class="number">10</span>, SelectMode.SelectRead)).ToString()) +</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;\nIsConnected:&#123;0&#125;&quot;</span>, currentClientSocket == <span class="literal">null</span> ? <span class="string">&quot;False&quot;</span> : currentClientSocket.Connected.ToString());</span><br><span class="line">        <span class="comment">//更新回显信息</span></span><br><span class="line">        <span class="keyword">if</span> (echoContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (echoContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SetEchoContents(echoContentQueue.Dequeue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新聊天信息</span></span><br><span class="line">        <span class="keyword">if</span> (chatContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (chatContentQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SetChatContents(chatContentQueue.Dequeue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置回显信息相关UI的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetEchoContents</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        EchoContents.text += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置聊天信息相关UI的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetChatContents</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ChatContents.text += text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ConnectDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>正在请求服务器连接...&quot;</span>);</span><br><span class="line">        Socket clientSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">        clientSocket.BeginConnect(iPEndPoint, ConnectCallback, clientSocket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步断开连接处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DisConnectDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>正在断开与服务器的连接...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isConnected)</span><br><span class="line">        &#123;</span><br><span class="line">            currentClientSocket.Shutdown(SocketShutdown.Both);<span class="comment">//关闭Socket的发送和接收消息功能</span></span><br><span class="line">            currentClientSocket.BeginDisconnect(<span class="literal">false</span>, DisConnectCallback, currentClientSocket);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>未与服务器建立连接,无法进行断开连接的操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步接收信息处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReceiveDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>开始监听服务器响应...&quot;</span>);</span><br><span class="line">        currentClientSocket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, currentClientSocket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步发送信息处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SendDeal</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLockSend &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(SendInput.text))</span><br><span class="line">        &#123;</span><br><span class="line">            dataPacket.mContent = SendInput.text;</span><br><span class="line">            SendInput.text = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = dataPacket.ToBytes();</span><br><span class="line">            currentClientSocket.BeginSend(bytes, <span class="number">0</span>, bytes.Length, SocketFlags.None, SendCallback, currentClientSocket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步连接处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ConnectCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            socket.EndConnect(ar);</span><br><span class="line">            currentClientSocket = socket;</span><br><span class="line">            <span class="keyword">if</span> (isConnected)</span><br><span class="line">            &#123;</span><br><span class="line">                dataPacket = <span class="keyword">new</span> ClientDataPacket()</span><br><span class="line">                &#123;</span><br><span class="line">                    mLocalEndPointStr = socket.LocalEndPoint.ToString(),</span><br><span class="line">                    mClientName = clientName</span><br><span class="line">                &#125;;</span><br><span class="line">                isLockSend = <span class="literal">false</span>;</span><br><span class="line">                echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=orange&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器连接成功!&lt;/color&gt;&quot;</span>);</span><br><span class="line">                ReceiveDeal();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=red&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器连接失败!&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=red&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器连接失败!&lt;/color&gt;\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步断开连接处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DisConnectCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            isLockSend = <span class="literal">true</span>;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            socket.EndDisconnect(ar);</span><br><span class="line">            dataPacket = <span class="literal">null</span>;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n&lt;color=orange&gt;客户端<span class="subst">&#123;clientName&#125;</span>与服务器断开连接操作成功!&lt;/color&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>与服务器断开连接操作失败！\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步发送信息处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            socket.EndSend(ar);</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>向服务器发送了一条消息！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>向服务器发送信息操作失败！\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行逻辑：Socket异步接收信息处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReceiveCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket socket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">            <span class="built_in">int</span> count = socket.EndReceive(ar);</span><br><span class="line">            <span class="built_in">string</span> res = Encoding.UTF8.GetString(buffer, <span class="number">0</span>, count);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(res)) chatContentQueue.Enqueue(<span class="string">&quot;\n&quot;</span> + res);</span><br><span class="line">            <span class="comment">//若Socket连接有效则继续接收消息</span></span><br><span class="line">            <span class="keyword">if</span> (isConnected)</span><br><span class="line">                socket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, socket);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">        &#123;</span><br><span class="line">            echoContentQueue.Enqueue(<span class="string">$&quot;\n客户端<span class="subst">&#123;clientName&#125;</span>接收服务器消息失败！\n错误信息:<span class="subst">&#123;se.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><em><strong>服务器</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> NetShare;<span class="comment">//自定义网络通信共享库，其中包括了通用数据包DataPacket、客户端数据包ClientDataPacket等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UnityServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//世界频道服务器</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">WorldChannelServer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> ipAddressStr = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//IP地址字符串</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> port = <span class="number">5500</span>;<span class="comment">//端口</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> maxConnectCount = <span class="number">20</span>;<span class="comment">//最大连接数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];<span class="comment">//消息缓冲区</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端Socket合集，key为IPEndPoint字符串，value为服务器为客户端分配的Socket</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, Socket&gt; clients = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Socket&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Socket? serverSocket;<span class="comment">//服务器Socket</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(ServerDeal));</span><br><span class="line">            thread.Start();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Socket是否进行有效连接</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsConnected</span>(<span class="params">Socket socket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> !socket.Poll(<span class="number">10</span>, SelectMode.SelectRead) &amp;&amp; socket.Connected;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行逻辑：服务器处理</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ServerDeal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">            IPAddress v_ipAddress = IPAddress.Parse(ipAddressStr);</span><br><span class="line">            serverSocket.Bind(<span class="keyword">new</span> IPEndPoint(v_ipAddress, port));</span><br><span class="line">            serverSocket.Listen(maxConnectCount);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;开启服务器[<span class="subst">&#123;serverSocket.LocalEndPoint&#125;</span>]...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            serverSocket.BeginAccept(AcceptCallback, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行逻辑：Socket异步接收消息</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReceiveDeal</span>(<span class="params"><span class="built_in">object</span>? clientSocket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (clientSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Socket? v_clientSocket = clientSocket <span class="keyword">as</span> Socket;</span><br><span class="line">            <span class="keyword">if</span> (v_clientSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;接收到客户端的连接请求！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IsConnected(v_clientSocket))</span><br><span class="line">                v_clientSocket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, v_clientSocket);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加客户端Socket到客户端Socket合集</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddClient</span>(<span class="params">Socket clientSocket</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (clientSocket == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            EndPoint? endPoint = clientSocket.RemoteEndPoint;</span><br><span class="line">            <span class="keyword">if</span> (endPoint != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span>? v_endPointStr = endPoint.ToString();</span><br><span class="line">                <span class="keyword">if</span> (v_endPointStr != <span class="literal">null</span>) clients[v_endPointStr] = clientSocket;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向所有客户端发送指定信息</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendToAll</span>(<span class="params"><span class="built_in">string</span>? content</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(content)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(content);</span><br><span class="line">            <span class="keyword">foreach</span> (Socket clientSocket <span class="keyword">in</span> clients.Values)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (IsConnected(clientSocket))</span><br><span class="line">                &#123;</span><br><span class="line">                    Thread thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        clientSocket.BeginSend(bytes, <span class="number">0</span>, bytes.Length, SocketFlags.None, SendCallback, clientSocket);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    thread.Start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket监听请求回调</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AcceptCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Socket clientSocket = serverSocket.EndAccept(ar);</span><br><span class="line">                    AddClient(clientSocket);</span><br><span class="line">                    Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ParameterizedThreadStart(ReceiveDeal));</span><br><span class="line">                    thread.Start(clientSocket);</span><br><span class="line">                    serverSocket.BeginAccept(AcceptCallback, <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;AcceptException:&quot;</span> + se.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket发送信息回调</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Socket? clientSocket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">                <span class="keyword">if</span> (clientSocket != <span class="literal">null</span>) clientSocket.EndSend(ar);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;SendException:&quot;</span> + se.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket接收信息回调</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReceiveCallback</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Socket? clientSocket = ar.AsyncState <span class="keyword">as</span> Socket;</span><br><span class="line">                <span class="keyword">if</span> (clientSocket != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">int</span> bytesCount = clientSocket.EndReceive(ar);</span><br><span class="line">                    ClientDataPacket? dataPacket = DataPacket.ToObject&lt;ClientDataPacket&gt;(buffer.Take(bytesCount).ToArray());</span><br><span class="line">                    <span class="keyword">if</span> (dataPacket != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">string</span> v_content = <span class="string">$&quot;客户端<span class="subst">&#123;dataPacket.mClientName&#125;</span>：<span class="subst">&#123;dataPacket.mContent&#125;</span>&quot;</span>;</span><br><span class="line">                        SendToAll(v_content);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (IsConnected(clientSocket))</span><br><span class="line">                        clientSocket.BeginReceive(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, ReceiveCallback, clientSocket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SocketException se)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;ReceiveException:&quot;</span> + se.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（五）测试"><a href="#（五）测试" class="headerlink" title="（五）测试"></a>（五）测试</h4><p>测试流程大概是先启动服务器，然后启动三个客户端，三个客户端分别以A、B、C的名称作为客户端名称与服务器建立连接，连接后再由客户端A、B、C分别向服务器发送信息，通过观察三个客户端的消息面板来确定测试结果，具体测试流程请观看下列视频：</p><p>本地服务器多客户端通信</p><h4 id="（六）总结"><a href="#（六）总结" class="headerlink" title="（六）总结"></a>（六）总结</h4><p>在服务器端，我们通过一个C#控制台项目来模拟服务器后台，服务器与客户端具有类似的功能，同样具有发送、接收消息的功能，不同的是服务器具有监听客户端连接的功能，而客户端具有向服务器发送连接请求的功能，本质上这些都是通过Socket实现的功能，人为划分成服务器端和客户端。在客户端我们通过GUI将用户的操作进行可视化构建，实现了回显、客户端名称选择、连接、断开连接、发送和显示消息等基本交互。</p><p>为了模拟多客户端并发操作，所有功能我们都采用了异步的方式启动，对于真正的网络通信而言，这对我们来说才刚刚开始，不过通过这个案例也让我们了解了基本的网络通信流程。</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/134539702">https://blog.csdn.net/hgf1037882434/article/details/134539702</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 网络 </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>自定义C#类库（.dll文件）</title>
      
      <link href="/2025/05/04/2025-05-04-%E8%87%AA%E5%AE%9A%E4%B9%89C-%E7%B1%BB%E5%BA%93%EF%BC%88-dll%E6%96%87%E4%BB%B6%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-%E8%87%AA%E5%AE%9A%E4%B9%89C-%E7%B1%BB%E5%BA%93%EF%BC%88-dll%E6%96%87%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>操作系统：Windows 10</p><p>开发工具：Visual Studio 2022</p><p>.Net桌面开发环境：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3e846a55984178d151382408f01503ed.png"></p><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><p><strong>（一）创建C#类库项目</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b63494e9a3b449746f1a48e01e2ba35b.png"></p><p><strong>（二）配置项目名称和项目路径</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f6d5b173f31ee8e46ef40eaafa4825c1.png"></p><p><strong>（三）选择所使用的框架，完成项目创建</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3971e3afe6ce425acc898fbb77d019ce.png"></p><p><strong>（四）创建代码文件，并完成依赖项导入、代码编写以及代码注释</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3ef3084b67e1ba3a13122fed306b9ef9.png"></p><p><strong>（六）完成类库项目开发后，在顶部菜单栏（生成——配置管理器）打开配置管理器</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c9870ad1aed585fbfc15300d5ab9fbc5.png"></p><p><strong>（七）配置管理器中将项目配置为Release，如果涉及到平台请自行配置</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/084998904f3384c39e603cf1802fe7a1.png"></p><p><strong>（八） 在解决方案资源管理器目录中找到项目并鼠标右键选择并打开项目属性面板</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/4d8f74deb73980c7b6df2e8e5782b415.png"></p><p><strong>（九）可以对生成中的选项进行设置，例如开启生成API文档的功能</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/19e3c8acd2615ec1755232eedd053020.png"></p><p><strong>（十）配置完成后，在顶部菜单栏（生成——生成xxx，xxx表示项目名）生成类库</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/166ba3430a0799adbdf663a0bdca5de5.png"></p><p><strong>（十一）查看生成结果信息</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f56d9f99f329a13bba92e0a9ecf25d80.png"></p><h4 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h4><p>1.注意导入项目的依赖项，缺乏依赖可能导致整个类库项目的功能无法正常使用；</p><p>2.类库文件不易于调试，所以可以考虑采用日志的方式来记录调试信息；</p><p>3.好的类库文件应该编写xml文档注释，以便于类库调用者更好地使用类库；</p><p>4.默认导出的类库文件路径：项目目录\bin\Release\框架名\项目名.dll；</p><p>5.默认XML文档与导出的类库文件位于同一目录下。</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135586732">https://blog.csdn.net/hgf1037882434/article/details/135586732</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> .net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity中的协程</title>
      
      <link href="/2025/05/04/2025-05-04-Unity%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/"/>
      <url>/2025/05/04/2025-05-04-Unity%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h4><blockquote><p>协程使得任务的执行可以分配到多个帧中完成，在Unity中，协程从开始执行到第一个yield return 语句后将调用权归还Unity主线程，并在紧随的下一帧继续从上次结束调用的代码上下文位置恢复执行。</p></blockquote><h4 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a><strong>常见应用场景</strong></h4><blockquote><p>HTTP请求、资源加载和文件I&#x2F;O等长时间的异步操作等。</p><p>在Unity中常见于动画控制、延迟执行、渐变效果、事件触发、特定间隔的循环执行、等待用户输入、平滑移动、逐帧处理大量数据和动态生成对象等。</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><blockquote><p>1.避免阻塞协程，因为这会增加Unity主线程在CPU上所耗费的时间。</p><p>2.协程依附的游戏对象被通过SetActive方法禁用时，协程也会停止。当游戏对象通过Destroy被销毁时会立刻触发OnDisable方法，然后Unity会有效地停止协程，在当前帧结束时调用OnDestroy方法。值得注意的是，通过enabled&#x3D;false禁用对象，不会停止协程。</p><p>3.启用协程时的内存压力等于固定开销的分配加上局部变量的大小。</p><p>4.如果需要每帧运行并且长时间运行不会执行到yield语句的协程，改用Update或者LateUpdate是更好的选择。</p><p>5.嵌套协程会带来更高的内存开销，因为需要跟踪对象。</p><p>6.应尽量将一系列操作压缩到尽量少的协程中。</p><p><em>总结自官方英文文档</em></p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>使用示例1</strong></p><blockquote><p>该示例旨在探索协程在网络请求方面的应用，我们将模拟通过协程下载几张网络图片并在UI界面中进行显示，在这个示例中我们会使用到三个协程，一个主协程和两个子协程，子协程分别用于下载和加载图片资源，主协程用于控制两个子协程的启动。负责下载图片的协程会将所有图片资源下载并保存在本地磁盘，负责加载图片的协程会将本地磁盘的图片加载至内存中并赋值给对应的Image组件，先下载后加载。</p></blockquote><p><strong>使用示例2</strong></p><blockquote><p>该示例旨在探索协程在逐张图片下载和加载方面的应用，不同于示例1，该示例中将以一张图片为单位，先进行下载然后进行加载，这么做可以使得用户在UI界面上能够实时浏览图片，例如当需要获取大量图片资源时，示例1在下载图片时就需要用户等待较长时间，而本示例则会每下载一张图片就立刻加载一张，这样可以让用户提前浏览图片。同时示例2并不会直接下载和加载所有图片资源，而是由用户通过按钮交互来切换图片，仅当用户切换后才会下载和加载新的图片资源。</p></blockquote><p><strong>使用示例3</strong></p><blockquote><p>该示例演示了协程在轮播图中的应用，该示例全程自动下载和加载图片资源，同时会自动对图片进行轮播，除此之外图片资源的下载和加载过程会以进度条的方式进行展现。</p></blockquote><p><a href="https://pan.baidu.com/s/1T3VRi3I4JC6QdOrivAGqVg?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135691856">https://blog.csdn.net/hgf1037882434/article/details/135691856</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> API </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity的常见API（一）</title>
      
      <link href="/2025/05/04/2025-05-04-Unity%E7%9A%84%E5%B8%B8%E8%A7%81API%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-Unity%E7%9A%84%E5%B8%B8%E8%A7%81API%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="组件的Invoke和InvokeRepeating方法"><a href="#组件的Invoke和InvokeRepeating方法" class="headerlink" title="组件的Invoke和InvokeRepeating方法"></a>组件的Invoke和InvokeRepeating方法</h4><blockquote><p><strong>public void Invoke</strong>(<strong>string</strong> methodName, <strong>float</strong> time);</p><p><strong>public void InvokeRepeating</strong>(<strong>string</strong> methodName, <strong>float</strong> time, <strong>float</strong> repeatRate);</p></blockquote><blockquote><ol><li>methodName表示待执行的方法名称，time表示首次执行所延迟的时间，repeatRate表示周期性执行的时间。（时间单位均为秒）</li><li>Invoke指定的方法仅执行一次，InvokeRepeating指定的方法会执行多次。</li><li>Invoke指定的方法会延迟至参数指定的秒数后执行，InvokeRepeating指定的方法在time秒后首次执行，之后将按照repeatRate所指定的秒数为周期执行。</li><li>通过CancleInvoke取消Invoke和InvokeRepeating的执行。</li><li>Invoke与InvokeRepeating的执行与Time.timeScale有关，当timeScale为0时不执行，为2时执行速度将是原来的两倍。</li><li>Invoke系列方法不接受含参数的方法，若要调用含参数的方法可以考虑使用协程。</li></ol></blockquote><h4 id="组件的Reset方法"><a href="#组件的Reset方法" class="headerlink" title="组件的Reset方法"></a>组件的Reset方法</h4><blockquote><p><strong>private void Reset</strong>();</p></blockquote><blockquote><p>重置为默认值。</p><p>当用户点击Inspector面板上下文菜单中的“Reset”按钮或第一次添加组件时，将调用 Reset。 此函数只能在编辑器模式下调用。Reset 最常用于在Inspector面板中提供默认值。</p></blockquote><h4 id="刚体的AddForce方法"><a href="#刚体的AddForce方法" class="headerlink" title="刚体的AddForce方法"></a>刚体的AddForce方法</h4><blockquote><p><strong>public void AddForce</strong>(<strong>Vector3</strong> force,<strong>ForceMode</strong> mode**&#x3D; ForceMode.Force**);</p></blockquote><blockquote><p><strong>force</strong> 表示施加力的向量，描述力的大小和方向。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5507d7b5c594d8caea8abfe216bcc286.png"></p><p>注意：该方法仅适用于附加了已激活的刚体的游戏对象，且刚体的类型不能为Kinematic。当通过该方法施加力时刚体默认会被唤醒，除非force为零向量。</p></blockquote><h4 id="CreateAssetMenuAttribute"><a href="#CreateAssetMenuAttribute" class="headerlink" title="CreateAssetMenuAttribute"></a>CreateAssetMenuAttribute</h4><blockquote><p>这是一个编辑器时特性，用它来标记”ScriptableObject”的派生类，即可实现通过Unity3D的右键菜单创建对应的.asset文件，如果标记该特性的类仅在编辑器模式下使用，则建议将其所在文件放置在Editor目录下，否则应使用内置宏UNITY_EDITOR进行声明。</p><p>它包括fileName、menuName、order三个参数，分别表示所创建的.asset文件的默认名称、右键菜单的菜单项名称（路径）以及菜单项序号。</p></blockquote><h4 id="Input中GetAxis和GetAxisRaw的区别"><a href="#Input中GetAxis和GetAxisRaw的区别" class="headerlink" title="Input中GetAxis和GetAxisRaw的区别"></a>Input中GetAxis和GetAxisRaw的区别</h4><blockquote><p>1.GetAxis是获取-1到0以及0到1之间的插值，适用于需要对按键灵敏进行处理的输入；</p><p>2.GetAxisRaw则是从-1，0，1三者之间获取其中一个值；</p><p>3.右下（D&#x2F;S）为正值，左上（A&#x2F;W）为负值，在编写角色转向相关逻辑的时候需要注意这一点。</p></blockquote><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135692127">https://blog.csdn.net/hgf1037882434/article/details/135692127</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>CharacterController组件的基本使用</title>
      
      <link href="/2025/05/04/2025-05-04-CharacterController%E7%BB%84%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/04/2025-05-04-CharacterController%E7%BB%84%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>CharacterController是一个基础的角色控制组件，通过它我们可以实现包括移动、奔跑、跳跃、爬楼梯和爬斜坡等基本的角色操作。它主要用于不基于刚体物理的第一人称或第三人称的角色控制。</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><blockquote><p>1.Move 方法是基于世界坐标系的，并且没有重力支持；</p><p>2.SimpleMove方法也是基于世界坐标系的，有重力支持（重力为游戏项目的全局重力值，在Editor-Project Settings-Physics-Gravity设置）；</p><p>3.跳跃应该采用Move方法；</p><p>4.isGrounded与Skin Width和Min Move Distance参数有关。当你觉得isGrounded的判断不精确时可以尝试调节Skin Width和Min Move Distance参数。官方建议Skin Width保持为Radius参数的10%，而Min Move Distance为0；</p><p>5.对于穿透、卡住、碰撞抖动等问题可以通过适当增大Skin Width的方式来解决；</p><p>6.使用该组件后无法通过Transform组件直接修改坐标、旋转等变换值，需要先禁用该组件，修改完成后再重新启用。</p><p><em>总结自 <em><a href="https://docs.unity3d.com/Manual/class-CharacterController.html" title="官方英文文档">官方英文文档</a></em></em></p></blockquote><h4 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a><strong>脚本示例</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">RequireComponent(typeof(CharacterController))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;必要属性&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;角色转向速度&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">float</span> TurnSpeed = <span class="number">100</span>;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;角色移动速度&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">float</span> MoveSpeed = <span class="number">13</span>;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;角色跳跃高度&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">float</span> JumpHeight = <span class="number">2.5f</span>;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;重力加速度值&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">float</span> GravityValue = <span class="number">-9.81f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CharacterController cc;</span><br><span class="line">    <span class="keyword">private</span> Vector3 playerVelocity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cc = GetComponent&lt;CharacterController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Movement();</span><br><span class="line">        Jump();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 角色转向</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Turn</span>(<span class="params"><span class="built_in">float</span> hor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 euler = transform.localRotation.eulerAngles;</span><br><span class="line">        <span class="built_in">float</span> yRotation = euler.y + hor * TurnSpeed * Time.deltaTime;</span><br><span class="line">        transform.localRotation = Quaternion.Euler(euler.x, yRotation, euler.z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于CharacterController的Move方法</span></span><br><span class="line">    <span class="comment">// private void Movement()</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     float hor = Input.GetAxisRaw(&quot;Horizontal&quot;);</span></span><br><span class="line">    <span class="comment">//     float ver = Input.GetAxisRaw(&quot;Vertical&quot;);</span></span><br><span class="line">    <span class="comment">//     if (hor != 0) Turn(hor);</span></span><br><span class="line">    <span class="comment">//     Vector3 direction = transform.TransformDirection(Vector3.forward * ver);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     cc.Move(direction * Time.deltaTime * MoveSpeed);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于CharacterController的SimpleMove方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Movement</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> hor = Input.GetAxisRaw(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="built_in">float</span> ver = Input.GetAxisRaw(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (hor != <span class="number">0</span>) Turn(hor);</span><br><span class="line">        Vector3 direction = transform.TransformDirection(Vector3.forward * ver);</span><br><span class="line"></span><br><span class="line">        cc.SimpleMove(direction * MoveSpeed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 角色跳跃</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Jump</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cc.isGrounded)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (playerVelocity.y &lt; <span class="number">0</span>) playerVelocity.y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetButtonDown(<span class="string">&quot;Jump&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                playerVelocity.y += Mathf.Sqrt(JumpHeight * <span class="number">-3.0f</span> * GravityValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        playerVelocity.y += GravityValue * Time.deltaTime;</span><br><span class="line">        cc.Move(playerVelocity * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a><strong>相关文章</strong></h4><p><a href="https://blog.csdn.net/hgf1037882434/article/details/135881873" title="【Demo】基于CharacterController组件的角色控制">【Demo】基于CharacterController组件的角色控制</a></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135741579">https://blog.csdn.net/hgf1037882434/article/details/135741579</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【小巧|轻便|实用】图片缩放器工具</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90%E5%B0%8F%E5%B7%A7%E8%BD%BB%E4%BE%BF%E5%AE%9E%E7%94%A8%E3%80%91%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE%E5%99%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90%E5%B0%8F%E5%B7%A7%E8%BD%BB%E4%BE%BF%E5%AE%9E%E7%94%A8%E3%80%91%E5%9B%BE%E7%89%87%E7%BC%A9%E6%94%BE%E5%99%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><h4 id="【V1-0】"><a href="#【V1-0】" class="headerlink" title="【V1.0】"></a>【V1.0】</h4><p><strong>工具名称：</strong> 图片缩放器（Image Resizer）</p><p><strong>工具版本：</strong> 1.0</p><p><strong>功能介绍：</strong></p><p>1.批量生成指定目录下不同图片文件的指定尺寸的图片文件；<br>2.可以选择预设尺寸，也可以输入自定义尺寸；<br>3.重置按钮可以清空所有输入框；<br>4.顶部菜单可以更换语言版本，分为英文和中文。</p><p><strong>工具截图：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5b1e12121b3829cbe57272d92c0b9164.png"></p><p><strong>下载链接：</strong><a href="https://pan.baidu.com/s/1Ab9asosSZKginvY7Akx_Hg?pwd=1314" title="百度网盘">百度网盘</a> （提取码：1314）</p><h4 id="【V1-1】"><a href="#【V1-1】" class="headerlink" title="【V1.1】"></a>【V1.1】</h4><table><thead><tr><th>版本对比 <strong>功能</strong></th><th><strong>V1.0</strong></th><th><strong>V1.1</strong></th></tr></thead><tbody><tr><td>预设尺寸</td><td><strong>√</strong></td><td><strong>√</strong></td></tr><tr><td>自定义尺寸</td><td><strong>√</strong></td><td><strong>√</strong></td></tr><tr><td>添加图片文件命名前后缀</td><td><strong>×</strong></td><td><strong>√</strong></td></tr><tr><td>仅缩放画布</td><td><strong>×</strong></td><td><strong>√</strong></td></tr><tr><td>重置</td><td><strong>√</strong></td><td><strong>√</strong></td></tr><tr><td>中英文版本切换</td><td><strong>√</strong></td><td><strong>√</strong></td></tr><tr><td>提示</td><td><strong>×</strong></td><td><strong>√</strong></td></tr></tbody></table><p><strong>工具截图：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/87fd9782a45f8258512b6cac28be036e.png"></p><p><strong>下载链接：</strong><a href="https://pan.baidu.com/s/1TCAREeUeZwAH0jWoT6Y13w?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135878695">https://blog.csdn.net/hgf1037882434/article/details/135878695</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 个人开发的小工具 </tag>
            
            <tag> python </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Demo】基于CharacterController组件的角色控制</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E5%9F%BA%E4%BA%8ECharacterController%E7%BB%84%E4%BB%B6%E7%9A%84%E8%A7%92%E8%89%B2%E6%8E%A7%E5%88%B6/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E5%9F%BA%E4%BA%8ECharacterController%E7%BB%84%E4%BB%B6%E7%9A%84%E8%A7%92%E8%89%B2%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>项目名称：Demo1</p><p>项目版本：1.0</p><p>游戏引擎：Unity2020.3.26f1c1</p><p>IDE：Visual Studio Code</p><p>关键词：Unity3D，CharacterController组件，角色控制，自定义按键，ScriptableObject</p><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><p>（1）这是一个基于CharacterController组件实现角色控制的小项目。<br>（2）项目分为两个场景，一个是主菜单场景，另一个是游戏场景。<br>（3）主菜单场景中可以点击Play进入游戏场景，点击Quit退出项目。<br>（4）在游戏场景中，顶部有角色控制的按键提示，角色可以完成基本的移动、转向、跳跃、下蹲和冲刺操作。<br>（5）默认通过Tab键打开游戏菜单，点击Restart可以回到起始点；点击PlayerSettings进入角色属性设置面板，可以设置角色的转向速度、移动速度、跳跃高度、重力加速度（负值）和冲刺速度倍率；点击InputSettings进入输入设置面板，可以设置每种操作对应的按键；点击Quit退出项目。<br>（6）对于角色属性设置和输入设置都可以通过点击Reset恢复默认设置。</p><h4 id="游戏流程"><a href="#游戏流程" class="headerlink" title="游戏流程"></a>游戏流程</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f408ef8eb5deb600a64efc2d7003fb40.png"></p><h4 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h4><p><a href="https://pan.baidu.com/s/1JBAbkHS4nBaqzxQcQ8sDjQ?pwd=1314" title="百度网盘">百度网盘</a> （项目文件，提取码：1314）<a href="https://pan.baidu.com/s/1rCsZaASGVm0ViLvnrXHAbg?pwd=1314" title="百度网盘">百度网盘</a>（可执行文件，提取码：1314）</p><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p><a href="https://blog.csdn.net/hgf1037882434/article/details/135741579" title="CharacterController组件的基本使用">CharacterController组件的基本使用</a></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135881873">https://blog.csdn.net/hgf1037882434/article/details/135881873</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> Demos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【小巧|轻便|实用】汉字机内码转换器</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90%E5%B0%8F%E5%B7%A7%E8%BD%BB%E4%BE%BF%E5%AE%9E%E7%94%A8%E3%80%91%E6%B1%89%E5%AD%97%E6%9C%BA%E5%86%85%E7%A0%81%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90%E5%B0%8F%E5%B7%A7%E8%BD%BB%E4%BE%BF%E5%AE%9E%E7%94%A8%E3%80%91%E6%B1%89%E5%AD%97%E6%9C%BA%E5%86%85%E7%A0%81%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><h4 id="【V1-0】"><a href="#【V1-0】" class="headerlink" title="【V1.0】"></a>【V1.0】</h4><p><strong>工具名称：</strong> 机内码转换器（Machine Code Converter）</p><p><strong>工具版本：</strong> 1.0</p><p><strong>功能介绍：</strong></p><p>1.输入一到多个汉字；<br>2.可选择GB2312或GBK汉字编码标准；<br>3.可一键复制生成的机内码；<br>4.可通过重置按钮一键清空汉字内容输入框和机内码输出框；<br>5.可切换中英文语言版本。</p><p><strong>工具截图：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d61dfd7dc5212af3ebb85af62ad5fe11.png"></p><p><strong>下载链接：</strong><a href="https://pan.baidu.com/s/1ObWUJndH62NosCINFWMS7g?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><h4 id="【V1-1】"><a href="#【V1-1】" class="headerlink" title="【V1.1】"></a>【V1.1】</h4><table><thead><tr><th>版本对比 <strong>功能</strong></th><th><strong>v1.0</strong></th><th><strong>v1.1</strong></th></tr></thead><tbody><tr><td>选择文本文件</td><td>×</td><td>√</td></tr><tr><td>输入汉字内容</td><td>√</td><td>√</td></tr><tr><td>选择汉字编码标准</td><td>√</td><td>√</td></tr><tr><td>一键复制机内码</td><td>√</td><td>√</td></tr><tr><td>一键清空输入框和输出框</td><td>√</td><td>√</td></tr><tr><td>提示</td><td>×</td><td>√</td></tr><tr><td>中英文语言版本切换</td><td>√</td><td>√</td></tr><tr><td>生成机内码文本文件</td><td>×</td><td>√</td></tr></tbody></table><p><strong>工具截图：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c6f473853ce3ad6207fc17a212cd6737.png"></p><p><strong>下载链接：</strong><a href="https://pan.baidu.com/s/1vKZ6EmQDGmY3-T-ef8ll4Q?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135902622">https://blog.csdn.net/hgf1037882434/article/details/135902622</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 个人开发的小工具 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【小巧|轻便|实用】屏幕取色器</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90%E5%B0%8F%E5%B7%A7%E8%BD%BB%E4%BE%BF%E5%AE%9E%E7%94%A8%E3%80%91%E5%B1%8F%E5%B9%95%E5%8F%96%E8%89%B2%E5%99%A8/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90%E5%B0%8F%E5%B7%A7%E8%BD%BB%E4%BE%BF%E5%AE%9E%E7%94%A8%E3%80%91%E5%B1%8F%E5%B9%95%E5%8F%96%E8%89%B2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><h4 id="【v1-0】"><a href="#【v1-0】" class="headerlink" title="【v1.0】"></a>【v1.0】</h4><p><strong>工具名称：</strong> 屏幕取色器（Color Picker）</p><p><strong>工具版本：</strong> 1.0</p><p><strong>功能介绍：</strong></p><p>1.可以控制取色器的启用和禁用；<br>2.可以快速复制当前颜色信息数值；<br>3.可以切换颜色信息显示模式，包括颜色的十六进制、HSL、HSV和RGB；<br>4.可以切换中英文语言版本。</p><p><strong>工具截图：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/02301a191b8b35c0828d3a8f38724926.png"></p><p><strong>下载链接：</strong><a href="https://pan.baidu.com/s/1YCBofAc_fjKOckcTutcWHw?pwd=1314" title="百度网盘">百度网盘</a> （提取码：1314）</p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/135948747">https://blog.csdn.net/hgf1037882434/article/details/135948747</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 个人开发的小工具 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>C#常识篇（一）</title>
      
      <link href="/2025/05/04/2025-05-04-C-%E5%B8%B8%E8%AF%86%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-C-%E5%B8%B8%E8%AF%86%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h4><blockquote><p><strong>继承：</strong> 子类通过继承父类来获取基础特性，并且能够基于父类进行扩展以及提升代码的复用性。继承具有传递性，例如A继承自B，C继承自A，那么C就间接继承自B。在C#中，每个类仅允许继承一个父类。继承能够让程序的结构更加明晰。</p><p><strong>封装：</strong> 将数据和行为封装为一个独立的单元，对外部隐藏具体的实现细节，仅提供必要的调用接口，从而简化外部调用和提升代码的复用性和可维护性。</p><p><strong>多态：</strong> 同一操作针对不同的的对象或应用情景而存在不同的行为，例如运行时的多态——重写，编译时的多态——重载，重写则是根据不同的实例对象而表现不同的行为，重载则是根据传递的参数而自动选择对应的行为。</p></blockquote><h4 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h4><blockquote><p>在C#中值类型继承自System.ValueType类，包括整型、浮点型、布尔类型、字符型四种简单值类型，以及结构体和枚举两种复合值类型，这些简单值类型本质上就是结构体。引用类型继承自System.Object类，包括class、delegate、array、object等。</p></blockquote><h4 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h4><blockquote><p>GC是一种垃圾回收机制，为了高效、便捷和安全地管理内存，C#中采用了自动垃圾回收机制，由系统代理内存管理，从而提高开发效率和避免内存泄漏等问题。C#的GC采用的是”标记-清理”算法和分代管理方式。</p><p>（1）”标记-清理”算法是从根对象开始，根据对象的引用关系递归标记可达对象，在清理阶段则对不可达对象进行内存清理，某些GC还会在清理阶段进行内存压缩从而减少内存碎片化。</p><p>（2）分代管理是在托管堆上根据所创建对象的生命周期进行分类，刚创建的对象被称为”第一代”，在上一次”标记-清理”阶段存活下来的对象会被分类为”第二代”，以此类推，分代管理的目的是为了通过控制对象进行”标记-清理”的频率从而提高GC的效率。</p></blockquote><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><blockquote><p>反射是一种在运行时动态访问程序集的方式。在C#中通过System.Reflection命名空间中的API在运行时获取程序集的元数据，通常我们可以通过获取指定类型的Type对象再通过反射获取其字段、属性和方法等成员，实现在运行时间接操作对象，不过反射通常会带来一定的性能开销，所以不建议大量使用。</p></blockquote><h4 id="StringBuilder和String"><a href="#StringBuilder和String" class="headerlink" title="StringBuilder和String"></a>StringBuilder和String</h4><blockquote><p>StringBuilder顾名思义就是字符串构建器，对StringBuilder对象的操作是基于可变内存缓冲区的，这个特性减少了创建新对象的需求，相较于String类型，它更适合频繁操作字符串的应用场景，但是它不是线程安全的。String类型是不可变的，对其进行的字符串操作通常涉及到需要创建新的String类型对象。总而言之，对于需要频繁操作字符串的情况建议使用StringBuilder类型，反之使用String类型。</p></blockquote><h4 id="常见容器类"><a href="#常见容器类" class="headerlink" title="常见容器类"></a>常见容器类</h4><blockquote><p>（1）<strong>数组</strong><strong>(Array)****：</strong> 在定义或初始化时需要明确指定数组长度的容器类，严格意义上来说数组可以进行数据修改，但是无法进行增加和删除，因为数组的长度是固定的，要对数组进行增加和删除操作，通常需要创建一个新的数组对象。数组的内存是连续的，所以其查询和修改的效率是可观的，其通常适合存储一些数量固定的数据。</p><p>（2）<strong>列表</strong><strong>(List <T>)****：</strong> 列表可以看作是一个动态的泛型数组，能够根据需要动态调整容量大小，避免了ArrayList中的装箱和拆箱操作，由于其底层实现依旧是数组，所以增加和删除操作是耗时操作。</p><p>（3）<strong>栈</strong><strong>(Stack <T>)****：</strong> 栈是一种后进先出的数据结构，涉及到元素的入栈和出栈操作，后入栈的元素则先出栈，栈的操作仅支持栈顶操作，通常其不适合具有广泛的查询元素需求的应用场景。</p><p>（4）<strong>队列</strong><strong>(Queue <T>)****：</strong> 队列是一种先进先出的数据结构，涉及到元素的入队和出队操作，先入队的元素则先出队，队列的操作支持队首和队尾操作，通常其不适合具有广泛的查询元素需求的应用场景。</p><p>（5）<strong>字典</strong><strong>(Dictionary &lt;K,V&gt;)****：</strong> 字典是一种基于哈希表的数据结构，以键值对的方式保存元素，键唯一而值不唯一，同一个字典中不允许重复的键，但允许重复的值，因其基于哈希表的特性，所以对于元素的查询、插入和删除操作效率是可观的。</p><p>（6）<strong>集合</strong><strong>(HashSet <T>)****：</strong> 集合是一种基于哈希表的数据结构，它不允许存储重复的元素，所以非常适合需要去重的应用场景，因其基于哈希表的特性，所以对于元素的查询、插入和删除操作效率是可观的。</p><p>（7）<strong>哈希表</strong><strong>(Hashtable)****：</strong> 哈希表的底层实现是数组，数组元素由一种名为”桶”的数据结构组成，哈希表通过哈希函数将键映射到数组索引，严格来说一个键应该对应一个数组索引，当存在不同的键映射到同一个数组索引时则为哈希冲突，哈希表的设计关键则在于如何制定哈希函数和处理哈希冲突，处理哈希冲突常见的方法有链地址法和开放地址法，链地址法则是在数组索引处维护一个链表用于存储映射到该索引的不同键，而开放地址法则是通过一定的规则在哈希表中寻找到下一个可用的索引位置，然后插入元素。官方建议在新项目的开发中使用字典替代哈希表。</p></blockquote><h4 id="隐式继承和显式继承"><a href="#隐式继承和显式继承" class="headerlink" title="隐式继承和显式继承"></a>隐式继承和显式继承</h4><blockquote><p>在C#中通过英文符号”:”来实现显式继承，显式继承则需要显式指定基类，而隐式继承通常由编译器隐藏基类，例如声明自定义类时并不需要显式继承System.Object，而由编译器自动完成这个继承行为，所以声明的自定义类即使没有显式继承自System.Object，但实际上却是System.Object的派生类，在编译时就会有所体现，可以通过自定义类的实例查阅到可调用的方法中包括System.Object的基本方法。</p></blockquote><h4 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h4><blockquote><p>栈内存是基于栈这种数据结构构建的内存空间，通常用于存储代码上下文，例如某个被调用的函数的局部变量、参数和返回地址等信息，栈内存由编译器或解释器自动管理内存的分配和释放。</p><p>堆内存是基于堆这种数据结构构建的内存空间，通常用于存储动态分配的数据，例如实例对象和数组等，堆内存通常由程序员手动管理或者GC自动管理。</p><p>栈内存相比堆内存更轻量和便捷，访问更加快速，内存管理的性能开销更小；堆内存相比栈内存拥有更大的存储空间，其中的数据没有固定的生命周期，可以跨函数或代码块使用。值得注意的是堆内存可能涉及到内存碎片化的问题，并且涉及为对象分配合适的内存块而需要更大的性能开销。</p></blockquote><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><blockquote><p>析构函数的形式是”~类名”，且该函数无需添加任何修饰符，没有返回值也没有参数列表。析构函数是在对象销毁时自动调用的函数，尽管如此官方并不建议在该函数中去释放托管资源，因为GC执行析构函数的顺序是不确定的，自主释放托管资源可能导致未知错误。</p></blockquote><h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><blockquote><p>抽象类本质上是一种特殊的类，具备构造函数，能够声明和定义实例化的字段、属性以及函数，同时也能够声明抽象的函数，抽象类能够继承其它类和实现接口。与普通的类不同的是抽象类无法直接通过new创建实例，而需要通过其派生类间接创建实例，并且抽象类的抽象函数必须被派生类实现。</p><p>接口仅允许声明而不需要实现字段和函数，且均是公开的，接口可以嵌套实现其它接口，其相比抽象类是更高层次的抽象，所以同样无法创建实例。</p></blockquote><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136276029">https://blog.csdn.net/hgf1037882434/article/details/136276029</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>C#常识篇（二）</title>
      
      <link href="/2025/05/04/2025-05-04-C-%E5%B8%B8%E8%AF%86%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-C-%E5%B8%B8%E8%AF%86%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="委托和事件的区别"><a href="#委托和事件的区别" class="headerlink" title="委托和事件的区别"></a>委托和事件的区别</h4><blockquote><p>委托可以认为是对指定签名的函数的引用，通过委托可以实现将函数作为参数传递或者间接调用函数，委托是类型安全的，仅指向与其声明时指定签名相匹配的函数。委托可以分为单播委托和多播委托，二者的区别在于是对单个方法还是一组方法的引用，多播委托则可以通过特定的符号”+&#x3D;”和”-&#x3D;”来完成函数的订阅和取消订阅。</p><p>事件则是一种特殊的多播委托，其相比于普通的多播委托更加安全，事件将多播委托的调用权限隔离在其所在类的内部，并对外部关闭了直接通过赋值符号”&#x3D;”修改多播委托实例的入口，使得外部调用者仅能够进行基本的函数订阅和取消订阅的操作。</p></blockquote><h4 id="多播委托的底层实现"><a href="#多播委托的底层实现" class="headerlink" title="多播委托的底层实现"></a>多播委托的底层实现</h4><blockquote><p>多播委托实际上是一个类实例，其中定义了一个函数引用列表用于存储订阅的函数。当调用多播委托时，将由CLR来遍历该函数引用列表，并按照订阅顺序依次调用函数。</p></blockquote><h4 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h4><blockquote><p>重载是一种编译时多态，重载函数的名称相同但参数列表不同，在调用时编译器会自动根据传递的参数列表适配指定形式的重载函数。</p><p>重写是一种运行时多态，子类重写父类的方法，在调用时根据实例对象的类型而适配重写函数。</p></blockquote><h4 id="for和foreach的区别"><a href="#for和foreach的区别" class="headerlink" title="for和foreach的区别"></a>for和foreach的区别</h4><blockquote><p>以数组为例，for循环根据数组下标遍历元素，而foreach循环通过生成数组的临时迭代器来遍历元素，并且foreach循环是只读的，修改操作可能导致迭代器失效，例如一边遍历一边删除元素的行为。所以通常来说优先考虑使用for循环。</p></blockquote><h4 id="类和结构体的区别"><a href="#类和结构体的区别" class="headerlink" title="类和结构体的区别"></a>类和结构体的区别</h4><blockquote><p>1.类的实例对象保存在堆上，而其引用保存在栈上；结构体的数据和存储其的变量均保存在栈上。</p><p>2.类能够实现继承、多态和封装，能够实现接口；结构体仅能实现接口。</p><p>3.类为引用类型，可以有多个变量指向同一个类的实例，其中一个变量对实例的修改就会影响其它变量；结构体为值类型，多个变量指向结构体的实例，实际上是各自存储了结构体的副本，所以各自的修改互不影响。</p><p>4.类更适合大型对象、需要封装较多行为或者需要实现继承和多态的情况；结构体则适用于轻量的或具有少量行为的或不可变的数据结构，结构体更偏向于数据而不是行为，这与类有所不同。</p></blockquote><h4 id="foreach的原理"><a href="#foreach的原理" class="headerlink" title="foreach的原理"></a>foreach的原理</h4><blockquote><p>foreach是一种结合迭代器模式遍历实现了IEnumerable（或IEnumerable<T>）接口的容器类的语句，这两个接口会提供获取IEnumerator（或IEnumerator<T>）类型迭代器的方法，foreach会在运行时自动获取迭代器并启动对容器类的遍历。</p></blockquote><h4 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h4><blockquote><p>协变则是将派生程度更大的赋值给派生程度更小的变量，逆变则是将派生程度更小的赋值给派生程度更大的变量。协变和逆变通常针对数组、委托和泛型参数，例如通过out或in关键字修饰泛型参数，使得方法组具有协变或逆变性，协变性通常体现在方法的返回类型，而逆变性通常体现在方法的参数类型。</p></blockquote><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><blockquote><p>结构体隐式继承自System.ValueType，属于值类型，所以其数据和引用它的变量均存储在栈上。以下是结构体的一些特性：</p><p>1.无法实现多态和继承，但是可以实现接口，可以重写Equals、ToString、GetHashCode三个方法；</p><p>2.无法声明本结构体类型的字段或属性；</p><p>3.如果不存在属性且未自定义构造函数，可以不通过new关键字创建结构体实例，但是在使用该结构体实例前须对所有字段进行初始化；</p><p>4.自定义的构造函数将覆盖默认的无参构造函数，所以须通过new关键字创建结构体实例，自定义的构造函数须对所有字段进行初始化；</p><p>结构体偏向于数据而不是行为，通过变量将结构体实例赋值给其它变量时会涉及到结构体的拷贝，对结构体的拷贝会涉及更多的性能开销。结构体的进阶使用可以参考readonly和init关键字相关知识。</p></blockquote><h4 id="常见修饰符"><a href="#常见修饰符" class="headerlink" title="常见修饰符"></a>常见修饰符</h4><blockquote><p>（1）public:能够在其声明所在的类或结构体甚至程序集外部访问，程序集外部访问需要引用其所在程序集；</p><p>（2）protected:能够在直接或间接派生类或其声明所在的类中访问；</p><p>（3）private:仅能够在其声明所在的类或结构体中访问；</p><p>（4）internal:能够在其声明所在的类或结构体之外但在所处程序集之内访问；</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/1f292ada49eb7eef25fb25bc22ee6214.png"></p><p>值得注意的是，未明确指定访问修饰符的类或结构体或接口默认为internal，未明确指定访问修饰符的类成员或结构体成员默认为private，接口成员默认为public。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ce8d6747b8ea98f6fabd4f4c6ee71930.png"></p></blockquote><h4 id="静态构造函数"><a href="#静态构造函数" class="headerlink" title="静态构造函数"></a>静态构造函数</h4><blockquote><p>静态构造函数用于初始化任何静态数据，或执行仅需执行一次的特定操作。 将在创建第一个实例或引用任何静态成员之前自动调用静态构造函数。 静态构造函数最多调用一次。如果静态字段的初始化并不复杂或者不涉及一些特殊的处理，那么建议在静态字段声明时即进行初始化，使用静态构造函数会影响运行时优化。常见的应用场景包括日志记录、创建非托管代码的包装类以及运行时的参数类型检查。</p></blockquote><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136282711">https://blog.csdn.net/hgf1037882434/article/details/136282711</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity中的ScriptableObject</title>
      
      <link href="/2025/05/04/2025-05-04-Unity%E4%B8%AD%E7%9A%84ScriptableObject/"/>
      <url>/2025/05/04/2025-05-04-Unity%E4%B8%AD%E7%9A%84ScriptableObject/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>ScriptableObject是一种与Monobehaviour相似并能够进行序列化以及生成.asset文件的对象类型，但是ScriptableObject类型对象无法像组件一样进行挂载，只能通过CreateInstance方法创建实例，还可以通过CreateAsset特性为指定的ScriptableObject类型对象轻松创建.asset持久化存储的资源文件。</p></blockquote><h4 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a><strong>常见应用场景</strong></h4><blockquote><p>1.存储和管理可共享数据或资源（持久化存储）；</p><p>2.编辑器工具（访问编辑器API）；</p><p>3.事件系统（全局性资产）；</p><p>4.数据序列化（可序列化）；</p><p>5.可扩展性要求（可插拔）。</p><p>……</p><p><em>来自官方英文文档</em></p></blockquote><h4 id="个人使用总结"><a href="#个人使用总结" class="headerlink" title="个人使用总结"></a><strong>个人使用总结</strong></h4><blockquote><p>1.当在ScriptableObject派生类中通过自定义的方式实现单例模式时，在类内部访问成员字段或属性时，需要注意，通过单例访问和直接访问的区别。单例由于是静态的，所以全局保留在内存中，所以单例访问会贯穿整个生命周期，不会被GC回收，但是如果是直接访问则是一种类似于通过”this.”的实例方式访问，这种方式会受到GC回收的影响，一旦当前派生类被禁用或不被外部访问时，GC就会回收该实例，在此之后，如果在类的内部通过直接访问的方式二次访问成员字段或属性，则会出现字段或属性为类型默认值（0或Null等）的情况，要避免这种情况要么在该派生类重新激活时进行初始化或者直接使用单例访问的方式。</p><hr><p>2.ScriptableObject派生类适用于存储编辑器Play模式或导出的构建程序中的只读数据，还适用于存储编辑器模式下的数据，且支持读写操作，具体请参考示例1和2。</p><hr><p>3.可以通过继承ScriptableSingleton<T>直接实现ScriptableObject+单例模式，例如当存在一个全局唯一的数据表时，这个方式将使得数据的访问和管理变得非常便利，具体请参考使用示例3。</p></blockquote><h4 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a><strong>示例项目</strong></h4><p><strong>使用示例1</strong></p><blockquote><p>本示例旨在探索两个问题：</p><p>1.ScriptableObject类型对象在编辑器Play模式下的读写操作；</p><p>2.ScriptableObject类型对象在构建程序的运行时中的读写操作。</p><p>示例模拟了玩家通过UI界面修改角色属性并保存修改的应用场景，结果显示在编辑器Play模式下的修改不会被应用于对应的asset文件中，反映在编辑器中则是退出编辑器Play模式后对应asset文件的Inspector面板中数据虽然发生修改，但是这个修改是保留在缓存中的，并没有写入到磁盘中，通过打开asset文件即可验证，当我们下次重新打开Unity时会发现修改并没有被持久化保存，这种情况下可能就涉及到调用AssetDatabase相关的API来手动保存asset文件的修改，但是在编辑器Play模式下执行这类API显然是不适用的，所以不建议需要在编辑器Play模式下修改的数据以ScriptableObject类型对象的形式存储，仅推荐只读访问。在导出的构建程序中也是如此，Unity构建过程中会将项目中的asset资源打包为只读资源，所以也只能提供只读访问。</p><p>（对应项目中Example_1）</p><hr><p>故通过该示例得出结论：ScriptableObject类型对象实例在编辑器Play模式下或在构建程序的运行时中均支持只读操作。</p></blockquote><p><strong>使用示例2</strong></p><blockquote><p>该示例旨在探索ScriptableObject类型对象在编辑器模式下的读写操作，模拟了用户通过编辑器UI界面浏览、添加和删除信息的应用场景，结果显示在编辑器模式下的修改最终会被应用于对应的asset文件中，但是对于asset文件的修改，也只是暂存于缓存中，要想持久化存储，就需要结合AssetDatabase相关的API来完成保存。（对应项目中Example_2）</p><hr><p>故通过该示例得出结论：ScriptableObject类型对象实例在编辑器模式下支持读写操作。</p></blockquote><p><strong>使用示例3</strong></p><blockquote><p>本示例旨在探索ScriptableObject类型对象的单例模式应用是否具有普遍意义，模拟了用户通过编辑器UI界面浏览、添加和删除信息的应用场景，ScriptableSingleton<T>类型对象则是ScriptableObject类型对象和单例模式结合的产物，通过继承ScriptableSingleton<T>即可打造一个全局可访的ScriptableObject类型对象，并且无需手动从本地磁盘去加载其实例，使用FilePath特性即可完成ScriptableObject类型对象的持久化存储文件的构建。（对应项目中Example_3）</p><hr><p>ScriptableSingleton<T>也是继承自ScriptableObject，并且通过单例模式进行了封装，对外部隐藏了持久化存储文件的路径，简化了外部的访问以及保证了全局访问的唯一入口。</p></blockquote><p>PS：示例项目为.unitypackage形式文件，下载后直接导入项目根据提示进行演示即可。</p><p><a href="https://pan.baidu.com/s/18wmR9zCkqAFLE4HTKB0WtA?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136296004">https://blog.csdn.net/hgf1037882434/article/details/136296004</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> API </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>C#常识篇（三）</title>
      
      <link href="/2025/05/04/2025-05-04-C-%E5%B8%B8%E8%AF%86%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-C-%E5%B8%B8%E8%AF%86%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="内置类型字节大小"><a href="#内置类型字节大小" class="headerlink" title="内置类型字节大小"></a>内置类型字节大小</h4><blockquote><p>以下是 C# 中常见内置数据类型的字节大小：</p><p>bool（布尔）类型：通常为 4 或者 8 字节。在不同平台上可能会有所不同。</p><p>byte（无符号字节）类型：始终为 1 字节。</p><p>sbyte（有符号字节）类型：始终为 1 字节。</p><p>char（Unicode 字符）类型：通常为 2 字节。</p><p>short（短整型）类型：通常为 2 字节。</p><p>ushort（无符号短整型）类型：通常为 2 字节。</p><p>int（整型）类型：通常为 4 字节。</p><p>uint（无符号整型）类型：通常为 4 字节。</p><p>long（长整型）类型：通常为 8 字节。</p><p>ulong（无符号长整型）类型：通常为 8 字节。</p><p>float（单精度浮点型）类型：通常为 4 字节。</p><p>double（双精度浮点型）类型：通常为 8 字节。</p><p>decimal（高精度十进制型）类型：通常为 16 字节。</p></blockquote><h4 id="using语句"><a href="#using语句" class="headerlink" title="using语句"></a>using语句</h4><blockquote><p>using语句用于正确使用可释放对象（实现IDisposable接口），using语句块中无论是否发生异常都会释放可释放对象。using语句可声明多个可释放对象，释放将按照声明的相反顺序进行。常见的文件I&#x2F;O操作可以使用using语句。</p></blockquote><h4 id="装箱和取消装箱"><a href="#装箱和取消装箱" class="headerlink" title="装箱和取消装箱"></a>装箱和取消装箱</h4><blockquote><p>装箱是将值类型转换为 object 类型或由此值类型实现的任何接口类型的过程。 常见语言运行时 (CLR) 对值类型进行装箱时，会将值包装在 System.Object 实例中并将其存储在托管堆中。 取消装箱将从对象中提取值类型。 装箱是隐式的；取消装箱是显式的。</p></blockquote><h4 id="静态存储区和托管堆的区别"><a href="#静态存储区和托管堆的区别" class="headerlink" title="静态存储区和托管堆的区别"></a>静态存储区和托管堆的区别</h4><blockquote><p>静态存储区（Static Storage Area）和托管堆（Managed Heap）是两个与内存管理相关的概念，通常用于描述不同的内存分配和管理方式。</p><hr><p><strong>静态存储区：</strong> 静态存储区是指用于存储静态变量的内存区域。静态变量是在程序编译时就被分配内存，并在整个程序生命周期内都存在的变量。这些变量通常包括全局变量、静态类成员变量以及静态局部变量。静态存储区的生命周期与程序的生命周期相同，在程序启动时被分配内存，在程序结束时释放内存。</p><hr><p><strong>托管堆：</strong> 托管堆是托管语言（例如C#、Java等）中用于存储动态分配的对象的内存区域。在C#中，所有的类实例都是在托管堆上分配的。与静态存储区不同，托管堆上的对象的生命周期不是固定的，它们会在不再被引用时由垃圾回收器进行回收。</p><hr><p><strong>总结：</strong> 虽然它们都是用于存储数据的内存区域，但是它们所存储的数据类型和生命周期是不同的，因此静态存储区和托管堆在内存管理中扮演不同的角色。</p><hr><table><thead><tr><th><strong>类型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td>静态存储区</td><td>1.全局访问：访问范围广； 2.生命周期长：与程序生命周期相同； 3.固定内存位置：有利于提高访问速度。</td><td>1.内存分配固定：无法动态分配和释放内存，可能导致内存浪费问题以及降低程序灵活性； 2.线程不安全性：多线程下需要额外的同步进制保证线程安全。</td></tr><tr><td>托管堆</td><td>1.动态内存管理：动态分配和释放内存，有助于节省内存以及提高程序灵活性； 2.垃圾回收：避免内存泄漏和提高内存利用率； 3.对象生命周期管理：由GC自动管理。</td><td>1.垃圾回收开销：GC对托管堆内存的管理会带来一定的性能开销；</td></tr><tr><td>2.内存碎片化：内存的分配可能导致内存碎片的产生，从而降低内存利用率；</td><td></td><td></td></tr><tr><td>3.动态内存分配开销：动态内存分配和释放会带来一定的性能开销。</td><td></td><td></td></tr></tbody></table></blockquote><h4 id="输入流和输出流"><a href="#输入流和输出流" class="headerlink" title="输入流和输出流"></a>输入流和输出流</h4><blockquote><p>输入流（Input Stream）和输出流（Output Stream）是在计算机编程中常用的概念，用于处理数据流的读取和写入。</p><hr><p><strong>输入流：</strong></p><p>1.输入流用于从数据源（如文件、网络连接、键盘输入等）读取数据。</p><p>2.输入流的主要任务是从外部数据源读取数据并提供给程序使用。</p><p>3.输入流通常提供一系列的读取方法，例如读取一个字节、读取一段字节数组、读取一个字符等。</p><p>示例：从文件中读取数据、从网络连接中接收数据等。</p><hr><p><strong>输出流：</strong></p><p>1.输出流用于向目标位置（如文件、网络连接、屏幕显示等）写入数据。</p><p>2.输出流的主要任务是将程序中的数据写入到外部目标位置。</p><p>3.输出流通常提供一系列的写入方法，例如写入一个字节、写入一段字节数组、写入一个字符等。</p><p>示例：向文件中写入数据、向网络连接发送数据等。</p><hr><p><strong>总结：</strong> 在许多编程语言中，包括Java、C#、Python等，都提供了用于处理输入流和输出流的相关类库或模块。通过使用这些类库或模块，程序可以方便地与外部数据源进行交互，实现数据的读取和写入操作。输入流和输出流的概念在各种应用场景中都有着广泛的应用，如文件处理、网络通信、数据传输等。</p></blockquote><h4 id="继承中方法的重写"><a href="#继承中方法的重写" class="headerlink" title="继承中方法的重写"></a>继承中方法的重写</h4><blockquote><p>（1）派生类可以重写的基类方法</p><p>1.基类中使用virtual关键字进行限定的方法（简称“虚方法”）；</p><p>2.在派生类中使用new关键字对与基类同名的方法进行重写（简称“隐藏方法”）；</p><p>3.基类是抽象类，抽象类中使用abstract关键字进行限定的方法（简称“抽象方法”）。</p><hr><p>（2）virtual关键字详解</p><p>virtual关键字用于定义虚方法，基类中的virtual方法可以被直接或间接派生类选择性重写。</p><hr><p>（3）new关键字详解</p><p>new关键字用于隐藏方法，这里的隐藏是派生类对基类隐藏同名方法，直观的区别就在于声明为基类而实例化为派生类的对象将无法调用派生类的隐藏方法，但是声明与实例化均为派生类的对象则可以调用派生类的隐藏方法。</p><hr><p>（4）abstract关键字详解</p><p>abstract关键字用于声明抽象类和抽象方法，且抽象方法仅存在于抽象类中，直接派生类被要求必须完成基类中抽象方法的定义，除非直接派生类也为抽象类。</p><hr><p>（5）seald关键字详解</p><p>seald关键字用于声明密封类和密封方法，密封类无法被继承，密封方法无法被重写。</p></blockquote><h4 id="readonly关键字"><a href="#readonly关键字" class="headerlink" title="readonly关键字"></a>readonly关键字</h4><blockquote><p>readonly关键字通常用于字段和结构体。</p><p>（1）readonly修饰的字段只能在声明时或其所在类的构造函数中进行初始化，readonly修饰的结构体中所有字段都是隐式地被readonly限定；</p><p>（2）readonly修饰的字段可能是值类型也可能是引用类型，若为值类型，那么则为不可变对象，若为引用类型，则只能保证当前字段所指向的实例不变，但无法保证实例内部的状态不变，且官方不建议使用readonly修饰可变引用类型的字段，特别是对于向外公开的可变引用类型，因为这可能存在安全漏洞。</p></blockquote><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h4><blockquote><p>static关键字可用于修饰类、字段、属性、方法、运算符、事件和构造函数。</p><p>（1）static修饰类：静态类的字段、属性和其它成员必须都是静态的。</p><p>（2）static修饰字段：外部访问范围将不限于某个实例对象而是整个类，通常以”类名.字段名”的方式进行访问，在类的内部将作为所有实例对象的共享字段。</p><p>（3）static修饰属性：与static字段相似，不同的是属性可以控制get和set权限。</p><p>（4）static修饰方法：外部访问范围将不限于某个实例对象而是整个类，通常以”类名.方法名”的方式进行访问，在类的内部将作为所有实例对象的共享方法。</p><p>（5）static构造函数：对于接口、类和静态类都具有静态构造函数。</p></blockquote><h4 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h4><blockquote><p>索引器与属性类似，只不过属性通常针对字段，而索引器针对整个类或结构体。通过索引器可以自定义类似于数组下标访问、字典键值访问的规则，尤其是对于一些自定义的数据结构，创建索引器可以使得访问和修改更加便捷。属性的各种用法均适用于索引器，除了”自动实现属性”的用法，索引器可以指定多个参数。</p></blockquote><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><blockquote><p>运算符重载与函数重载类似，通过对某个类或结构体的可重载运算符进行重载，使得该类或结构体的实例在运算符表达式中按照重载的逻辑进行操作，运算符重载与函数重载一样具备编译时自动匹配的特性。值得注意的是运算符重载需要明确可重载运算符以及成对重载的运算符，运算符重载的参数至少有一个类型包含当前类。</p></blockquote><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136401504">https://blog.csdn.net/hgf1037882434/article/details/136401504</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> 开发语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Demo】2D关卡房间随机生成</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%912D%E5%85%B3%E5%8D%A1%E6%88%BF%E9%97%B4%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%912D%E5%85%B3%E5%8D%A1%E6%88%BF%E9%97%B4%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>初步探索2D关卡房间随机生成的实现，通过设立房间模板，根据设置的待生成房间数量随机生成不同布局的2D关卡房间。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>RandomRoomDemo</p><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://pan.baidu.com/s/1qGyd0vP67SDhzomA8ne49A?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136498282">https://blog.csdn.net/hgf1037882434/article/details/136498282</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Demos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Demo】游戏小地图</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E6%B8%B8%E6%88%8F%E5%B0%8F%E5%9C%B0%E5%9B%BE/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E6%B8%B8%E6%88%8F%E5%B0%8F%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>该Demo基于<a href="https://blog.csdn.net/hgf1037882434/article/details/136498282?spm=1001.2014.3001.5501" title="2D关卡随机生成">2D关卡随机生成</a>项目进行实现，旨在初步探索游戏小地图的制作。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>MiniMapDemo</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://pan.baidu.com/s/1fWdkUiVXfO8fuM14xXKlMQ?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136593197">https://blog.csdn.net/hgf1037882434/article/details/136593197</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Demos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Demo】对话系统</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E5%AF%B9%E8%AF%9D%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E5%AF%B9%E8%AF%9D%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>本文针对对话系统的实现进行了初步探索，实现了文字打印机和一键完成打印的功能。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>DialogueDemo</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://pan.baidu.com/s/1JWGtwWuz2uD6Iw-D-8Re6A?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136595326">https://blog.csdn.net/hgf1037882434/article/details/136595326</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Demos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Attribute】Inspector视图可视不可编辑字段特性</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Attribute%E3%80%91Inspector%E8%A7%86%E5%9B%BE%E5%8F%AF%E8%A7%86%E4%B8%8D%E5%8F%AF%E7%BC%96%E8%BE%91%E5%AD%97%E6%AE%B5%E7%89%B9%E6%80%A7/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Attribute%E3%80%91Inspector%E8%A7%86%E5%9B%BE%E5%8F%AF%E8%A7%86%E4%B8%8D%E5%8F%AF%E7%BC%96%E8%BE%91%E5%AD%97%E6%AE%B5%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在Unity开发中，有时候我们存在这种需求，需要在Inspector视图中可以查看字段信息但是无法对字段进行赋值，那么我们也可以像Unity内置的[SerializeField]、[Tooltip]等特性那样自定义一个特性，用于满足这个需求。</p><h4 id="代码示例-C"><a href="#代码示例-C" class="headerlink" title="代码示例(C#)"></a>代码示例(C#)</h4><p><strong>EditDisabledAttribute.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用可序列化字段在Inspector面板的编辑</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EditDisabledAttribute</span> : <span class="title">PropertyAttribute</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>EditDisabledDrawer.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EditDisabledAttribute的自定义绘制器</span></span><br><span class="line">[<span class="meta">CustomPropertyDrawer(typeof(EditDisabledAttribute))</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">EditDisabledDrawer</span> : <span class="title">PropertyDrawer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetPropertyHeight</span>(<span class="params">SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> EditorGUI.GetPropertyHeight(property, label, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params">Rect position, SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsArray() || IsList())</span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUI.BeginDisabledGroup(<span class="literal">true</span>);</span><br><span class="line">            EditorGUI.PropertyField(position, property, label, <span class="literal">true</span>);</span><br><span class="line">            EditorGUI.EndDisabledGroup();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            GUI.enabled = <span class="literal">false</span>;</span><br><span class="line">            EditorGUI.PropertyField(position, property, label, <span class="literal">true</span>);</span><br><span class="line">            GUI.enabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsArray</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldInfo.FieldType.IsArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为列表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsList</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> fieldInfo.FieldType.IsGenericType &amp;&amp; fieldInfo.FieldType.GetGenericTypeDefinition() == <span class="keyword">typeof</span>(List&lt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3f0dadbdd0ba4f5247551ca17742577d.png"></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136599272">https://blog.csdn.net/hgf1037882434/article/details/136599272</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Demo】场景加载</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E5%9C%BA%E6%99%AF%E5%8A%A0%E8%BD%BD/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Demo%E3%80%91%E5%9C%BA%E6%99%AF%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>场景加载是游戏开发中必不可少的环节，本文初步探索了场景加载以及加载过程中的资源处理。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>SceneLoadDemo</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://pan.baidu.com/s/10nTZ15qveBg34E4mArqx0g?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136646531">https://blog.csdn.net/hgf1037882434/article/details/136646531</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Demos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【Attribute】Inspector视图枚举字段范围限定特性</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90Attribute%E3%80%91Inspector%E8%A7%86%E5%9B%BE%E6%9E%9A%E4%B8%BE%E5%AD%97%E6%AE%B5%E8%8C%83%E5%9B%B4%E9%99%90%E5%AE%9A%E7%89%B9%E6%80%A7/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90Attribute%E3%80%91Inspector%E8%A7%86%E5%9B%BE%E6%9E%9A%E4%B8%BE%E5%AD%97%E6%AE%B5%E8%8C%83%E5%9B%B4%E9%99%90%E5%AE%9A%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>为了提升枚举的复用性，有时候我们可以通过限定枚举字段的范围来避免定义新的枚举类型，例如有一个代表方向的枚举（包括None，Left，Up，Right，Down），全局方向（Left，Up，Right，Down），水平方向（Left，Right），竖直方向（Up，Down）。</p><h4 id="代码示例-C"><a href="#代码示例-C" class="headerlink" title="代码示例(C#)"></a>代码示例(C#)</h4><p><strong>EnumRangeAttribute.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 枚举范围限定特性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumRangeAttribute</span> : <span class="title">PropertyAttribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举最小值</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mMin &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举最大值</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mMax &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举名称合集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>[] mEnumNames &#123; <span class="keyword">get</span> =&gt; enumNames?.ToArray(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举值合集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[] mEnumValues &#123; <span class="keyword">get</span> =&gt; enumValues?.ToArray(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举范围特性模式</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> EnumRangeMode mEnumRangeMode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] enumNames;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] enumValues;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;min&quot;&gt;</span>枚举最小值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;max&quot;&gt;</span>枚举最大值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumRangeAttribute</span>(<span class="params"><span class="built_in">int</span> min, <span class="built_in">int</span> max</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mMin = min;</span><br><span class="line">        mMax = max;</span><br><span class="line">        mEnumRangeMode = EnumRangeMode.MinAndMax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;enumNames&quot;&gt;</span>枚举名称合集 (大小写敏感)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumRangeAttribute</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] enumNames</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.enumNames = enumNames;</span><br><span class="line">        mEnumRangeMode = EnumRangeMode.EnumNames;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;enumValues&quot;&gt;</span>枚举值合集<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumRangeAttribute</span>(<span class="params"><span class="built_in">int</span>[] enumValues</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.enumValues = enumValues;</span><br><span class="line">        mEnumRangeMode = EnumRangeMode.EnumValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 枚举范围特性模式</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> EnumRangeMode</span><br><span class="line">    &#123;</span><br><span class="line">        MinAndMax, EnumNames, EnumValues</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>EnumRangeAttributeDrawer.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 枚举范围限定特性绘制器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">CustomPropertyDrawer(typeof(EnumRangeAttribute))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnumRangeAttributeDrawer</span> : <span class="title">PropertyDrawer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> EnumRangeAttribute enumRangeAttribute; <span class="comment">// 枚举范围特性</span></span><br><span class="line">    <span class="keyword">private</span> Type enumType; <span class="comment">// 枚举类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] rawEnumNames; <span class="comment">// 枚举名称原始合集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] displayNames; <span class="comment">// 下拉菜单显示名称合集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> selectedIndex; <span class="comment">// 当前所选中的选项索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> preIndex; <span class="comment">// 所选中的选项索引的副本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isLockGUI; <span class="comment">// 是否锁定GUI的绘制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isInit; <span class="comment">// 是否初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> warningText; <span class="comment">// 警告信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> preWarningText; <span class="comment">// 警告信息副本</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">float</span> <span class="title">GetPropertyHeight</span>(<span class="params">SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> EditorGUI.GetPropertyHeight(property, label, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params">Rect position, SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fieldInfo.FieldType.IsEnum)</span><br><span class="line">        &#123;</span><br><span class="line">            Init(property);</span><br><span class="line">            <span class="keyword">if</span> (!isLockGUI)</span><br><span class="line">            &#123;</span><br><span class="line">                selectedIndex = EditorGUI.Popup(position, label, selectedIndex, displayNames.Select(n =&gt; <span class="keyword">new</span> GUIContent(n)).ToArray());</span><br><span class="line">                <span class="keyword">if</span> (selectedIndex != preIndex)</span><br><span class="line">                &#123;</span><br><span class="line">                    preIndex = selectedIndex;</span><br><span class="line">                    property.enumValueIndex = IndexOf(displayNames[selectedIndex]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> warningText = <span class="string">$&quot;Warning:The type of the field &#x27;<span class="subst">&#123;fieldInfo.Name&#125;</span>&#x27; marked with &#x27;EnumRange&#x27; attribute is not &#x27;Enum&#x27;.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!warningText.Equals(preWarningText))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogWarning(warningText);</span><br><span class="line">            preWarningText = warningText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">SerializedProperty property</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInit)</span><br><span class="line">        &#123;</span><br><span class="line">            isLockGUI = <span class="literal">true</span>;</span><br><span class="line">            isInit = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            enumRangeAttribute = (EnumRangeAttribute)attribute;</span><br><span class="line">            <span class="keyword">if</span> (enumRangeAttribute == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                warningText = <span class="string">$&quot;Warning:The field &#x27;<span class="subst">&#123;fieldInfo.Name&#125;</span>&#x27; is not marked &#x27;EnumRange&#x27; attribute.&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            enumType = fieldInfo.FieldType;</span><br><span class="line"></span><br><span class="line">            rawEnumNames = property.enumNames;</span><br><span class="line">            <span class="keyword">if</span> (rawEnumNames == <span class="literal">null</span> || rawEnumNames.Length == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                warningText = <span class="string">$&quot;Warning:The enum&#x27;s names of the field &#x27;<span class="subst">&#123;property.name&#125;</span>&#x27; is null or empty.&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!InitDisplayNames()) displayNames = rawEnumNames;</span><br><span class="line"></span><br><span class="line">            selectedIndex = Array.FindIndex(displayNames, n =&gt; n.Equals(rawEnumNames[property.enumValueIndex]));</span><br><span class="line">            <span class="keyword">if</span> (selectedIndex == <span class="number">-1</span>) selectedIndex = <span class="number">0</span>;</span><br><span class="line">            preIndex = selectedIndex;</span><br><span class="line"></span><br><span class="line">            warningText = <span class="built_in">string</span>.Empty;</span><br><span class="line">            preWarningText = <span class="built_in">string</span>.Empty;</span><br><span class="line">            isLockGUI = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化枚举下拉菜单显示名称合集</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">InitDisplayNames</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (enumRangeAttribute.mEnumRangeMode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> EnumRangeAttribute.EnumRangeMode.MinAndMax:</span><br><span class="line">                <span class="keyword">return</span> MinAndMaxInit();</span><br><span class="line">            <span class="keyword">case</span> EnumRangeAttribute.EnumRangeMode.EnumNames:</span><br><span class="line">                <span class="keyword">return</span> EnumNamesInit();</span><br><span class="line">            <span class="keyword">case</span> EnumRangeAttribute.EnumRangeMode.EnumValues:</span><br><span class="line">                <span class="keyword">return</span> EnumValuesInit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MinAndMax模式初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">MinAndMaxInit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (enumRangeAttribute.mMin &gt; enumRangeAttribute.mMax) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> v_values = Enum.GetValues(enumType).Cast&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (v_values.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        v_values = v_values.Where(val =&gt; val &gt;= enumRangeAttribute.mMin &amp;&amp; val &lt;= enumRangeAttribute.mMax);</span><br><span class="line">        <span class="keyword">if</span> (v_values.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> v_names = v_values.Select(val =&gt; Enum.GetName(enumType, val));</span><br><span class="line">        <span class="keyword">if</span> (v_names.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        displayNames = v_names.ToArray();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EnumNames模式初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">EnumNamesInit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (enumRangeAttribute.mEnumNames == <span class="literal">null</span> || enumRangeAttribute.mEnumNames.Length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> v_names = enumRangeAttribute.mEnumNames.Where(n =&gt; Array.FindIndex(rawEnumNames, en =&gt; en.Equals(n)) != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (v_names.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        displayNames = v_names.ToArray();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// EnumValues模式初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">EnumValuesInit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (enumRangeAttribute.mEnumValues == <span class="literal">null</span> || enumRangeAttribute.mEnumValues.Length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> v_values = Enum.GetValues(enumType).Cast&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span> (v_values.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        v_values = v_values.Where(val =&gt; enumRangeAttribute.mEnumValues.Contains(val));</span><br><span class="line">        <span class="keyword">if</span> (v_values.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> v_names = v_values.Select(val =&gt; Enum.GetName(enumType, val));</span><br><span class="line">        <span class="keyword">if</span> (v_names.Count() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        displayNames = v_names.ToArray();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回指定名称的枚举在原始枚举合集中的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">IndexOf</span>(<span class="params"><span class="built_in">string</span> enumName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = Array.FindIndex(rawEnumNames, n =&gt; n.Equals(enumName));</span><br><span class="line">        <span class="keyword">return</span> index == <span class="number">-1</span> ? <span class="number">0</span> : index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/62fb5b20bbaffc8252b4cc97a9f746d1.png"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/86bad4346f0431917607a4de9bdb4729.png"></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/24f53dd9123346ff6d8aee9c4f329cff.png"></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136663245">https://blog.csdn.net/hgf1037882434/article/details/136663245</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>【组件初始化链条】简化Unity组件的初始化</title>
      
      <link href="/2025/05/04/2025-05-04-%E3%80%90%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E9%93%BE%E6%9D%A1%E3%80%91%E7%AE%80%E5%8C%96Unity%E7%BB%84%E4%BB%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2025/05/04/2025-05-04-%E3%80%90%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E9%93%BE%E6%9D%A1%E3%80%91%E7%AE%80%E5%8C%96Unity%E7%BB%84%E4%BB%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在游戏脚本中我们通过借助GetComponent或TryGetComponent方法获取组件，所以当需要获取较多组件时，我们不可避免地要书写一些重复代码，为了提升代码简洁程度，简化组件初始化逻辑，本文以”<strong>组件初始化链条</strong> “为核心探索组件的初始化。</p><p>我们对于组件初始化面临以下几个问题：</p><p>1.当需要从同一个游戏对象上获取不同组件时，如何简化？</p><p>2.当获取组件时还需要对组件进行初始化或者获取组件的字段或属性，如何简化？</p><p>3.当需要从多个游戏对象上获取相同类型组件时，如何简化？</p><p>事实上，组件获取的逻辑大同小异，主要依赖于GetComponent或TryGetComponent方法，所以我们只需要关注从哪个<strong>GameObject</strong> 上获取哪个<strong>Component</strong> 即可，如果涉及到对组件进行一些自定义的处理，我们则可以借助委托类型的参数。除此之外，对于当前脚本而言，所需要的组件往往是必要的，缺一不可，所以我们仅关注所有组件是否被正确初始化，通过”<strong>组件初始化链条</strong> “则可以获取一个总的初始化结果值，如果需要自定义初始化结果值的收集可以自行改进本文代码。</p><p>相较于手动初始化，我们需要重复书写GetComponent或TryGetComponent方法的调用，并且需要手动对每个组件的初始化结果值进行收集，这并不利于开发者专注于游戏逻辑的开发。</p><p>采用统一的组件初始化方式，有利于团队协作，提升整体开发效率，方便组件初始化相关Bug的检测和处理。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><strong>ComponentInitChain.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 组件初始化链条</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComponentInitChain</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject gameObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gameObject&quot;&gt;</span>组件所挂载的游戏对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComponentInitChain</span>(<span class="params">GameObject gameObject</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.gameObject = gameObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>组件类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>当前组件初始化链条实例<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentInitChain <span class="title">InitComponent</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">out</span> T component</span>) <span class="keyword">where</span> T : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameObject == <span class="literal">null</span> || !gameObject.TryGetComponent(<span class="keyword">out</span> component)) component = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>组件类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;componentDeal&quot;&gt;</span>组件获取后的初始化处理<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>当前组件初始化链条实例<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentInitChain <span class="title">InitComponent</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">out</span> T component, Action&lt;T&gt; componentDeal</span>) <span class="keyword">where</span> T : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gameObject == <span class="literal">null</span> || !gameObject.TryGetComponent(<span class="keyword">out</span> component)) component = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (component != <span class="literal">null</span>) componentDeal(component);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>组件类型0<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>组件类型1<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>T0类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component1&quot;&gt;</span>T1类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>初始化结果值，组件均正确初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">InitComponent</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>&gt;(<span class="params"><span class="keyword">out</span> T0 component, <span class="keyword">out</span> T1 component1</span>) <span class="keyword">where</span> T0 : Component <span class="keyword">where</span> T1 : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitComponent(<span class="keyword">out</span> component).InitComponent(<span class="keyword">out</span> component1);</span><br><span class="line">        <span class="keyword">if</span> (component == <span class="literal">null</span> || component1 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>组件类型0<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>组件类型1<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T2&quot;&gt;</span>组件类型2<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>T0类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component1&quot;&gt;</span>T1类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component2&quot;&gt;</span>T2类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>初始化结果值，组件均正确初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">InitComponent</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>, <span class="title">T2</span>&gt;(<span class="params"><span class="keyword">out</span> T0 component, <span class="keyword">out</span> T1 component1, <span class="keyword">out</span> T2 component2</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> T0 : Component <span class="keyword">where</span> T1 : Component <span class="keyword">where</span> T2 : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitComponent(<span class="keyword">out</span> component).InitComponent(<span class="keyword">out</span> component1).InitComponent(<span class="keyword">out</span> component2);</span><br><span class="line">        <span class="keyword">if</span> (component == <span class="literal">null</span> || component1 == <span class="literal">null</span> || component2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>组件类型0<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>组件类型1<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T2&quot;&gt;</span>组件类型2<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T3&quot;&gt;</span>组件类型3<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>T0类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component1&quot;&gt;</span>T1类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component2&quot;&gt;</span>T2类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component3&quot;&gt;</span>T3类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>初始化结果值，组件均正确初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">InitComponent</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>, <span class="title">T2</span>, <span class="title">T3</span>&gt;(<span class="params"><span class="keyword">out</span> T0 component, <span class="keyword">out</span> T1 component1, <span class="keyword">out</span> T2 component2, <span class="keyword">out</span> T3 component3</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> T0 : Component <span class="keyword">where</span> T1 : Component <span class="keyword">where</span> T2 : Component <span class="keyword">where</span> T3 : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitComponent(<span class="keyword">out</span> component).InitComponent(<span class="keyword">out</span> component1).InitComponent(<span class="keyword">out</span> component2).InitComponent(<span class="keyword">out</span> component3);</span><br><span class="line">        <span class="keyword">if</span> (component == <span class="literal">null</span> || component1 == <span class="literal">null</span> || component2 == <span class="literal">null</span> || component3 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ComponentsInitChain.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 组成集初始化链条</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComponentsInitChain</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>组件类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;components&quot;&gt;</span>组件集的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gameObjects&quot;&gt;</span>组件所挂载的游戏对象集<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>组件集初始化结果值，若所有组件成功初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">InitComponents</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">in</span> T[] components, <span class="keyword">params</span> GameObject[] gameObjects</span>) <span class="keyword">where</span> T : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (components == <span class="literal">null</span> || components.Length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (gameObjects == <span class="literal">null</span> || gameObjects.Length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (components.Length == gameObjects.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; gameObjects.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                components[i] = gameObjects[i].GetComponent&lt;T&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> components.All(c =&gt; c != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>组件类型0<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>组件类型1<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>T0类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component1&quot;&gt;</span>T1类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gameObjects&quot;&gt;</span>T0、T1类型组件所挂载的游戏对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>组件初始化结果值，若所有组件成功初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">InitComponents</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>&gt;(<span class="params"><span class="keyword">out</span> T0 component, <span class="keyword">out</span> T1 component1, <span class="keyword">params</span> GameObject[] gameObjects</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> T0 : Component <span class="keyword">where</span> T1 : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        component = <span class="literal">null</span>;</span><br><span class="line">        component1 = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (gameObjects?.Length == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            component = gameObjects[<span class="number">0</span>].GetComponent&lt;T0&gt;();</span><br><span class="line">            component1 = gameObjects[<span class="number">1</span>].GetComponent&lt;T1&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> component != <span class="literal">null</span> &amp;&amp; component1 != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>组件类型0<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>组件类型1<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T2&quot;&gt;</span>组件类型2<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>T0类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component1&quot;&gt;</span>T1类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component2&quot;&gt;</span>T2类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gameObjects&quot;&gt;</span>T0、T1、T2类型组件所挂载的游戏对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>组件初始化结果值，若所有组件成功初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">InitComponents</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>, <span class="title">T2</span>&gt;(<span class="params"><span class="keyword">out</span> T0 component, <span class="keyword">out</span> T1 component1, <span class="keyword">out</span> T2 component2, <span class="keyword">params</span> GameObject[] gameObjects</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> T0 : Component <span class="keyword">where</span> T1 : Component <span class="keyword">where</span> T2 : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        component = <span class="literal">null</span>;</span><br><span class="line">        component1 = <span class="literal">null</span>;</span><br><span class="line">        component2 = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (gameObjects?.Length == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            component = gameObjects[<span class="number">0</span>].GetComponent&lt;T0&gt;();</span><br><span class="line">            component1 = gameObjects[<span class="number">1</span>].GetComponent&lt;T1&gt;();</span><br><span class="line">            component2 = gameObjects[<span class="number">2</span>].GetComponent&lt;T2&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> component != <span class="literal">null</span> &amp;&amp; component1 != <span class="literal">null</span> &amp;&amp; component2 != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化组件集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>组件类型0<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>组件类型1<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T2&quot;&gt;</span>组件类型2<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T3&quot;&gt;</span>组件类型3<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component&quot;&gt;</span>T0类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component1&quot;&gt;</span>T1类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component2&quot;&gt;</span>T2类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;component3&quot;&gt;</span>T3类型组件的引用变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gameObjects&quot;&gt;</span>T0、T1、T2、T3类型组件所挂载的游戏对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>组件初始化结果值，若所有组件成功初始化则返回true，否则返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">InitComponents</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>, <span class="title">T2</span>, <span class="title">T3</span>&gt;(<span class="params"><span class="keyword">out</span> T0 component, <span class="keyword">out</span> T1 component1, <span class="keyword">out</span> T2 component2, <span class="keyword">out</span> T3 component3, <span class="keyword">params</span> GameObject[] gameObjects</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> T0 : Component <span class="keyword">where</span> T1 : Component <span class="keyword">where</span> T2 : Component <span class="keyword">where</span> T3 : Component</span></span><br><span class="line">    &#123;</span><br><span class="line">        component = <span class="literal">null</span>;</span><br><span class="line">        component1 = <span class="literal">null</span>;</span><br><span class="line">        component2 = <span class="literal">null</span>;</span><br><span class="line">        component3 = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (gameObjects?.Length == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            component = gameObjects[<span class="number">0</span>].GetComponent&lt;T0&gt;();</span><br><span class="line">            component1 = gameObjects[<span class="number">1</span>].GetComponent&lt;T1&gt;();</span><br><span class="line">            component2 = gameObjects[<span class="number">2</span>].GetComponent&lt;T2&gt;();</span><br><span class="line">            component3 = gameObjects[<span class="number">3</span>].GetComponent&lt;T3&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> component != <span class="literal">null</span> &amp;&amp; component1 != <span class="literal">null</span> &amp;&amp; component2 != <span class="literal">null</span> &amp;&amp; component3 != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试代码</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject[] GameObjects;</span><br><span class="line">    <span class="keyword">private</span> AudioListener audioListener;</span><br><span class="line">    <span class="keyword">private</span> SpriteRenderer spriteRenderer;</span><br><span class="line">    <span class="keyword">private</span> CircleCollider2D circleCollider2D;</span><br><span class="line">    <span class="keyword">private</span> Room[] rooms;</span><br><span class="line">    <span class="keyword">private</span> Room a;</span><br><span class="line">    <span class="keyword">private</span> Room b;</span><br><span class="line">    <span class="keyword">private</span> Room c;</span><br><span class="line">    <span class="keyword">private</span> Room d;</span><br><span class="line">    <span class="keyword">private</span> Sprite sprite;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 组件链式初始化，适用于该情景&quot;需要获取同一个游戏对象上较多的组件且针对不同组件存在不同的初始化逻辑&quot;</span></span><br><span class="line">        <span class="comment">// new ComponentInitChain(gameObject).InitComponent(out audioListener)</span></span><br><span class="line">        <span class="comment">// .InitComponent(out spriteRenderer, c =&gt; sprite = c.sprite)</span></span><br><span class="line">        <span class="comment">// .InitComponent(out circleCollider2D, c =&gt; c.isTrigger = true);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组件单步初始化，适用于该情景&quot;需要获取同一个游戏对象上较少的组件，不需要对各组件的初始化进行代理&quot;</span></span><br><span class="line">        <span class="comment">// bool res = new ComponentInitChain(gameObject).InitComponent(out audioListener, out spriteRenderer, out circleCollider2D);</span></span><br><span class="line">        <span class="comment">// Debug.Log(res);</span></span><br><span class="line">        <span class="comment">// Debug.Log(audioListener);</span></span><br><span class="line">        <span class="comment">// Debug.Log(spriteRenderer);</span></span><br><span class="line">        <span class="comment">// Debug.Log(circleCollider2D);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取不同游戏对象上的某种组件类型的组件合集</span></span><br><span class="line">        <span class="comment">// rooms = new Room[GameObjects.Length];</span></span><br><span class="line">        <span class="comment">// bool res = ComponentsInitChain.InitComponents(rooms, GameObjects);</span></span><br><span class="line">        <span class="comment">// Debug.Log(res);</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; rooms?.Length; i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     Debug.Log(rooms[i]);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取不同游戏对象上的相同类型组件</span></span><br><span class="line">        <span class="comment">// bool res = ComponentsInitChain.InitComponents(out a, out b, out c, out d, GameObjects);</span></span><br><span class="line">        <span class="comment">// Debug.Log(res);</span></span><br><span class="line">        <span class="comment">// Debug.Log(a);</span></span><br><span class="line">        <span class="comment">// Debug.Log(b);</span></span><br><span class="line">        <span class="comment">// Debug.Log(c);</span></span><br><span class="line">        <span class="comment">// Debug.Log(d);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h4><p>ComponentInitChain适用于对单个游戏对象的组件进行初始化的情景，所以在实例化时需要传递对应的游戏对象，后续的组件初始化操作都针对该游戏对象。</p><p>ComponentsInitChain适用于对多个游戏对象的组件进行初始化的情景，相关方法都属于静态方法，所以调用方法时需要传递游戏对象。</p><p>测试代码中则针对四种常见的应用情况进行举例。</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136677484">https://blog.csdn.net/hgf1037882434/article/details/136677484</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>对LitJson开源插件的自定义尝试</title>
      
      <link href="/2025/05/04/2025-05-04-%E5%AF%B9LitJson%E5%BC%80%E6%BA%90%E6%8F%92%E4%BB%B6%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B0%9D%E8%AF%95/"/>
      <url>/2025/05/04/2025-05-04-%E5%AF%B9LitJson%E5%BC%80%E6%BA%90%E6%8F%92%E4%BB%B6%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p><a href="https://litjson.net/" title="LitJson">LitJson</a>是一款知名的Json字符串数据转换的插件，基于.Net开发，使用C#作为开发语言。本文旨在基于所学的编程知识以及对LitJson源码的理解来尝试对LitJson插件进行自定义。</p></blockquote><h4 id="自定义思路"><a href="#自定义思路" class="headerlink" title="自定义思路"></a>自定义思路</h4><h5 id="（一）问题"><a href="#（一）问题" class="headerlink" title="（一）问题"></a>（一）问题</h5><p>结合我在使用LitJson过程中遇到的问题，主要针对四个常见问题进行自定义：</p><blockquote><p><strong>问题1：</strong> 当我们通过RegisterExporter方法自定义指定类型的序列化规则时，对于类型控制更加严格，而当我对Type类型自定义序列化规则时出现了序列化深度溢出的问题，我根据LitJson的源码进行了调试。首先我们通过RegisterExporter方法需要指定泛型，这个指定的序列化类型以编译时类型存储于字典中，因为typeof(T)获取的是编译时类型,而在WriteValue方法中对于非基本类型需要通过obj.GetType()获取一个obj对象的Type实例,而在代码运行过程中此方法将返回一个运行时类型，这个运行时类型被认为与我们存入字典中的对应类型不同。这在外部看来我只是希望自定义Type类型的序列化规则能够成功执行，而在对Type类型变量进行序列化时却未能执行我自定义的序列化规则，导致这个原因的问题就是对于Type而言，字典中存储的是System.Type，而obj.GetType()获取的Type实例是System.RuntimeType，所以二者不相同，未通过字典的ContainsKey检测，于是无法调用针对Type类型的自定义序列化规则，从而导致序列化深度溢出。</p></blockquote><blockquote><p><strong>问题2：</strong> 某些字段或属性我们不希望被序列化。</p></blockquote><blockquote><p><strong>问题3：</strong> 某些私有字段或属性我们希望能够被序列化。</p></blockquote><blockquote><p><strong>问题4：</strong> 同一类型的字段或属性在不同的结构中的序列化规则可能有所不同，所以全局的序列化规则将不适用，我们需要扩展出局部的序列化规则，以便于用户能够在不同结构中对同一类型的字段或属性的序列化规则进行自定义，这将进一步提高该插件的灵活性，反序列化亦是如此。优先级应为局部规则&gt;全局规则。</p></blockquote><h5 id="（二）解决方案"><a href="#（二）解决方案" class="headerlink" title="（二）解决方案"></a>（二）解决方案</h5><p>针对上述四个问题的解决方案如下：</p><blockquote><p><strong>方案1：</strong> 原本字典的ContainsKey检测更加严格，是通过Type.Equals()进行检测的，所以不会包括派生关系的检测,实际上obj is xxx通过is关键字判断也是会有派生关系的检测的，既然对于基本类型的检测是放宽了检测的严格程度，那么对于非基本类型也可以放宽一下检测的严格程度，于是我们引入了可过渡检测的策略，这个策略的实现是通过Type.IsAssignableFrom()来实现的，我们通过obj.GetType()获取的类型如果能够转换为字典中存放的类型，那么就被认为通过字典的ContainsKey检测。我们应该让用户来控制是否开启可过渡检测，因为并非所有类型都像Type类型一样特殊，而默认不开启可过渡检测，可过渡检测仅用于针对某些特殊类型的检测处理，默认情况下我们对序列化类型的控制依旧严格。当用户自定义的某个类型的序列化规则无法正常执行时，可以考虑使用该方法作为替补方案。</p><hr><p>当我们通过RegisterExporter所注册的类型(编译时类型)与运行时通过GetType()获取的类型(运行时类型)不同，导致未通过字典的ContainsKey检测而无法执行自定义的序列化规则，此方法可开启派生关系的可过渡检测，如果当前运行时类型可以转换为所注册的编译时类型(允许具有派生关系的类型的转换)，那么我们就认为通过字典的ContainsKey检测并执行对应编译时类型的自定义序列化规则。当一个对象的编译时类型和运行时类型不同时可以考虑使用这个方法作为辅助方法，例如Type类型、接口类型、抽象类类型的字段或属性。</p></blockquote><blockquote><p><strong>方案2：</strong> 定义一个JsonIgnore的Attribute，用于标记不进行序列化的字段或属性，在JsonMapper的WriteValue和ReadValue方法中添加检测代码。</p></blockquote><blockquote><p><strong>方案3：</strong> 定义一个JsonInclude的Attribute，用于标记进行序列化的私有字段或属性，在JsonMapper的WriteValue和ReadValue方法中添加检测代码。</p></blockquote><blockquote><p><strong>方案4：</strong> 设字段或属性类型为A，定义字段或属性所在结构的类型为B，序列化或反序列化规则为C，Json数据类型D。</p><p>序列化：原有的对应关系是A&#x3D;&gt;C（字段或属性类型对应序列化规则），即&lt;Type,ExportFunc&gt;，现在我们需要建立的新的对应关系是(A+B)&#x3D;&gt;C（字段或属性类型+定义字段或属性所在结构的类型共同对应序列化规则），即</p><p>&lt;Type, &lt;Type,ExportFunc&gt;&gt;。</p><p>反序列化：原有的对应关系是(A+D)&#x3D;&gt;C（字段或属性类型+Json数据类型对应反序列化规则），即&lt;Type,&lt;Type,ImportFunc&gt;&gt;，现在我们需要建立的新的对应关系是(A+B+D)&#x3D;&gt;C（字段或属性类型+定义字段或属性所在结构的类型+Json数据类型对应反序列化规则），即&lt;&lt;Type,Type&gt;,&lt;Type,ImportFunc&gt;&gt;。</p><p>建议：对于这种嵌套过多的关系，建议定义一个单独的类或结构体来存储它们的关系。</p></blockquote><p>方案1-4分别对应问题1-4，其中方案1涉及自定义特性**[ JsonAssignable]<strong>，方案2涉及自定义特性</strong>[ JsonIgnore]<strong>，方案3涉及自定义特性</strong>[ JsonInclude]<strong>，方案4涉及自定义特性</strong>[ ExporterTarget]**。</p><h5 id="（三）特性"><a href="#（三）特性" class="headerlink" title="（三）特性"></a>（三）特性</h5><blockquote><p><strong>全称：JsonAssignableAttribute</strong></p><p><strong>缩写：[JsonAssignable]</strong></p><p><strong>使用范围：field</strong><strong>、property</strong></p><p><strong>限制：不允许继承、不允许重复标记</strong></p><p><strong>说明：该Attribute用于标记需要进行可过渡性检测的字段或属性。</strong></p></blockquote><blockquote><p>**全称：**<strong>JsonIgnoreAttribute</strong></p><p><strong>简写：****[JsonIgnore]</strong></p><p>**使用范围：<strong><strong>field</strong></strong>、**<strong>property</strong></p><p><strong>限制：不允许继承、不允许重复标记</strong></p><p><strong>说明：定义用于标记不进行序列化的字段或属性的Attribute</strong></p></blockquote><blockquote><p>**全称：**<strong>JsonIncludeAttribute</strong></p><p><strong>简写：****[JsonInclude]</strong></p><p>**使用范围：<strong><strong>field</strong></strong>、**<strong>property</strong></p><p><strong>限制：不允许继承、不允许重复标记</strong></p><p><strong>说明：定义用于标记待序列化的私有字段或属性的Attribute</strong></p></blockquote><blockquote><p><strong>全称：ExporterTargetAttribute(Type classType)</strong></p><p><strong>缩写：[ExporterTarget]</strong></p><p><strong>使用范围：class</strong><strong>、<strong><strong>struct</strong></strong>、interface</strong></p><p><strong>限制：不允许继承、不允许重复标记</strong></p><p>*<em>说明：当使用RegisterExporter &lt;T,TClass&gt;(ExporterFunc<T> exporter)<strong><strong>方法时，必须使用该</strong></strong>Attribute标记对应序列化字段或属性所在的类。</em>*</p></blockquote><h5 id="（四）其它自定义"><a href="#（四）其它自定义" class="headerlink" title="（四）其它自定义"></a>（四）其它自定义</h5><blockquote><p>1. LitJson基于.NET开发，使用的是C#语言，所以可以应用于Unity3D游戏开发中，在本次自定义中我对Unity中常用的数据结构的序列化和反序列化进行了扩展，包括<strong>Vector2, Vector3,</strong></p><p><strong>Vector4, Rect, Quaternion, Color, Bounds</strong> ，以及C#的Type类型。</p><hr><p>2. 修改方法</p><pre><code>//原方法：public static void RegisterExporter&lt;T&gt;(ExporterFunc&lt;T&gt; exporter)//修改后的方法：public static void RegisterExporter&lt;T&gt;(ExporterFunc&lt;T&gt; exporter, bool assignable = false)</code></pre><p>3. 添加方法</p><pre><code>public static void RegisterExporter&lt;T, TClass&gt;(ExporterFunc&lt;T&gt; exporter, bool assignable = false)</code></pre><p>4. 添加方法</p><pre><code>public static void RegisterImporter&lt;TJson, TValue, TClass&gt;(ImporterFunc&lt;TJson, TValue&gt; importer)</code></pre><p>5. 添加方法</p><pre><code>public static void RegisterImporterWithReader&lt;TValue&gt;(ImporterFunc&lt;CustomReader, TValue&gt; importer)</code></pre><p>6. 添加方法</p><pre><code>public static void RegisterImporterWithReader&lt;TValue, TClass&gt;(ImporterFunc&lt;CustomReader, TValue&gt; importer)</code></pre><p>7. 添加类CustomReader和ReaderData</p></blockquote><h4 id="测试代码（C-）"><a href="#测试代码（C-）" class="headerlink" title="测试代码（C#）"></a>测试代码（C#）</h4><p><strong>公共测试脚本test.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> mName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="built_in">int</span> mAge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">PersonD</span> : <span class="title">IPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> mName &#123; <span class="keyword">get</span> =&gt; name; <span class="keyword">set</span> =&gt; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mAge &#123; <span class="keyword">get</span> =&gt; age; <span class="keyword">set</span> =&gt; age = <span class="keyword">value</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> mSex &#123; <span class="keyword">get</span> =&gt; sex; <span class="keyword">set</span> =&gt; sex = <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mAge:<span class="subst">&#123;mAge&#125;</span>, mSex:<span class="subst">&#123;mSex&#125;</span>]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">House</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> mName;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> mSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（1）测试JsonAssignable特性：公共接口类型字段</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LitJson.Extensions;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JATest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ja_test1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/JsonAssignable Test/Run the Test1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【测试JsonAssignable特性：公共接口类型字段】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            PersonD person = <span class="keyword">new</span> PersonD</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span>,</span><br><span class="line">                mSex = <span class="string">&quot;Male&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            JAHouseA houseA = <span class="keyword">new</span> JAHouseA()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseA);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            JAHouseA houseA1 = JsonMapper.ToObject&lt;JAHouseA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseA1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">JAHouseA</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">JsonAssignable</span>] <span class="keyword">public</span> IPerson person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（2）测试JsonAssignable特性：公共抽象类类型字段</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LitJson.Extensions;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JATest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ja_test2</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/JsonAssignable Test/Run the Test2&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【测试JsonAssignable特性：公共抽象类类型字段】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            JAHouseB houseB = <span class="keyword">new</span> JAHouseB()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span></span><br><span class="line">            &#125;;</span><br><span class="line">            JAPersonA person = <span class="keyword">new</span> JAPersonA</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span>,</span><br><span class="line">                house = houseB</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(person);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            JAPersonA personA = JsonMapper.ToObject&lt;JAPersonA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(personA);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">JAHouseB</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">JAPersonA</span> : <span class="title">IPerson</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> mAge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">JsonAssignable</span>] <span class="keyword">public</span> House house;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mAge:<span class="subst">&#123;mAge&#125;</span>, house:<span class="subst">&#123;house&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（3）测试JsonIgnore特性：忽略公共字段</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"><span class="keyword">using</span> LitJson.Extensions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JIATest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">jig_test1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/JsonIgnore Test/Run the Test1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【测试JsonIgnore特性：忽略公共字段】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            JIAPerson person = <span class="keyword">new</span> JIAPerson</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span></span><br><span class="line">            &#125;;</span><br><span class="line">            JIAHouseA houseA = <span class="keyword">new</span> JIAHouseA()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseA);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            JIAHouseA houseA1 = JsonMapper.ToObject&lt;JIAHouseA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseA1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">JIAPerson</span> : <span class="title">IPerson</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> mAge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">JIAHouseA</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">JsonIgnore</span>] <span class="keyword">public</span> JIAPerson person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JIAHouseA</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JIAHouseA</span>(<span class="params">JIAPerson person</span>)</span> &#123; <span class="keyword">this</span>.person = person; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（4）测试JsonInclude特性：私有自定义类型字段</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LitJson.Extensions;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JITest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ji_test1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/JsonInclude Test/Run the Test1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【测试JsonInclude特性：私有自定义类型字段】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            PersonD person = <span class="keyword">new</span> PersonD</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span>,</span><br><span class="line">                mSex = <span class="string">&quot;Male&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            JIHouseA houseA = <span class="keyword">new</span> JIHouseA(person)</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseA);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            JIHouseA houseA1 = JsonMapper.ToObject&lt;JIHouseA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseA1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">JIHouseA</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">JsonInclude</span>] <span class="keyword">private</span> PersonD person;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必要条件：当有多个构造函数时应主动声明公共无参构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JIHouseA</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JIHouseA</span>(<span class="params">PersonD person</span>)</span> &#123; <span class="keyword">this</span>.person = person; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（5）测试JsonInclude特性：私有自定义类型数组、列表和字典字段序列化和反序列化测试</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LitJson.Extensions;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JITest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ji_test2</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/JsonInclude Test/Run the Test2&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【测试JsonInclude特性：私有自定义类型数组、列表和字典字段序列化和反序列化测试】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            PersonD personD = <span class="keyword">new</span> PersonD()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">20</span>,</span><br><span class="line">                mSex = <span class="string">&quot;Male&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            PersonD personD2 = <span class="keyword">new</span> PersonD()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Lucy&quot;</span>,</span><br><span class="line">                mAge = <span class="number">26</span>,</span><br><span class="line">                mSex = <span class="string">&quot;Female&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            PersonD personD3 = <span class="keyword">new</span> PersonD()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">                mAge = <span class="number">8</span>,</span><br><span class="line">                mSex = <span class="string">&quot;Male&quot;</span></span><br><span class="line">            &#125;;</span><br><span class="line">            HouseF houseF = <span class="keyword">new</span> HouseF()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseF&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span></span><br><span class="line">            &#125;;</span><br><span class="line">            houseF[<span class="number">0</span>] = personD;</span><br><span class="line">            houseF[<span class="number">1</span>] = personD2;</span><br><span class="line">            houseF[<span class="number">2</span>] = personD3;</span><br><span class="line">            houseF.AddToList(personD);</span><br><span class="line">            houseF.AddToList(personD2);</span><br><span class="line">            houseF.AddToList(personD3);</span><br><span class="line">            houseF.AddToDict(personD.mName, personD);</span><br><span class="line">            houseF.AddToDict(personD2.mName, personD2);</span><br><span class="line">            houseF.AddToDict(personD3.mName, personD3);</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseF);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            HouseF houseF1 = JsonMapper.ToObject&lt;HouseF&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseF1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">HouseF</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">JsonInclude</span>] <span class="keyword">private</span> PersonD[] persons; <span class="comment">// 用于测试私有自定义类型数组</span></span><br><span class="line">        [<span class="meta">JsonInclude</span>] <span class="keyword">private</span> List&lt;PersonD&gt; personList; <span class="comment">// 用于测试私有自定义类型列表</span></span><br><span class="line">        [<span class="meta">JsonInclude</span>] <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, PersonD&gt; personDict; <span class="comment">// 用于测试私有自定义类型字典</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HouseF</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            persons = <span class="keyword">new</span> PersonD[<span class="number">3</span>];</span><br><span class="line">            personList = <span class="keyword">new</span> List&lt;PersonD&gt;();</span><br><span class="line">            personDict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, PersonD&gt;();</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddToList</span>(<span class="params">PersonD person</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            personList.Add(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddToDict</span>(<span class="params"><span class="built_in">string</span> name, PersonD person</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            personDict[name] = person;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PersonD <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.index) <span class="keyword">return</span> persons[index];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="number">3</span>) persons[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, &quot;</span>);</span><br><span class="line">            stringBuilder.Append(<span class="string">&quot;Array:&#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; persons.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                stringBuilder.Append(persons[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.Append(<span class="string">&quot;&#125;, List:&#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; personList.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                stringBuilder.Append(personList[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.Append(<span class="string">&quot;&#125;, Dict:&#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> key <span class="keyword">in</span> personDict.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                stringBuilder.Append(personDict[key] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.Append(<span class="string">&quot;&#125;]&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（6）测试ExporterTarget特性：相同的自定义类型公共字段在不同的类中序列化规则不同</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"><span class="keyword">using</span> LitJson.Extensions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ETTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">et_test1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/ExporterTarget Test/Run the Test1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【测试ExporterTarget特性：相同的自定义类型公共字段在不同的类中序列化规则不同】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            ETPersonA person = <span class="keyword">new</span> ETPersonA</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span></span><br><span class="line">            &#125;;</span><br><span class="line">            ETHouseA houseA = <span class="keyword">new</span> ETHouseA()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            ETHouseB houseB = <span class="keyword">new</span> ETHouseB()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseB&quot;</span>,</span><br><span class="line">                mSize = <span class="number">50</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseA);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            ETHouseA houseA1 = JsonMapper.ToObject&lt;ETHouseA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseA1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            jsonStr = JsonMapper.ToJson(houseB);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            ETHouseB houseB1 = JsonMapper.ToObject&lt;ETHouseB&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseB1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ETPersonA</span> : <span class="title">IPerson</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> mAge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mAge:<span class="subst">&#123;mAge&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ExporterTarget(typeof(ETHouseA))</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ETHouseA</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ETPersonA person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">ETHouseA</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            JsonMapper.RegisterExporter&lt;ETPersonA, ETHouseA&gt;((d, writer) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteObjectStart();</span><br><span class="line">                writer.WriteProperty(<span class="string">&quot;ETPersonA&quot;</span>, <span class="string">&quot;ETHouseA_ETPersonA&quot;</span>);</span><br><span class="line">                writer.WriteObjectEnd();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ExporterTarget(typeof(ETHouseB))</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ETHouseB</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ETPersonA person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">ETHouseB</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            JsonMapper.RegisterExporter&lt;ETPersonA, ETHouseB&gt;((d, writer) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteObjectStart();</span><br><span class="line">                writer.WriteProperty(<span class="string">&quot;ETPersonA&quot;</span>, <span class="string">&quot;ETHouseB_ETPersonA&quot;</span>);</span><br><span class="line">                writer.WriteObjectEnd();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（7）Json4Unity：Type类型变量的序列化和反序列化</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JUTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ju_test1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/Json4Unity Test/Run the Test1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【Json4Unity：Type类型变量的序列化和反序列化】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            JUHouseA houseA = <span class="keyword">new</span> JUHouseA</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span>,</span><br><span class="line">                type = <span class="keyword">typeof</span>(PersonD)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseA);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            houseA = JsonMapper.ToObject&lt;JUHouseA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseA);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">JUHouseA</span> : <span class="title">House</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> Type type;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, type:<span class="subst">&#123;type&#125;</span>]&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（8）Json4Unity：Unity常见数据结构Vector2,Vector3,Vector4,Rect,Quaternion,Color,</strong></p><p><strong>Bounds的序列化和反序列化</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JUTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ju_test2</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/Json4Unity Test/Run the Test2&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【Json4Unity：Unity常见数据结构Vector2,Vector3,Vector4,Rect,Quaternion,Color,Bounds的序列化和反序列化】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            JUData data = <span class="keyword">new</span> JUData</span><br><span class="line">            &#123;</span><br><span class="line">                mVec2 = <span class="keyword">new</span> Vector2(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                mVec3 = <span class="keyword">new</span> Vector3(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                mVec4 = <span class="keyword">new</span> Vector4(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">                mRect = <span class="keyword">new</span> Rect(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">                mQuat = <span class="keyword">new</span> Quaternion(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">                mColor = <span class="keyword">new</span> Color(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">            &#125;;</span><br><span class="line">            data.mBounds = <span class="keyword">new</span> Bounds(data.mVec3, data.mVec3);</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(data);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            data = JsonMapper.ToObject&lt;JUData&gt;(jsonStr);</span><br><span class="line">            Debug.Log(data);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">JUData</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> Vector2 mVec2;</span><br><span class="line">            <span class="keyword">public</span> Vector3 mVec3;</span><br><span class="line">            <span class="keyword">public</span> Vector4 mVec4;</span><br><span class="line">            <span class="keyword">public</span> Rect mRect;</span><br><span class="line">            <span class="keyword">public</span> Quaternion mQuat;</span><br><span class="line">            <span class="keyword">public</span> Color mColor;</span><br><span class="line">            <span class="keyword">public</span> Bounds mBounds;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">$&quot;[Vector2:<span class="subst">&#123;mVec2&#125;</span>,Vector3:<span class="subst">&#123;mVec3&#125;</span>,Vector4:<span class="subst">&#123;mVec4&#125;</span>,Rect:<span class="subst">&#123;mRect&#125;</span>,Quaternion:<span class="subst">&#123;mQuat&#125;</span>,Color:<span class="subst">&#123;mColor&#125;</span>,Bounds:<span class="subst">&#123;mBounds&#125;</span>]&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（9）相同的自定义类型公共字段在不同的类中反序列化规则不同</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OtherTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ot_test1</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/Other Test/Run the Test1&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【相同的自定义类型公共字段在不同的类中反序列化规则不同】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            OTPersonA person = <span class="keyword">new</span> OTPersonA</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span></span><br><span class="line">            &#125;;</span><br><span class="line">            OTHouseA houseA = <span class="keyword">new</span> OTHouseA()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseA&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            OTHouseB houseB = <span class="keyword">new</span> OTHouseB()</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseB&quot;</span>,</span><br><span class="line">                mSize = <span class="number">50</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseA);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            OTHouseA houseA1 = JsonMapper.ToObject&lt;OTHouseA&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseA1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            jsonStr = JsonMapper.ToJson(houseB);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            OTHouseB houseB1 = JsonMapper.ToObject&lt;OTHouseB&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseB1);</span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">OTPersonA</span> : <span class="title">IPerson</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> mName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> mAge &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mAge:<span class="subst">&#123;mAge&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">OTHouseA</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> OTPersonA person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">OTHouseA</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            JsonMapper.RegisterImporterWithReader&lt;OTPersonA, OTHouseA&gt;(reader =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                ReaderData[] readerDatas = <span class="keyword">new</span> ReaderData[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; reader.count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    readerDatas[i] = reader.GetData();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OTPersonA</span><br><span class="line">                &#123;</span><br><span class="line">                    mName = (<span class="built_in">string</span>)readerDatas[<span class="number">0</span>].propertyValue,</span><br><span class="line">                    mAge = (<span class="built_in">int</span>)readerDatas[<span class="number">1</span>].propertyValue</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">OTHouseB</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> OTPersonA person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">OTHouseB</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            JsonMapper.RegisterImporterWithReader&lt;OTPersonA, OTHouseB&gt;(reader =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                ReaderData[] readerDatas = <span class="keyword">new</span> ReaderData[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; reader.count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    readerDatas[i] = reader.GetData();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OTPersonA</span><br><span class="line">                &#123;</span><br><span class="line">                    mName = (<span class="built_in">string</span>)readerDatas[<span class="number">0</span>].propertyValue,</span><br><span class="line">                    mAge = (<span class="built_in">int</span>)readerDatas[<span class="number">1</span>].propertyValue</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（10）对自定义类型公共字段自定义反序列化规则</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OtherTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">ot_test2</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">MenuItem(<span class="string">&quot;LitJsonTest/Other Test/Run the Test2&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;*&#x27;</span>, <span class="number">80</span>));</span><br><span class="line">            Debug.Log(<span class="string">&quot;&lt;b&gt;&lt;color=green&gt;【对自定义类型公共字段自定义反序列化规则】&lt;/color&gt;&lt;/b&gt;&quot;</span>);</span><br><span class="line">            OTPersonA person = <span class="keyword">new</span> OTPersonA</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">                mAge = <span class="number">18</span></span><br><span class="line">            &#125;;</span><br><span class="line">            OTHouseC houseC = <span class="keyword">new</span> OTHouseC</span><br><span class="line">            &#123;</span><br><span class="line">                mName = <span class="string">&quot;HouseC&quot;</span>,</span><br><span class="line">                mSize = <span class="number">100</span>,</span><br><span class="line">                person = person</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonMapper.ToJson(houseC);</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            OTHouseC houseC1 = JsonMapper.ToObject&lt;OTHouseC&gt;(jsonStr);</span><br><span class="line">            Debug.Log(houseC1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">OTHouseC</span> : <span class="title">House</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> OTPersonA person;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">OTHouseC</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            JsonMapper.RegisterImporterWithReader(reader =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                ReaderData[] readerDatas = <span class="keyword">new</span> ReaderData[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; reader.count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    readerDatas[i] = reader.GetData();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> OTPersonA</span><br><span class="line">                &#123;</span><br><span class="line">                    mName = (<span class="built_in">string</span>)readerDatas[<span class="number">0</span>].propertyValue,</span><br><span class="line">                    mAge = (<span class="built_in">int</span>)readerDatas[<span class="number">1</span>].propertyValue</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;[mName:<span class="subst">&#123;mName&#125;</span>, mSize:<span class="subst">&#123;mSize&#125;</span>, person:<span class="subst">&#123;person&#125;</span>]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>对自定义内容进行了十项单元测试，且测试均通过，但未对自定义内容之间的组合使用进行联调测试（确实没啥时间），有热心网友请帮忙测试一下吧。</p><p>本文基于LitJson进行自定义，扩展了以下功能：</p><p>1.对C#的Type类型，以及接口类型或抽象类类型的字段或属性进行序列化和反序列化；</p><p>2.标记指定公有字段或属性不进行序列化和反序列化；</p><p>3.标记指定非公有字段或属性进行序列化和反序列化；</p><p>4.根据所在类不同，自定义同类型字段或属性的序列化或反序列化的局部规则；</p><p>5.对Unity3D中常见数据结构的序列化和反序列化进行扩展。</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://pan.baidu.com/s/1Le07U6dMtbPr75vF_9IMFg?pwd=1314" title="百度网盘">百度网盘</a>（提取码：1314）<a href="https://litjson.net/" title="官网地址">官网地址</a></p><p><em>使用声明：LitJson为开源插件，但请保护原作者基本权益以及尊重原作者的创作成果，合理合法进行使用，从本文直接或间接下载则默认同意并悉知该声明。</em></p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/136762628">https://blog.csdn.net/hgf1037882434/article/details/136762628</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> 个人研究 </tag>
            
            <tag> json </tag>
            
            <tag> .net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>UGUI父对象自适应子元素布局解决方案</title>
      
      <link href="/2025/05/04/2025-05-04-UGUI%E7%88%B6%E5%AF%B9%E8%B1%A1%E8%87%AA%E9%80%82%E5%BA%94%E5%AD%90%E5%85%83%E7%B4%A0%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2025/05/04/2025-05-04-UGUI%E7%88%B6%E5%AF%B9%E8%B1%A1%E8%87%AA%E9%80%82%E5%BA%94%E5%AD%90%E5%85%83%E7%B4%A0%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>在UI开发中，难免会遇到需要父对象自适应子元素尺寸的问题，这通常是为了解决不同屏幕分辨率的UI自适应问题。实际上我们去仔细了解UGUI的布局组件的原理就能够合理配置组件来解决这个问题。</p><p><strong>案例问题：</strong> 例如我现在有一个背景面板，背景面板中包含一张图片和一段文字，要求图片和文字进行向左水平居中布局，图片对象根据Sprite自适应大小，文本框根据文字内容自适应大小，且背景面板始终根据二者的总尺寸进行自适应。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>根据上述案例问题，首先肯定能想到需要一个Horizontal Layout Group组件，那么这就解决了图片和文字向左水平居中的问题，其次背景面板需要自适应总尺寸，那么就需要一个Content Size Fitter组件。</p><p>接下来是图片和文本框，二者都属于布局元素，所以就各自加上Layout Element组件。图片则勾选Image组件的Preserve Aspect选项，LayoutElement组件保持默认；文本框的LayoutElement组件需要勾选Flexible Width和Flexible Height，二者的值可以都设置为1。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果对UGUI布局感兴趣，还可以去看看预设的布局组件的源代码，在Packages&#x2F;Unity UI下，对于其它布局情况建议先看看能否通过UGUI的预设布局组件进行组合来解决，若解决不了再去考虑开发自定义的布局组件。</p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/137999279">https://blog.csdn.net/hgf1037882434/article/details/137999279</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>自定义Unity组件——ABManager（AB包管理器）</title>
      
      <link href="/2025/05/04/2025-05-04-%E8%87%AA%E5%AE%9A%E4%B9%89Unity%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94ABManager%EF%BC%88AB%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-%E8%87%AA%E5%AE%9A%E4%B9%89Unity%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94ABManager%EF%BC%88AB%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>在Unity3D引擎中，AB包作为常用的游戏资源存储格式之一。而对于资源管理我们就不得不谈到集中管理的优势了，通过统一的接口加载和卸载AB包及其中的资源将进一步提升我们的编程效率。本文将围绕这个需求进行尝试。</p><h4 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h4><p><strong>1.</strong> AB包的加载包括同步和异步加载方式，AB包中的资源也包括同步和异步加载方式。<br><strong>2.</strong> ABManager的初始化方式分为三种。第一种是通过ABManagerComponent组件在Inspector面板设置好初始化必要属性；第二种是在运行时设置ABManagerComponent组件的初始化属性，并调用其Init方法；第三种是通过ABManagerPool获取ABManager实例，通过调用其Init方法并传递AB包目录路径和主AB包名称的方式初始化。<br><strong>3.</strong> 可以通过ABManagerTool获取指定绝对目录路径下的AB包名称合集、AB包绝对路径合集，也可以通过AB包绝对路径获取AB包名称，也可以通过AB包目录路径和AB包名称获取AB包的绝对路径。<br><strong>4.</strong> ABManagerComponent组件将提供快速选择AB包目录路径、选择主AB包名称及自动初始化等功能。</p><h4 id="代码展示（C-）"><a href="#代码展示（C-）" class="headerlink" title="代码展示（C#）"></a>代码展示（C#）</h4><p><em>博主较懒，就暂不作代码展示了…</em></p><h4 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/fd48bcb872bc76d96b8f223bdda761ff.png" alt="bdaceb825f82413f93bff2265bf0077e.png"></p><h4 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h4><p> <em>博主较懒，演示效果在资源里，先把.dll和.xml文件放在Plugins目录下，再导入示例的.unitypackage包，…</em></p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://github.com/JokeVallen/UnityTools/tree/main/ABManager" title="Github">Github</a> <a href="https://pan.baidu.com/s/1dZbLygablmms4U05pU9bnw?pwd=1314" title="百度网盘（提取码：1314）">百度网盘（提取码：1314）</a></p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/139609230">https://blog.csdn.net/hgf1037882434/article/details/139609230</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> 自定义组件 </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数组、列表和字典等可枚举类型的控制台输出扩展方法</title>
      
      <link href="/2025/05/04/2025-05-04-%E6%95%B0%E7%BB%84%E3%80%81%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%E7%AD%89%E5%8F%AF%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/"/>
      <url>/2025/05/04/2025-05-04-%E6%95%B0%E7%BB%84%E3%80%81%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%E7%AD%89%E5%8F%AF%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>在程序开发中我们经常需要对数组、列表和字典等可枚举类型进行调试输出，每次都去手动敲一个for或foreach循环比较麻烦，所以我们可以考虑用一个静态类为可枚举类型添加扩展方法，从而实现快速输出可枚举类型的数据。</p><h4 id="代码（C-）"><a href="#代码（C-）" class="headerlink" title="代码（C#）"></a>代码（C#）</h4><p><strong>LogUtility.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LogToolAPI</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">System.Diagnostics.DebuggerStepThrough</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LogUtility</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Log</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;T&gt; source, <span class="built_in">string</span> prefix = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = source == <span class="literal">null</span> ? <span class="string">&quot;Null&quot;</span> : <span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, source);</span><br><span class="line">            Debug.Log(prefix + str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Log</span>&lt;<span class="title">TSource</span>, <span class="title">TResult</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TResult&gt; selecter, <span class="built_in">string</span> prefix = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str = source == <span class="literal">null</span> ? <span class="string">&quot;Null&quot;</span> : <span class="built_in">string</span>.Join(<span class="string">&quot;, &quot;</span>, source.Select(selecter));</span><br><span class="line">            Debug.Log(prefix + str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例代码</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; v_list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">int</span>[] v_array = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; v_dict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    v_dict.Add(i, <span class="string">&quot;Value:&quot;</span> + i.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v_array.Log(<span class="string">&quot;Array:&quot;</span>);</span><br><span class="line">v_list.Log(<span class="string">&quot;List:&quot;</span>);</span><br><span class="line">v_dict.Log(kv =&gt; kv.Value, <span class="string">&quot;Dict:&quot;</span>);</span><br><span class="line"></span><br><span class="line">v_list = <span class="literal">null</span>;</span><br><span class="line">v_array = <span class="literal">null</span>;</span><br><span class="line">v_dict = <span class="literal">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>代码中我们使用了C#扩展方法的机制为所有可枚举类型添加了两种Log方法，本篇文章是基于Unity3D的部分API，但是这不是必须的，而是取决于Debug.Log的API来源。主要是提供了一种思路，读者可根据具体需求自行修改，值得注意的是，这些控制台输出的方法不应构建到发行版中，所以需要注意代码过滤。</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/139896533">https://blog.csdn.net/hgf1037882434/article/details/139896533</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Windows传统DOS路径有效性检测（资源篇）</title>
      
      <link href="/2025/05/04/2025-05-04-Windows%E4%BC%A0%E7%BB%9FDOS%E8%B7%AF%E5%BE%84%E6%9C%89%E6%95%88%E6%80%A7%E6%A3%80%E6%B5%8B%EF%BC%88%E8%B5%84%E6%BA%90%E7%AF%87%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-Windows%E4%BC%A0%E7%BB%9FDOS%E8%B7%AF%E5%BE%84%E6%9C%89%E6%95%88%E6%80%A7%E6%A3%80%E6%B5%8B%EF%BC%88%E8%B5%84%E6%BA%90%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>本篇旨在探索Windows传统DOS路径有效性检测的一种可行方案，实际上许多Windows文件IO相关的API也同样可以作为一种方案，为了锻炼一下我们的思考和解决问题的能力，所以我们需要另辟蹊径。本篇将通过有限自动机来验证路径有效性，仅记录资源，具体的实现原理将在后续篇幅中进行详细探讨。具体的文档说明、使用方式和API等都在资源中。</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://github.com/JokeVallen/UnityTools/tree/main/PathTool" title="GitHub">GitHub</a> <a href="https://pan.baidu.com/s/1Ig1i3umrds9CdYTgVUDBmA?pwd=1314" title="百度网盘（提取码：1314）">百度网盘（提取码：1314）</a></p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/140111421">https://blog.csdn.net/hgf1037882434/article/details/140111421</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>进度记录工具</title>
      
      <link href="/2025/05/04/2025-05-04-%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/05/04/2025-05-04-%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>对过程进度进行记录，采用“进度管理器+进度处理器+进度记录器”结构、对象池技术和单例等设计，计时器间隔动态更新，时间间隔预测算法采用单指数平滑预测（有数据清洗）。一个进度管理器管理多个进度处理器，一个进度处理器可分配多个进度记录器，可配置过程权值，可进行进度递增和递减操作。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><table><thead><tr><th>测试项目 项目</th><th>状态</th></tr></thead><tbody><tr><td>多协程处理过程模拟测试</td><td>通过</td></tr><tr><td>……</td><td>未测试</td></tr></tbody></table><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://github.com/JokeVallen/UnityTools/tree/main/ProgressTool" title="GitHub">GitHub</a> <a href="https://pan.baidu.com/s/1UTaNsCGVaUrlfuDt6-hkWA?pwd=1314" title="百度网盘（提取码：1314）">百度网盘（提取码：1314）</a></p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/140219628">https://blog.csdn.net/hgf1037882434/article/details/140219628</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity3D瓦片地图辅助定位工具</title>
      
      <link href="/2025/05/04/2025-05-04-Unity3D%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE%E8%BE%85%E5%8A%A9%E5%AE%9A%E4%BD%8D%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/05/04/2025-05-04-Unity3D%E7%93%A6%E7%89%87%E5%9C%B0%E5%9B%BE%E8%BE%85%E5%8A%A9%E5%AE%9A%E4%BD%8D%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>该工具用于TileMap的瓦片辅助定位，通过键盘或鼠标按瓦片尺寸0到1的比例作为单次移动值移动定位点游戏对象。当采用定位点游戏对象映射瓦片时，可使用该工具来移动定位点游戏对象，在新版本Unity3D的TileMap编辑器中可使用GameObject Brush快速给瓦片添加定位点游戏对象，而旧版本中该工具更适用，这仅限于瓦片地图固定设计的情景，而对于代码动态生成的随机瓦片地图使用Unity3D中TileMap相关API来完成定位更合适。</p><h4 id="适用情景"><a href="#适用情景" class="headerlink" title="适用情景"></a>适用情景</h4><p>1.瓦片地图设计固定，且采用定位点游戏对象映射瓦片，包括但不限于映射瓦片坐标或瓦片相对位置的特殊处理。</p><p>2.需要在瓦片地图特定位置进行特殊处理，例如在指定位置生成某种建筑等。</p><h4 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><p>优点：</p><blockquote><p>1. 避免使用代码计算瓦片位置；</p><p>2. 对于瓦片的特殊处理相较于代码处理的成本和难度更低。</p></blockquote><p>缺点： </p><blockquote><p>1. 设计固定，无法应对高随机性的瓦片地图，仅可在编辑器构建瓦片地图时使用；</p><p>2. 需要手动维护定位点游戏对象，对于瓦片数量过多或复杂程度过高的瓦片地图不适用。</p></blockquote><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>我们用该工具辅助定位瓦片地图的四个顶点瓦片，如图所示：</p><p><img src="https://i-blog.csdnimg.cn/direct/bf1452146330424998d94f8d08fab4ae.png"> 未定位前 </p><p><img src="https://i-blog.csdnimg.cn/direct/909258af11b34a6b97b547de5e490a2e.png"> 定位后 </p><p>（1）创建定位点游戏对象（上图中的红点）：</p><p><img src="https://i-blog.csdnimg.cn/direct/1a3218f895d9441f8c9526e7898ac71c.png"></p><p>（2）打开顶部菜单中的Tool —- CellMover窗口：</p><p><img src="https://i-blog.csdnimg.cn/direct/a9fd7149280a4306b8d497150bd2964f.png"></p><p>（3）选择或拖拽相关Tilemap组件给 <strong>Selected TileMap</strong> ，选择和拖拽定位点游戏对象给 <strong>Selected Cell</strong> ，自行调节或输入单次移动的步长 <strong>Step</strong> ，步长以一个瓦片单元的尺寸为基准：</p><p><img src="https://i-blog.csdnimg.cn/direct/f1e1dcbc750747bebc27636075b1fa99.png"></p><p>（4）移动方式看上图中的提示。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><ol><li>如果需要修改预制体中的对象名称，请先移动到场景中，完成后应用修改到预制体；</li></ol></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><p>……</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://github.com/JokeVallen/UnityTools/tree/main/GameTool" title="GitHub">GitHub</a> <a href="https://pan.baidu.com/s/13qRhrQ2XQge33N9y7pSufQ?pwd=1314" title="百度网盘（提取码：1314）">百度网盘（提取码：1314）</a></p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/140225671">https://blog.csdn.net/hgf1037882434/article/details/140225671</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 自定义组件 </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity3D批量修改名称工具</title>
      
      <link href="/2025/05/04/2025-05-04-Unity3D%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%90%8D%E7%A7%B0%E5%B7%A5%E5%85%B7/"/>
      <url>/2025/05/04/2025-05-04-Unity3D%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%90%8D%E7%A7%B0%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>该工具用于批量修改某游戏对象的一级子对象名称，功能包括批量添加前后缀、批量修改公共名称字段和批量修改为同一名称，包括撤销和恢复功能。批量添加前后缀可使用预设从指定数字递增或递减至指定数字。</p></blockquote><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><p>（1）初始名称如图：</p><p><img src="https://i-blog.csdnimg.cn/direct/37d055e552594014a4904e59555c5eb6.png"></p><p>（2）打开顶部菜单栏中的Tool —- NameModifier工具：</p><p><img src="https://i-blog.csdnimg.cn/direct/4f8d5b75e6194cf08225aafd8e1b3743.png"></p><p>（3）选择修改模式为 “ <strong>批量修改为同一名称</strong> ” ：</p><p><img src="https://i-blog.csdnimg.cn/direct/393f70b63a784dfaa83aefa564fd8fdd.png"></p><p>（4）选取或拖拽待修改名称的游戏对象的直接父对象，我们这里则是 “ <strong>Cells</strong> “。新的名称输入 “ <strong>Cell</strong> “，点击<strong>修改</strong> ：</p><p><img src="https://i-blog.csdnimg.cn/direct/0759828efe97429daaba3c74511d576c.png"></p><p>（5）修改模式切换为 “ <strong>批量添加名称前缀或后缀</strong> ” ，<strong>待添加的前缀或后缀</strong> 输入 “ _ ”，<strong>预设</strong> 选择<strong>从指定数字递增</strong> ，<strong>指定数字</strong> 输入 “ 0 ”，点击<strong>修改</strong> ： </p><p><img src="https://i-blog.csdnimg.cn/direct/8e32fc677a6e46d8b04982bf7de5c697.png"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><ol><li>注意保存场景文件修改；</li><li>如果需要修改预制体中的对象名称，请先移动到场景中，完成后应用修改到预制体；</li><li>关闭窗口前将保留修改记录，但是关闭窗口后，记录将被清除，无法再进行撤销和恢复，后续版本中可能会改进。</li></ol></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><p>……</p><h4 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h4><p><a href="https://github.com/JokeVallen/UnityTools/tree/main/GameTool" title="GitHub">GitHub</a> <a href="https://pan.baidu.com/s/13qRhrQ2XQge33N9y7pSufQ?pwd=1314" title="百度网盘（提取码：1314）">百度网盘（提取码：1314）</a></p><p><em>免责声明：由于本文内容未经过正规和严格的测试，可能存在错误，因此造成的损失均由使用者自行承担，对本文内容复制、下载、参考等引用行为即默认悉知并同意该声明。</em></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/140226874">https://blog.csdn.net/hgf1037882434/article/details/140226874</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 自定义组件 </tag>
            
            <tag> 游戏引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Android游戏开发常见知识合集（Unity3D）</title>
      
      <link href="/2025/05/04/2025-05-04-Android%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86%EF%BC%88Unity3D%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-Android%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E5%90%88%E9%9B%86%EF%BC%88Unity3D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>PS：持续更新…</strong></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Unity3D的特色之一就是具有良好的跨平台特性，随着移动设备的普及，移动端游戏的开发成为了多数游戏开发者所必备的技能之一。而Android作为最为普及的移动端系统，学习如何开发Android游戏是很有必要的。</p></blockquote><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><blockquote><p><strong>开发环境</strong></p><p>1.Unity3D</p><p>2.Unity3D构建Android项目必备的模块（Android SDK&#x2F;Android NDK&#x2F;Java JDK&#x2F;Gradle等）</p><p>3.Visual Studio 或 Visual Studio Code</p><p><strong>发布环境（任选其一）</strong></p><p>1.Android Studio发布</p><p>2.Unity发布</p><p><strong>调试环境（任选其一）</strong></p><p>1.真机 + Android Studio</p><p>2.AVD（安卓虚拟设备） + Android Studio</p><p>3.Unity Remote</p><p>4.模拟器 + Android Studio</p><p><strong>Android Studio****必备模块</strong></p><p>1.Android API</p><p>2.Android SDK Build-Tools</p><p>3.Android SDK Command-line Tools</p><p>4.Android SDK Platform-Tools</p><p><strong>Android Studio****可选模块</strong></p><p>1.Android Emulator</p><p>2.Andorid Emulator hypevisor dirver</p><p>3.Intel x86 Emulator Accelerator（HAXM installer）</p><p><strong>其他工具（可选）</strong></p><p>1.adb：连接模拟器以及在模拟器中安装apks等</p><p>2.bundletool：从aab生成apks等</p><p>3.keytool：签名密钥创建、查询等</p><p>4.jarsigner：签名检测等</p><p>5.pepk：Google开发者后台应用签名密钥加密等</p><p>6.openssl：密钥文件公钥、证书链导出等</p></blockquote><h4 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h4><blockquote><p><strong>1.</strong> 先在Unity中编写好基础的交互逻辑，配置好Android项目的构建环境（SDK、NDK、JDK、Gradle），建议构建环境使用官方推荐配置，自定义可能会存在一些坑；</p><p><strong>2.</strong> 勾选项目的arm v7、arm v8，设置Android最小API及目标API；</p><p><strong>3.</strong> 构建时可以导出为Android项目，也可以导出为apk文件；</p><p><strong>3.1</strong> 若是导出为Andorid项目，则可以在Android Studio中进行项目配置和签名，接入第三方SDK的话，建议选择该方式；</p><p><strong>3.2</strong> 若是导出为apk，则可以在Unity中进行项目配置和签名；</p><p><strong>4.</strong> 若是导出为Android项目，则在Android Studio中配置好SDK、NDK、JDK、Gradle版本，这些版本不一定需要跟Unity构建时的版本一致，因为Unity这边的版本仅用于构建，且往往比较旧，只要能兼容即可，第三方库有时候会要求更高的版本。在Android Studio中还需要配置好签名密钥，若要接入第三方SDK，则以UnityPlayerActivity为调用入口，因为Unity的Activity生命周期函数都在这个类中，当然也可以继承该类进行自定义；</p><p><strong>5.</strong> 导出为apk则用于测试，导出为aab则用于上传Google Play控制台，在控制台进行发布审核。</p></blockquote><h4 id="Mumu模拟器代理"><a href="#Mumu模拟器代理" class="headerlink" title="Mumu模拟器代理"></a>Mumu模拟器代理</h4><blockquote><p>在模拟器——设置——网络中找到当前所连接的网络，打开其高级选项，选择手动代理，代理主机名为运行模拟器主机的网络IPV4地址（CMD中输入ipconfig查询），端口为代理端口，代理需要打开允许局域网的设置。</p></blockquote><h4 id="Android与Unity代码交互"><a href="#Android与Unity代码交互" class="headerlink" title="Android与Unity代码交互"></a>Android与Unity代码交互</h4><blockquote><p>*<em>Android</em><em><strong>中的</strong></em><em>Java</em><em><strong>代码调用</strong></em><em>Unity</em><em><strong>的</strong></em>*C#**<strong>代码：</strong></p><p>UnityPlayer.UnitySendMessage(string s,string s1,string s2);</p><p>s：挂载了Monobehaviour组件的游戏对象名称</p><p>s1：Monobehaviour组件中的公共方法名</p><p>s2：方法参数</p><p>*<em>Unity</em><em><strong>中的</strong></em><em>C#<strong><strong>代码调用</strong></strong>Android</em><em><strong>中的</strong></em><em>Java</em>*<strong>代码：</strong></p><p>使用AndroidJavaClass或AndroidJavaObject</p><p>AndroidJavaObject jo &#x3D; new AndroidJavaClass(“com.unity3d.player.UnityPlayer”).GetStatic<AndroidJavaObject>(“currentActivity”);</p><p>PS：不使用AndroidJavaClass或AndroidJavaObject后，应注意及时释放内存。</p></blockquote><h4 id="Google相关"><a href="#Google相关" class="headerlink" title="Google相关"></a>Google相关</h4><blockquote><p>Play Asset Delivery（PAD）：</p><p><a href="https://developer.android.com/guide/playcore/asset-delivery?hl=zh-cn" title="官方文档">官方文档</a></p><p>Play Feature Delivery（PFD）：</p><p><a href="https://developer.android.com/guide/playcore/feature-delivery?hl=zh-cn" title="官方文档">官方文档</a></p><p>Android App Bundle（AAB）：</p><p><a href="https://developer.android.com/guide/app-bundle?hl=zh-cn" title="官方文档">官方文档</a></p></blockquote><h4 id="常用控制台命令"><a href="#常用控制台命令" class="headerlink" title="常用控制台命令"></a>常用控制台命令</h4><blockquote><p><strong>1.打印jks密钥文件信息</strong></p><p>keytool -list -v -keystore my-release-key.keystore</p><p><strong>2.java执行jar包</strong></p><p>java -jar example.jar</p><p><strong>3.jks导出为pkcs12文件</strong></p><p>keytool -importkeystore -srckeystore my-release-key.keystore -destkeystore my-release-key.p12 -srcstoretype JKS -deststoretype PKCS12 -srcalias my-key-alias</p><p><strong>4.pkcs12导出私钥pem</strong></p><p>openssl pkcs12 -in my-release-key.p12 -nodes -nocerts -out private_key.pem</p><p><strong>5.pkcs12导出证书链</strong></p><p>openssl pkcs12 -in my-release-key.p12 -nokeys -out cert_chain.pem</p><p><strong>6.合并pem</strong></p><p>cat private_key.pem cert_chain.pem &gt; combined.pem</p><p><strong>7.通过pepk加密本地密钥（jks或keystore）和Google开发者公钥（pem），获取上传控制台的应用签名密钥（zip）</strong></p><p>java -jar pepk.jar –keystore&#x3D;my-release-key.keystore –alias&#x3D;my-key-alias –output&#x3D;encrypted-output.zip –encryptionkey&#x3D;your-encryption-key –pem&#x3D;combined.pem</p><p><strong>8.aab转换为apks</strong></p><p>java -jar bundletool.jar build-apks –bundle&#x3D;&#x2F;path&#x2F;to&#x2F;your_app.aab –output&#x3D;&#x2F;path&#x2F;to&#x2F;output.apks –ks&#x3D;&#x2F;path&#x2F;to&#x2F;your_keystore.jks –ks-pass&#x3D;pass:your_keystore_password –ks-key-alias&#x3D;your_key_alias –key-pass&#x3D;pass:your_key_password</p><p><strong>9.Android Studio连接Mumu模拟器调试</strong></p><p>adb connect 127.0.0.1:7555</p><p><strong>10.将apks安装到Mumu模拟器上（执行该操作前先连接Mumu模拟器）</strong></p><p>java -jar bundletool.jar install-apks –apks&#x3D;&#x2F;path&#x2F;to&#x2F;your_file.apks –adb&#x3D;&#x2F;path&#x2F;to&#x2F;adb.exe</p><p><strong>11.keytool生成jks密钥</strong></p><p>keytool -genkeypair -alias your_alias -keyalg RSA -keysize 2048 -validity 36500 -keystore your_keystore.jks -storepass your_password -keypass your_password</p></blockquote><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/141716511">https://blog.csdn.net/hgf1037882434/article/details/141716511</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> android </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity3D安卓游戏第三方SDK接入</title>
      
      <link href="/2025/05/04/2025-05-04-Unity3D%E5%AE%89%E5%8D%93%E6%B8%B8%E6%88%8F%E7%AC%AC%E4%B8%89%E6%96%B9SDK%E6%8E%A5%E5%85%A5/"/>
      <url>/2025/05/04/2025-05-04-Unity3D%E5%AE%89%E5%8D%93%E6%B8%B8%E6%88%8F%E7%AC%AC%E4%B8%89%E6%96%B9SDK%E6%8E%A5%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>PS：持续更新…</strong></p><h4 id="什么是SDK？"><a href="#什么是SDK？" class="headerlink" title="什么是SDK？"></a>什么是SDK？</h4><blockquote><p>SDK（Software Development Kit，软件开发工具包）是一个用于构建应用程序的工具集，包含开发特定软件的必要工具、库、文档和示例代码。SDK通常由软件或硬件厂商提供，帮助开发者更容易地为特定平台、操作系统、设备或服务创建应用程序。</p></blockquote><h4 id="SDK的应用场景"><a href="#SDK的应用场景" class="headerlink" title="SDK的应用场景"></a>SDK的应用场景</h4><blockquote><p>1.平台开发：如Android、iOS等移动操作系统的SDK，提供了开发移动应用的所有必要资源。</p><p>2.服务集成：如云服务的SDK，帮助开发者快速集成和使用特定的云服务（如AWS、Google Cloud等）。</p><p>3.硬件开发：一些硬件厂商提供SDK，以便开发者创建与其硬件设备兼容的软件。</p></blockquote><h4 id="Google新版登录SDK–Credential"><a href="#Google新版登录SDK–Credential" class="headerlink" title="Google新版登录SDK–Credential"></a>Google新版登录SDK–Credential</h4><blockquote><p><strong>依赖项：</strong></p><p>（1）implementation ‘androidx.appcompat:appcompat:1.3.1’</p><p>（2）implementation “com.google.android.gms:play-services-auth:21.2.0”</p><p>（3）implementation “androidx.credentials:credentials:1.3.0-rc01”</p><p>（4）implementation “androidx.credentials:credentials-play-services-auth:1.3.0-rc01”</p><p>（5）implementation “com.google.android.libraries.identity.googleid:googleid:1.1.0”</p><p><strong>接入流程：</strong><a href="https://developer.android.com/identity/sign-in/credential-manager" title="官方文档">官方文档</a></p><p><strong>常见错误：</strong></p><p>（1）Failed to transform annotation-experimental-1.4.0.aar</p><p><img src="https://i-blog.csdnimg.cn/direct/d66e51a475d5422a9425fd903f5f5baf.png"></p><p>（2）androidx.credentials.exceptions.GetCredentialProviderConfigurationException: getCredentialAsync no provider dependencies found - please ensure the desired provider dependencies are added</p><p>1.可能是设备的Google Play Service版本太低导致的，可以尝试更新设备的Google Play Service；</p><p>（3）During begin sign in, failure response from one tap: Missing Feature{name&#x3D;auth_api_credentials_begin_sign_in, version&#x3D;8}</p><p>1.提高依赖项”androidx.credentials:credentials”和”androidx.credentials:credentials-play-services-auth”的版本；</p><p>（4）During begin sign in, failure response from one tap: 10: [28444] Developer console is not set up correctly.</p><p>1.这个可能是因为Google后台配置问题，也可能是本地客户端ID设置错误所致；</p><p>（5）androidx.credentials.exceptions.GetCredentialCancellationException: activity is cancelled by the user.</p><p>1.这个可能是本地客户端ID设置错误所致；</p><p><strong>特殊要求：</strong></p><p>（1）设备Android系统版本最低为8.0，需要设备具备Google三件套（Google服务框架、Google Play服务、Google商店）；</p><p>（2）需要设备具备VPN功能，能够访问Google服务（例如能够正常打开Google商店）；</p></blockquote><h4 id="常见第三方SDK（海外）"><a href="#常见第三方SDK（海外）" class="headerlink" title="常见第三方SDK（海外）"></a>常见第三方SDK（海外）</h4><blockquote><p>1.Google身份验证SDK；</p><p>2.Google支付SDK；</p><p>3.AppsFlyer移动归因和营销分析SDK；</p><p>……</p></blockquote><h4 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h4><blockquote><p><strong>Google<strong><strong>登录</strong></strong>SDK**</strong>：**</p><p>1.登录Google Cloud后台，创建一个项目；</p><p>2.开启API和服务（Identity Toolkit API）；</p><p>3.设置OAuth权限请求页面，添加测试用户；</p><p>4.添加OAuth2.0客户端ID，包括Web应用和Android，输入包名以及本地导包的jks的SHA-1指纹（Web应用的客户端ID将用于Google登录SDK）；</p><p>5.值得注意的是，如果本地导包的jks发生改变，也应在后台更新SHA-1指纹，否则无法成功调用SDK。</p><p><strong>Google<strong><strong>支付</strong></strong>SDK**</strong>：**</p><p>1.这个需要Google开发者账号，需要在Google Play控制台配置商品信息；</p><p>2.还需要上传一个应用程序签名密钥，这个需要上传一个.zip文件，生成方法则是通过pepk将开发者账号的配套密钥的pem与本地开发所用的jks联合加密，然后导出为.zip文件；</p><p>3.注意开发者账号的配套密钥不能作为本地开发密钥，Google Play控制台为了安全考虑这种方式不被允许；</p></blockquote><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><blockquote><p>示例1将演示如何为Unity3D开发的Android项目接入Google登录SDK。</p><p><strong>开发环境：</strong></p><p>1.Android Studio 2024.1.0.0</p><p>2.Windows 10</p><p>3.Unity3D 2020.3.48f1c1</p><p>4.Android SDK 34 （Android Studio导出环境） Android SDK 10&#x2F;11（Unity构建环境）</p><p>5.Android NDK 19.0.5232133（Unity构建环境、Android Studio导出环境）</p><p>6.JDK 11.0.24（Android Studio导出环境） JDK 1.8.0（Unity构建环境）</p><p>7.Gradle 6.1.1（Unity构建环境、Android Studio导出环境）</p><p>8.Gradle Plugin 4.0.1（Android Studio导出环境）</p><p><strong>Unity****配置：</strong></p><p>1.Minimum api level 22</p><p>2.Target api level 34</p><p><strong>运行环境：</strong></p><p>1.Mumu模拟器，设备（OPPO K10 PGJM10），Android系统（12）；</p><p><strong>功能描述：</strong></p><p>1.Unity3D 搭建UI界面，可供玩家交互，包括登录、注销登录、查看用户信息、退出游戏四个功能；</p><p>2.Android Studio接入Google身份验证SDK，需要登录、注销登录、发送提示信息三个功能；</p><p><strong>流程描述：</strong></p><p>1.玩家进入游戏；</p><p>2.玩家点击登录按钮，触发Google登录功能，需要对登录结果和异常进行反馈；</p><p>3.玩家点击注销登录按钮，触发Google注销登录功能，需要对注销登录结果和异常进行反馈；</p><p>4.玩家点击查看用户信息按钮，显示账户的Google id、名称、邮箱、邮箱是否验证信息，需要对异常进行反馈；</p><p>5.玩家点击退出游戏按钮，关闭游戏程序；</p><p>6.对于结果和异常反馈应采用定时关闭的提示框进行显示；</p><p><strong>方法对应表：</strong></p><table><thead><tr><th><strong>方法</strong>**&#x2F;**<strong>端口</strong></th><th><strong>Android</strong><strong>（<strong><strong>Java</strong></strong>）</strong></th><th><strong>Unity3D</strong>**（<strong><strong>C#</strong></strong>）**</th><th><strong>Unity3D</strong>**（<strong><strong>C#</strong></strong>）回调**</th></tr></thead><tbody><tr><td>登录</td><td>askLogin</td><td>OnLoginClick</td><td>OnLoginSuccess</td></tr><tr><td>注销登录</td><td>askLogout</td><td>OnLogoutClick</td><td>OnLogoutSuccess</td></tr><tr><td>发送提示信息</td><td>Null</td><td>SendTip</td><td>Null</td></tr></tbody></table><p><strong>用户信息表：</strong></p><table><thead><tr><th><strong>信息</strong>**&#x2F;**<strong>端口</strong></th><th><strong>Android</strong><strong>（<strong><strong>Java</strong></strong>）</strong></th></tr></thead><tbody><tr><td>与用户的 Google 帐号相关联的电子邮件地址</td><td>id</td></tr><tr><td>在条目上显示的显示名</td><td>name</td></tr><tr><td>用户的个人资料照片 URI</td><td>photo</td></tr><tr><td>用户的 Google ID Toekn</td><td>token</td></tr></tbody></table></blockquote><p><strong>（1）Unity3D游戏代码</strong></p><p><strong>Tip.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示框组件：用以显示提示框信息以及交互</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Tip</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>] Text content;</span><br><span class="line">    [<span class="meta">SerializeField</span>] Button close;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isUsed &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> tip</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUsed || <span class="built_in">string</span>.IsNullOrEmpty(tip)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        isUsed = <span class="literal">true</span>;</span><br><span class="line">        content.text = tip;</span><br><span class="line">        gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        close.onClick.AddListener(OnClose);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnClose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">        isUsed = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>TipController.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示框控制器组件：显示提示框的统一调用接口以及控制提示框</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TipController</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Tip tip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Queue&lt;<span class="built_in">string</span>&gt; contents = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> MAX_COUNT = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(content) || contents.Count &gt;= MAX_COUNT) <span class="keyword">return</span>;</span><br><span class="line">        contents.Enqueue(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (contents.Count &gt; <span class="number">0</span> &amp;&amp; tip.Send(contents.Peek()))</span><br><span class="line">            contents.Dequeue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UILogic.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Networking;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UI逻辑：UI交互相关的逻辑以及 Android 和 Unity 相互调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UILogic</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button login;</span><br><span class="line">    <span class="keyword">public</span> Button show;</span><br><span class="line">    <span class="keyword">public</span> Button logout;</span><br><span class="line">    <span class="keyword">public</span> Button quit;</span><br><span class="line">    <span class="keyword">public</span> ScrollRect showView;</span><br><span class="line">    <span class="keyword">public</span> RawImage portrait;</span><br><span class="line">    <span class="keyword">public</span> Text showText;</span><br><span class="line">    <span class="keyword">public</span> Button showViewCloseButton;</span><br><span class="line"></span><br><span class="line">    AndroidJavaObject jo;</span><br><span class="line">    UserData userData;</span><br><span class="line">    <span class="built_in">bool</span> isLoginSuccess;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        jo = <span class="keyword">new</span> AndroidJavaClass(<span class="string">&quot;com.unity3d.player.UnityPlayer&quot;</span>).GetStatic&lt;AndroidJavaObject&gt;(<span class="string">&quot;currentActivity&quot;</span>);</span><br><span class="line">        login.onClick.AddListener(OnLoginClick);</span><br><span class="line">        show.onClick.AddListener(OnShowClick);</span><br><span class="line">        logout.onClick.AddListener(OnLogoutClick);</span><br><span class="line">        quit.onClick.AddListener(OnQuitClick);</span><br><span class="line">        showViewCloseButton.onClick.AddListener(OnShowViewCloseClick);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        jo.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnLoginClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        jo.Call(<span class="string">&quot;askLogin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnShowClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isLoginSuccess)</span><br><span class="line">        &#123;</span><br><span class="line">            TipController.Send(<span class="string">&quot;请先进行登录。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (portrait.texture == <span class="literal">null</span>) StartCoroutine(LoadPortrait(userData.photo));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(showText.text))</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder()</span><br><span class="line">            .Append(<span class="string">&quot;Gmail:&quot;</span> + userData.id)</span><br><span class="line">            .Append(<span class="string">&quot;\nUserName:&quot;</span> + userData.name)</span><br><span class="line">            .Append(<span class="string">&quot;\nToken:&quot;</span> + userData.token);</span><br><span class="line">            showText.text = builder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        showView.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnLogoutClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        jo.Call(<span class="string">&quot;askLogout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnQuitClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Application.Quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnShowViewCloseClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        showView.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">LoadPortrait</span>(<span class="params"><span class="built_in">string</span> uri</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (UnityWebRequest www = UnityWebRequestTexture.GetTexture(uri))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> www.SendWebRequest();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (www.result != UnityWebRequest.Result.Success)</span><br><span class="line">                TipController.Send(<span class="string">&quot;头像加载失败!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Texture2D texture = DownloadHandlerTexture.GetContent(www);</span><br><span class="line">                portrait.texture = texture;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ************************** Java Call CSharp ******************************</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录成功回调：带有用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnLoginSuccess</span>(<span class="params"><span class="built_in">string</span> jsonStr</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(jsonStr);</span><br><span class="line">            userData = JsonUtility.FromJson&lt;UserData&gt;(jsonStr);</span><br><span class="line">            Debug.Log(userData);</span><br><span class="line">            isLoginSuccess = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            TipController.Send(<span class="string">&quot;用户信息获取失败，请尝试重新登录。&quot;</span>);</span><br><span class="line">            Debug.LogError(ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注销登录成功回调</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnLogoutSuccess</span>(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        isLoginSuccess = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信息提示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendTip</span>(<span class="params"><span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        TipController.Send(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UserData.cs</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户信息：记录Google登录用户的信息结构体</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> UserData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 与用户的 Google 帐号相关联的电子邮件地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在条目上显示的显示名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户的个人资料照片 URI</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> photo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户的 Google ID Toekn</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;[id:<span class="subst">&#123;id&#125;</span>,name:<span class="subst">&#123;name&#125;</span>,photo:<span class="subst">&#123;photo&#125;</span>,token:<span class="subst">&#123;token&#125;</span>]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（2）Android端Java代码（部分）</strong></p><p><strong>UnityPlayerActivity.java</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ****************************** Unity Call *******************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">askLogin</span>()</span>&#123;</span><br><span class="line">    GetGoogleIdOption googleIdOption = <span class="keyword">new</span> GetGoogleIdOption.Builder()</span><br><span class="line">            .setFilterByAuthorizedAccounts(<span class="literal">false</span>)</span><br><span class="line">            .setAutoSelectEnabled(<span class="literal">true</span>)</span><br><span class="line">            .setServerClientId(getString(R.<span class="built_in">string</span>.WEB_CLIENT_ID))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    GetCredentialRequest request = <span class="keyword">new</span> GetCredentialRequest.Builder()</span><br><span class="line">            .addCredentialOption(googleIdOption)</span><br><span class="line">            .build();</span><br><span class="line">    </span><br><span class="line">    CancellationSignal signal = <span class="keyword">new</span> CancellationSignal();</span><br><span class="line">    signal.setOnCancelListener(() -&gt; &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;askLogin: Preparing credentials with Google was cancelled.&quot;</span>);</span><br><span class="line">        sendTip(<span class="string">&quot;你已取消登录!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    getCredentialManager().getCredentialAsync(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            request,</span><br><span class="line">            signal,</span><br><span class="line">            Executors.newSingleThreadExecutor(),</span><br><span class="line">            <span class="keyword">new</span> CredentialManagerCallback&lt;GetCredentialResponse, GetCredentialException&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span>(<span class="params">GetCredentialResponse result</span>)</span> &#123;</span><br><span class="line">                    handleSignIn(result);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span>(<span class="params">GetCredentialException e</span>)</span> &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;askLogin: &quot;</span>, e);</span><br><span class="line">                    sendTip(<span class="string">&quot;登录失败!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">askLogout</span>()</span>&#123;</span><br><span class="line">    ClearCredentialStateRequest clearCredentialStateRequest = <span class="keyword">new</span> ClearCredentialStateRequest();</span><br><span class="line"></span><br><span class="line">    android.os.CancellationSignal cancellationSignal = <span class="keyword">new</span> android.os.CancellationSignal();</span><br><span class="line">    cancellationSignal.setOnCancelListener(() -&gt; &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;askLoginOut:Preparing credentials with Google was cancelled.&quot;</span>);</span><br><span class="line">        sendTip(<span class="string">&quot;你已取消注销登录操作!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (credentialManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        getCredentialManager().clearCredentialStateAsync(</span><br><span class="line">                clearCredentialStateRequest,</span><br><span class="line">                cancellationSignal,</span><br><span class="line">                Executors.newSingleThreadExecutor(),</span><br><span class="line">                <span class="keyword">new</span> CredentialManagerCallback&lt;Void, ClearCredentialException&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span>(<span class="params">Void unused</span>)</span> &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;askLoginOut:google注销登录成功&quot;</span>);</span><br><span class="line">                        sendTip(<span class="string">&quot;注销登录成功!&quot;</span>);</span><br><span class="line">                        UnityPlayer.UnitySendMessage(<span class="string">&quot;Canvas&quot;</span>,<span class="string">&quot;OnLogoutSuccess&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span>(<span class="params">ClearCredentialException e</span>)</span> &#123;</span><br><span class="line">                        Log.e(TAG, <span class="string">&quot;askLoginOut:&quot;</span> , e);</span><br><span class="line">                        sendTip(<span class="string">&quot;注销登录失败!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ****************************** Java Call *******************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendTip</span>(<span class="params">String content</span>)</span>&#123;</span><br><span class="line">    UnityPlayer.UnitySendMessage(<span class="string">&quot;Canvas&quot;</span>,<span class="string">&quot;SendTip&quot;</span>,content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ****************************** Google Login SDK *******************************</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> CredentialManager <span class="title">getCredentialManager</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(credentialManager == <span class="literal">null</span>)</span><br><span class="line">        credentialManager = CredentialManager.create(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> credentialManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleSignIn</span>(<span class="params">GetCredentialResponse result</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Handle the successfully returned credential.</span></span><br><span class="line">    Credential credential = result.getCredential();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (credential instanceof PublicKeyCredential) &#123;</span><br><span class="line">        String responseJson = ((PublicKeyCredential) credential).getAuthenticationResponseJson();</span><br><span class="line">        <span class="comment">// Share responseJson i.e. a GetCredentialResponse on your server to validate and authenticate</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (credential instanceof PasswordCredential) &#123;</span><br><span class="line">        String username = ((PasswordCredential) credential).getId();</span><br><span class="line">        String password = ((PasswordCredential) credential).getPassword();</span><br><span class="line">        <span class="comment">// Use id and password to send to your server to validate and authenticate</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (credential instanceof CustomCredential) &#123;</span><br><span class="line">        <span class="keyword">if</span> (GoogleIdTokenCredential.TYPE_GOOGLE_ID_TOKEN_CREDENTIAL.<span class="keyword">equals</span>(credential.getType())) &#123;</span><br><span class="line">            <span class="comment">// Use googleIdTokenCredential and extract id to validate and</span></span><br><span class="line">            <span class="comment">// authenticate on your server</span></span><br><span class="line">            GoogleIdTokenCredential googleIdTokenCredential = GoogleIdTokenCredential.createFrom(credential.getData());</span><br><span class="line">            String idToken = googleIdTokenCredential.getIdToken();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JSONObject googleLoginInfoReturn = <span class="keyword">new</span> JSONObject();</span><br><span class="line">                googleLoginInfoReturn.put(<span class="string">&quot;id&quot;</span>, googleIdTokenCredential.getId());</span><br><span class="line">                googleLoginInfoReturn.put(<span class="string">&quot;name&quot;</span>,googleIdTokenCredential.getDisplayName());</span><br><span class="line">                googleLoginInfoReturn.put(<span class="string">&quot;photo&quot;</span>,googleIdTokenCredential.getProfilePictureUri());</span><br><span class="line">                googleLoginInfoReturn.put(<span class="string">&quot;token&quot;</span>,idToken);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;handleSignIn: &quot;</span>+ googleLoginInfoReturn);</span><br><span class="line">                sendTip(<span class="string">&quot;登录成功!&quot;</span>);</span><br><span class="line">                UnityPlayer.UnitySendMessage(<span class="string">&quot;Canvas&quot;</span>,<span class="string">&quot;OnLoginSuccess&quot;</span>,googleLoginInfoReturn.toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;handleSignIn: &quot;</span>, e);</span><br><span class="line">                sendTip(<span class="string">&quot;用户信息解析异常!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Catch any unrecognized custom credential type here.</span></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;handleSignIn: Unexpected type of credential&quot;</span>);</span><br><span class="line">            sendTip(<span class="string">&quot;未知的登录方式!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Catch any unrecognized credential type here.</span></span><br><span class="line">        Log.d(TAG, <span class="string">&quot;handleSignIn: Unexpected type of credential&quot;</span>);</span><br><span class="line">        sendTip(<span class="string">&quot;未知的登录方式!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>视频</strong></p><p>Google登录SDK</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/141716917">https://blog.csdn.net/hgf1037882434/article/details/141716917</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> android </tag>
            
            <tag> unity </tag>
            
            <tag> 游戏 </tag>
            
            <tag> sdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>继承实现单例模式的探索（一）</title>
      
      <link href="/2025/05/04/2025-05-04-%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>之前看到朋友采用继承的方式来实现单例模式，觉得很厉害，随后自己去探索了一番，以前实现单例模式都是把代码内联到具体的类中，这使得工程中每次需要使用单例模式时，都采用拷贝的方式，增加了很多冗余代码，并且难以规范单例的统一标准，使得代码不方便扩展和管理。这次探索找到了一种实现方式，先记录下来，后续如果有其它方式再发表系列文章，示例代码为C#。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a><strong>v1.0</strong></h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例模式基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>单例类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span>, <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance =&gt; _instance.Value;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">bool</span> _unlock;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;T&gt; _instance = <span class="keyword">new</span> Lazy&lt;T&gt;(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        _unlock = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_unlock)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Singleton:The ctor is proxied by singleton and cannot be called from outside.&quot;</span>);</span><br><span class="line">        _unlock = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a><strong>v1.1</strong></h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例模式基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>单例类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span>, <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance =&gt; _instance.Value;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">bool</span> _unlock;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;T&gt; _instance = <span class="keyword">new</span> Lazy&lt;T&gt;(Create);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">Create</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _unlock = <span class="literal">true</span>;</span><br><span class="line">        T item = <span class="keyword">new</span> T();</span><br><span class="line">        _unlock = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_unlock)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Singleton:The ctor is proxied by singleton and cannot be called from outside.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><table><thead><tr><th>优点</th><th>1.通过继承实现单例； 2.可以通过单例基类规范统一标准； 3.线程安全； 4.无法通过除单例基类提供的静态属性instance以外的其它方式获取其派生类实例，外部通过new关键字显示调用构造函数或反射等其它获取实例的方式创建派生类实例将触发异常； 5.派生类的无参构造函数用于初始化； 6.按需加载，延迟初始化。</th></tr></thead><tbody><tr><td>缺点</td><td>1.要求派生类的无参构造函数公开； 2.派生类对外部始终开放无参构造函数，无法避免new关键字的显式调用所触发的异常；</td></tr></tbody></table><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><table><thead><tr><th>V1.1</th><th>1.将延迟初始化的工厂方法从Lambda表达式替换为本地静态方法，因为_unlock相对于Lazy<T>是外部引用，所以不可避免存在创建闭包的开销，所以改为本地静态方法进行改进； 2._unlock在构造函数中进行重置会存在线程安全的问题，放在作为延迟初始化的工厂方法的本地静态方法中可以保证线程安全。</th></tr></thead><tbody><tr><td>……</td><td></td></tr></tbody></table><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p><a href="https://blog.csdn.net/hgf1037882434/article/details/142613636" title="继承实现单例模式的探索（二）">继承实现单例模式的探索（二）</a></p><p><a href="https://blog.csdn.net/hgf1037882434/article/details/128044569" title="单例模式">单例模式</a></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/142595573">https://blog.csdn.net/hgf1037882434/article/details/142595573</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> 单例模式 </tag>
            
            <tag> 个人研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>继承实现单例模式的探索（二）</title>
      
      <link href="/2025/05/04/2025-05-04-%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本篇文章继续探索通过继承实现单例模式的可行方案，这次的方案将采用反射机制隐式创建派生类实例，示例代码为C#。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a><strong>v1.0</strong></h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例模式基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>单例类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance =&gt; _instance.Value;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;T&gt; _instance = <span class="keyword">new</span> Lazy&lt;T&gt;(Create);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable CS8603</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">Create</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Activator.CreateInstance(<span class="keyword">typeof</span>(T),</span><br><span class="line">        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,</span><br><span class="line">        <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>) <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore CS8603</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例模式基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>单例类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance =&gt; _instance?.Value;</span><br><span class="line">    <span class="keyword">static</span> Lazy&lt;T&gt; _instance = <span class="keyword">new</span> Lazy&lt;T&gt;(Create);</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">bool</span> _isReleased = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">Create</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Activator.CreateInstance(<span class="keyword">typeof</span>(T),</span><br><span class="line">        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,</span><br><span class="line">        <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>) <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Release</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isReleased) <span class="keyword">return</span>;</span><br><span class="line">        _isReleased = <span class="literal">true</span>;</span><br><span class="line">        OnRelease();</span><br><span class="line">        _instance = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnRelease</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例模式基类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>单例类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;I&quot;&gt;</span>单例类型的接口类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>, <span class="title">I</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span>, <span class="title">I</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">I</span> : <span class="title">ISingleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> I instance =&gt; _instance?.Value;</span><br><span class="line">    <span class="keyword">static</span> Lazy&lt;T&gt; _instance = <span class="keyword">new</span> Lazy&lt;T&gt;(Create);</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">bool</span> _isReleased = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> T <span class="title">Create</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Activator.CreateInstance(<span class="keyword">typeof</span>(T),</span><br><span class="line">        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,</span><br><span class="line">        <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>) <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Release</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isReleased) <span class="keyword">return</span>;</span><br><span class="line">        _isReleased = <span class="literal">true</span>;</span><br><span class="line">        OnRelease();</span><br><span class="line">        _instance = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnRelease</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 单例接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISingleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Release</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h4><table><thead><tr><th>优点</th><th>1.继承实现单例模式； 2.按需加载，延迟初始化； 3.线程安全； 4.可以通过单例基类规范统一标准； 5.派生类的无参构造函数用于初始化； 6.将派生类实例创建权限交由派生类本身决定，通常，为遵循单例模式的原则应向外部关闭通过new关键字显式调用构造函数的权限，但这对派生类而言并非硬性要求；</th></tr></thead><tbody><tr><td>缺点</td><td>1.反射开销； 2.派生类必须具备无参构造函数，且无参构造函数需要向单例基类提供可进行反射访问的权限；</td></tr></tbody></table><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><blockquote><p>1.在使用单例时应统一通过”类名.instance”的方式访问，而不应为单例所代理的实例创建引用副本，例如单例类型为T，”static T instance &#x3D; 类名.instance”的用法是不推荐的，因为单例通过Release方法显式释放后，其代理的实例也应向GC标记为回收，而外部继续保持其引用则会阻止回收并可能因此导致其它问题，例如所代理的实例包含非托管资源时，若外部引用未进行显式释放则会导致内存泄漏。Release方法的本质在于向外部提供提前释放单例的途径，但并不能完全保证其所代理的实例一定会立刻释放，这取决于是否存在上述情况。</p><hr><p>2.在显式调用Release方法释放单例后，不应也不能再继续使用该单例，否则会触发空引用的异常。</p><hr><p>3.对于包含非托管资源的单例派生类应该在OnRelease回调方法和析构函数（终结器）中管理托管和非托管资源的释放，可以参考C#官网对于IDisposable对象的标准写法。</p></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><table><thead><tr><th>版本号</th><th><strong>改进内容</strong></th></tr></thead><tbody><tr><td>v1.1</td><td>1.添加了以接口类型公开单例对象的基类； 2.添加了显式释放单例的方法及其回调。</td></tr><tr><td>…</td><td>……</td></tr></tbody></table><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p><a href="https://blog.csdn.net/hgf1037882434/article/details/142595573" title="继承实现单例模式的探索（一）">继承实现单例模式的探索（一）</a></p><p><a href="https://blog.csdn.net/hgf1037882434/article/details/128044569" title="单例模式">单例模式</a></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/142613636">https://blog.csdn.net/hgf1037882434/article/details/142613636</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> 单例模式 </tag>
            
            <tag> 个人研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Monobehaviour单例实现的探索（一）</title>
      
      <link href="/2025/05/04/2025-05-04-Monobehaviour%E5%8D%95%E4%BE%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-Monobehaviour%E5%8D%95%E4%BE%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>在Unity3D游戏开发中，Monobehaviour单例模式是常见的设计模式之一，具有广泛的应用需求。本篇文章参考自一位外国友人的代码，让我们学习一下他的设计思路吧。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 非持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 会在场景卸载或程序退出等销毁机制中进行销毁</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span> &#123; instance = <span class="keyword">this</span> <span class="keyword">as</span> T; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnApplicationQuit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        instance = <span class="literal">null</span>;</span><br><span class="line">        Destroy(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 会在场景卸载的销毁机制中保留</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingletonPersistant</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="literal">null</span>) Destroy(gameObject);</span><br><span class="line">        DontDestroyOnLoad(gameObject);</span><br><span class="line">        <span class="keyword">base</span>.Awake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 非持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>在Awake中争取静态属性的指向，未争取到的实例将被标记为待销毁对象<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>只要对象处于过激活状态，被销毁时就会触发OnDestroy回调，检查静态属性的指向并可能进行重置<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">        <span class="keyword">else</span> Destroy(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span> &#123; <span class="keyword">if</span> (<span class="keyword">this</span> == instance) instance = <span class="literal">null</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在场景卸载过程中保留</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingletonPersistant</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Awake();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == instance) DontDestroyOnLoad(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-2"><a href="#v1-2" class="headerlink" title="v1.2"></a>v1.2</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 非持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T instance =&gt; _instance;</span><br><span class="line">    <span class="keyword">static</span> T _instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReferenceEquals(_instance, <span class="literal">null</span>)) _instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">        <span class="keyword">else</span> Destroy(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReferenceEquals(<span class="keyword">this</span>, _instance))</span><br><span class="line">            _instance = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 非持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;I&quot;&gt;</span>待封装为单例的类型的接口类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>, <span class="title">I</span>&gt; : <span class="title">MonoBehaviour</span></span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span>, <span class="title">I</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> I instance =&gt; _instance;</span><br><span class="line">    <span class="keyword">static</span> T _instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReferenceEquals(_instance, <span class="literal">null</span>)) _instance = <span class="keyword">this</span> <span class="keyword">as</span> T;</span><br><span class="line">        <span class="keyword">else</span> Destroy(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReferenceEquals(<span class="keyword">this</span>, _instance))</span><br><span class="line">            _instance = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingletonPersistant</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Awake();</span><br><span class="line">        <span class="keyword">if</span> (ReferenceEquals(<span class="keyword">this</span>, instance)) DontDestroyOnLoad(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 持久化单例</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>待封装为单例的类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;I&quot;&gt;</span>待封装为单例的类型的接口类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingletonPersistant</span>&lt;<span class="title">T</span>, <span class="title">I</span>&gt; : <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>, <span class="title">I</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span>, <span class="title">I</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Awake();</span><br><span class="line">        <span class="keyword">if</span> (ReferenceEquals(<span class="keyword">this</span>, instance)) DontDestroyOnLoad(gameObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><strong>MonoSingleton</strong></p><blockquote><ul><li>遵循Unity Monobehaviour脚本的生命周期，该单例有效调用的生命周期起始于Awake，终止于该单例被显式销毁或场景卸载前；</li><li>该单例与多数游戏对象相似，与场景共存，场景卸载时则单例销毁，场景加载时则单例创建，不同的地方在于该单例提供了一个静态属性使得在有效调用的生命周期内可以正确访问该单例；</li><li>该单例应尽量避免跨场景调用，例如存在多个激活的场景，当单例被销毁时，其它场景调用则会导致空引用的异常，除非开发者能很好地管理该单例的调用，但多数时候依旧不建议这么做；</li><li>当在所激活场景中存在多个该单例所代理的同类型Monobehaviour脚本时，单例的静态属性的指向可能是不明确的，并且这往往只能由开发者人为去避免或者进行统一管理，尽管存在这种情况，往往也不会触发显式异常，因为这仅仅是在逻辑上不符合单例模式的唯一原则，并非不符合编译时规范。</li><li>在OnApplicationQuit中显式销毁单例，是因为静态属性的生命周期大于该单例有效调用的生命周期，当存在其它调用者在有效调用生命周期外调用单例时会阻止单例的销毁使其滞留内存，从而导致内存泄漏的问题；</li><li>使用该单例应明确有效调用的生命周期，且保持在该生命周期内进行调用，从而避免引发不必要的异常；</li></ul></blockquote><p><strong>MonoSingletonPersistant</strong></p><blockquote><ul><li>该单例在所代理的不同Monobehaviour脚本挂载同一游戏对象的情景中表现不太灵活，除非各Monobehaviour脚本具有共同的生命周期，例如某个单例在之前的场景保持持久化，在该场景特定时机需要销毁不再使用，此时会直接销毁其所挂载的游戏对象，致使其它单例一同销毁；</li><li>在初次实例化单例时，若同一活动场景中存在多个该单例所代理的Monobehaviour脚本，虽然会显式通过Destroy方法标记待销毁的重复实例，但是却继续执行”DontDestroyOnLoad(gameObject);”和”base.Awake();”，通常标记为待销毁的对象我们不应该继续使用，虽然它在本帧最后进行销毁，且不说DontDestroyOnLoad(gameObject)是矛盾的调用，base.Awake()中会导致单例的静态属性指向待销毁对象的Monobehaviour脚本实例，使得原本不会被销毁的Monobehaviour脚本实例的引用丢失；</li><li>若初次实例化单例时，活动场景仅存在一个其所代理的实例，当进入新的活动场景时如果存在重复实例，也会导致第二点所述问题；</li><li>因持久化的特性，该单例可以进行跨场景调用；</li><li>该单例有效调用的生命周期起始于Awake，终止于其显式销毁；</li></ul></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><table><thead><tr><th>版本号</th><th><strong>改进内容</strong></th></tr></thead><tbody><tr><td>v1.1</td><td>1.单例的静态属性指向采用”先到先得”的原则，取决于同类型实例Awake方法执行的顺序，优先获取静态属性指向的实例在销毁前始终不允许被替换，其它未获取指向的实例均会被销毁，以遵循单例唯一原则； 2.重复实例销毁机制改用销毁组件而非其所挂载的游戏对象，降低销毁所影响的范围； 3.静态属性指向重置仅在OnDestroy回调函数中进行，且仅针对拥有该静态属性指向的实例进行销毁才会进行重置，对于非持久单例通常发生于场景卸载或显式销毁，对于持久化单例通常发生于程序退出或显式销毁； 4.对持久化单例在1.0版本中存在的问题进行了修复。</td></tr><tr><td>v1.2</td><td>1.分别添加了以接口类型开放单例对象的单例基类； 2.实例比较方式更改为ReferenceEquals方法；</td></tr><tr><td>…</td><td>……</td></tr></tbody></table><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p>……</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/142627185">https://blog.csdn.net/hgf1037882434/article/details/142627185</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>字段临时缓存包装器</title>
      
      <link href="/2025/05/04/2025-05-04-%E5%AD%97%E6%AE%B5%E4%B8%B4%E6%97%B6%E7%BC%93%E5%AD%98%E5%8C%85%E8%A3%85%E5%99%A8/"/>
      <url>/2025/05/04/2025-05-04-%E5%AD%97%E6%AE%B5%E4%B8%B4%E6%97%B6%E7%BC%93%E5%AD%98%E5%8C%85%E8%A3%85%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>在实际开发中，我们有时候存在一种需求，例如对于某个字段，我们希望在某个明确的保存节点前对字段的修改都仅作为缓存保留，最终是否应用这些修改取决于某些条件，比如玩家对游戏设置的修改可能需要玩家明确确认应用修改后才会保存下来，在此之前玩家在游戏界面上的所有修改都是临时的。</p><hr><p>本文基于这个需求探索出了一种解决方案——“临时缓存包装器”，通过创建字段或用于存储字段临时数据的数据结构的副本来实现临时缓存，虽然我们同样可以采用直接声明一个同类型的新字段的方式来达到同样的目的，但是这可能会增加冗余代码，且不利于代码的维护，通过包装器来封装临时缓存的通用逻辑，从而与具体业务逻辑进行隔离。</p><hr><p><strong>简介：</strong> 该类的开发目的是用于给指定类型的源字段创建副本并将其作为源字段的临时缓存，通过该包装器对副本进行一系列的修改，调用者可以在任何需要的时候从该包装器中读取到新的修改，也可以通过解包的方法将副本数据同步到源字段。</p><p><strong>具体功能：</strong></p><ul><li>创建包装器的方式包括二进制包装、JSON包装和自定义创建，分别对应三个静态方法。</li><li>解包方式分为二进制解包和JSON解包，分别对应两个实例方法。</li><li>1.2版本开始仅提供一个基本属性——缓存字段，确认是否为值类型、缓存字段的引用等属性被弃用。</li><li>提供了手动释放包装器的方法，可以在不需要时通知 GC 来释放资源。</li></ul></blockquote><blockquote><p><strong>其它说明：</strong></p><ul><li>二进制包装和解包实际上是采用的二进制序列化和反序列化，JSON包装和解包则采用的JSON序列化和反序列化。</li><li>临时包装器适用于引用类型，1.2版本开始将不再支持包装值类型。</li><li>释放包装器后，所有实例成员的访问将会触发无效操作的异常。</li></ul></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">```csharp</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 临时包装器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>字段类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 该类主要用于创造某个字段的副本作为该字段的临时缓存，避免直接修改源字段。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempWrapper</span>&lt;<span class="title">T</span>&gt; : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否为值类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：若为true则表示包装字段为值类型，否则为引用类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> isValueType =&gt; _isValueType;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 缓存字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：对于值类型而言，该属性涉及拷贝<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">value</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line">            _value = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取引用</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：对于值类型而言，该属性直接返回引用从而避免拷贝<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">ref</span> T refrence</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">ref</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否已经释放</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isDisposed =&gt; _isDisposed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">bool</span> _isValueType = <span class="keyword">typeof</span>(T).IsValueType;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">bool</span> _isDisposable = <span class="keyword">typeof</span>(IDisposable).IsAssignableFrom(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _key = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    T _value;</span><br><span class="line">    <span class="built_in">bool</span> _isDisposed;</span><br><span class="line"></span><br><span class="line">    TempWrapper() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装字段的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用二进制序列化和反序列化生成字段副本<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该方法仅可用于被 <span class="doctag">&lt;c&gt;</span>Serializable<span class="doctag">&lt;/c&gt;</span> 标记的字段类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_isValueType) wrapper._value = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">                    &#123;</span><br><span class="line">                        IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                        formatter.Serialize(ms, <span class="keyword">value</span>);</span><br><span class="line">                        ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">                        wrapper._value = (T)formatter.Deserialize(ms);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用JSON序列化和反序列化生成字段副本<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装字段的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_isValueType) wrapper._value = <span class="keyword">value</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> jsonStr = JsonConvert.SerializeObject(<span class="keyword">value</span>);</span><br><span class="line">                    wrapper._value = JsonConvert.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装生成器所生成的字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;creator&quot;&gt;</span>生成器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByCustom</span>(<span class="params">Func&lt;T&gt; creator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;() &#123; _value = creator() &#125;;</span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用二进制序列化和反序列化解包<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该方法仅可用于被 <span class="doctag">&lt;c&gt;</span>Serializable<span class="doctag">&lt;/c&gt;</span> 标记的字段类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnWrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isValueType) <span class="keyword">value</span> = _value;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (_key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">                &#123;</span><br><span class="line">                    IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                    formatter.Serialize(ms, _value);</span><br><span class="line">                    ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">                    <span class="keyword">value</span> = (T)formatter.Deserialize(ms);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用JSON序列化和反序列化解包<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isValueType) <span class="keyword">value</span> = _value;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (_key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> jsonStr = JsonConvert.SerializeObject(_value);</span><br><span class="line">                <span class="keyword">value</span> = JsonConvert.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放包装器所包装的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：当所包装字段实现了IDisposable接口时该方法才有效<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        DoDispose(<span class="literal">true</span>);</span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoDispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        _isDisposed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (disposing &amp;&amp; _isDisposable &amp;&amp; _value <span class="keyword">is</span> IDisposable ds)</span><br><span class="line">            ds.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~TempWrapper()</span><br><span class="line">    &#123;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```<span class="function">csharp</span></span><br><span class="line"><span class="function">    <span class="title">DoDispose</span>(<span class="params"><span class="literal">false</span></span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```csharp</span><br><span class="line">```csharp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```csharp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line">##### v1.1 </span><br><span class="line">```csharp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line">using Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 临时包装器</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;typeparam name=&quot;T&quot;&gt;字段类型&lt;/typeparam&gt;</span><br><span class="line">/// &lt;remarks&gt;</span><br><span class="line">/// 该类主要用于创造某个字段的副本作为该字段的临时缓存，避免直接修改源字段。</span><br><span class="line">/// &lt;/remarks&gt;</span><br><span class="line">public class TempWrapper&lt;T&gt; : IDisposable</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 是否为值类型</span><br><span class="line">    /// &lt;para&gt;提示：若为true则表示包装字段为值类型，否则为引用类型&lt;/para&gt;</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public static bool isValueType =&gt; _isValueType;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 缓存字段</span><br><span class="line">    /// &lt;para&gt;提示：对于值类型而言，该属性涉及拷贝&lt;/para&gt;</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public T value</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (_isDisposed) throw new InvalidOperationException(&quot;The wrapper is disposed.&quot;);</span><br><span class="line">            return _value;</span><br><span class="line">        &#125;</span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            if (_isDisposed) throw new InvalidOperationException(&quot;The wrapper is disposed.&quot;);</span><br><span class="line">            _value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取引用</span><br><span class="line">    /// &lt;para&gt;提示：对于值类型而言，该属性直接返回引用从而避免拷贝&lt;/para&gt;</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public ref T refrence</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (_isDisposed) throw new InvalidOperationException(&quot;The wrapper is disposed.&quot;);</span><br><span class="line">            return ref _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static readonly bool _isValueType = typeof(T).IsValueType;</span><br><span class="line">    static readonly bool _isDisposable = typeof(IDisposable).IsAssignableFrom(typeof(T));</span><br><span class="line">    static readonly object _key = new object();</span><br><span class="line">    T _value;</span><br><span class="line">    bool _isDisposed;</span><br><span class="line"></span><br><span class="line">    TempWrapper() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 包装指定字段并返回包装类</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;value&quot;&gt;待包装字段的引用&lt;/param&gt;</span><br><span class="line">    /// &lt;remarks&gt;</span><br><span class="line">    /// &lt;para&gt;提示：采用二进制序列化和反序列化生成字段副本&lt;/para&gt;</span><br><span class="line">    /// &lt;para&gt;提示：该方法仅可用于被 &lt;c&gt;Serializable&lt;/c&gt; 标记的字段类型&lt;/para&gt;</span><br><span class="line">    /// &lt;/remarks&gt;</span><br><span class="line">    public static TempWrapper&lt;T&gt; WrapByBinary(ref T value)</span><br><span class="line">    &#123;</span><br><span class="line">        lock (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = new TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                if (_isValueType) wrapper._value = value;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    using (MemoryStream ms = new MemoryStream())</span><br><span class="line">                    &#123;</span><br><span class="line">                        IFormatter formatter = new BinaryFormatter();</span><br><span class="line">                        formatter.Serialize(ms, value);</span><br><span class="line">                        ms.Seek(0, SeekOrigin.Begin);</span><br><span class="line">                        wrapper._value = (T)formatter.Deserialize(ms);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new InvalidOperationException(&quot;Failed to wrap.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 包装指定字段并返回包装类</span><br><span class="line">    /// &lt;para&gt;提示：采用JSON序列化和反序列化生成字段副本&lt;/para&gt;</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;value&quot;&gt;待包装字段的引用&lt;/param&gt;</span><br><span class="line">    public static TempWrapper&lt;T&gt; WrapByJson(ref T value)</span><br><span class="line">    &#123;</span><br><span class="line">        lock (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = new TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                if (_isValueType) wrapper._value = value;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    string jsonStr = JsonConvert.SerializeObject(value);</span><br><span class="line">                    wrapper._value = JsonConvert.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                return wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new InvalidOperationException(&quot;Failed to wrap.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 包装生成器所生成的字段并返回包装类</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;creator&quot;&gt;生成器&lt;/param&gt;</span><br><span class="line">    public static TempWrapper&lt;T&gt; WrapByCustom(Func&lt;T&gt; creator)</span><br><span class="line">    &#123;</span><br><span class="line">        lock (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = new TempWrapper&lt;T&gt;() &#123; _value = creator() &#125;;</span><br><span class="line">                return wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new InvalidOperationException(&quot;Failed to wrap.&quot;, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 解包包装器并赋值给指定的字段</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;remarks&gt;</span><br><span class="line">    /// &lt;para&gt;提示：采用二进制序列化和反序列化解包&lt;/para&gt;</span><br><span class="line">    /// &lt;para&gt;提示：该方法仅可用于被 &lt;c&gt;Serializable&lt;/c&gt; 标记的字段类型&lt;/para&gt;</span><br><span class="line">    /// &lt;/remarks&gt;</span><br><span class="line">    public void UnWrapByBinary(ref T value)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_isDisposed) throw new InvalidOperationException(&quot;The wrapper is disposed.&quot;);</span><br><span class="line"></span><br><span class="line">        if (_isValueType) value = _value;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            using (MemoryStream ms = new MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                IFormatter formatter = new BinaryFormatter();</span><br><span class="line">                formatter.Serialize(ms, _value);</span><br><span class="line">                ms.Seek(0, SeekOrigin.Begin);</span><br><span class="line">                value = (T)formatter.Deserialize(ms);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 解包包装器并赋值给指定的字段</span><br><span class="line">    /// &lt;para&gt;提示：采用JSON序列化和反序列化解包&lt;/para&gt;</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public void UnwrapByJson(ref T value)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_isDisposed) throw new InvalidOperationException(&quot;The wrapper is disposed.&quot;);</span><br><span class="line"></span><br><span class="line">        if (_isValueType) value = _value;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            string jsonStr = JsonConvert.SerializeObject(_value);</span><br><span class="line">            value = JsonConvert.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 释放包装器所包装的字段</span><br><span class="line">    /// &lt;para&gt;提示：当所包装字段实现了IDisposable接口时该方法才有效&lt;/para&gt;</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public void Dispose()</span><br><span class="line">    &#123;</span><br><span class="line">        if (_isDisposed) throw new InvalidOperationException(&quot;The wrapper is disposed.&quot;);</span><br><span class="line"></span><br><span class="line">        DoDispose(true);</span><br><span class="line">        GC.SuppressFinalize(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoDispose(bool disposing)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_isDisposed) return;</span><br><span class="line"></span><br><span class="line">        _isDisposed = true;</span><br><span class="line">        if (disposing &amp;&amp; _isDisposable &amp;&amp; _value is IDisposable ds)</span><br><span class="line">            ds.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~TempWrapper()</span><br><span class="line">    &#123;</span><br><span class="line">        DoDispose(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-2"><a href="#v1-2" class="headerlink" title="v1.2"></a>v1.2</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 临时包装器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>字段类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提示：该类主要用于创造某个字段的副本作为该字段的临时缓存</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempWrapper</span>&lt;<span class="title">T</span>&gt; : <span class="title">IDisposable</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 缓存字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">value</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">bool</span> _isDisposable = <span class="keyword">typeof</span>(IDisposable).IsAssignableFrom(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _key = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    T _value;</span><br><span class="line">    <span class="built_in">bool</span> _isDisposed;</span><br><span class="line"></span><br><span class="line">    TempWrapper() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装字段的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用二进制序列化和反序列化生成字段副本<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该方法仅可用于被 <span class="doctag">&lt;c&gt;</span>Serializable<span class="doctag">&lt;/c&gt;</span> 标记的字段类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">                &#123;</span><br><span class="line">                    IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                    formatter.Serialize(ms, <span class="keyword">value</span>);</span><br><span class="line">                    ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">                    wrapper._value = (T)formatter.Deserialize(ms);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用JSON序列化和反序列化生成字段副本<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装字段的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> jsonStr = JsonConvert.SerializeObject(<span class="keyword">value</span>);</span><br><span class="line">                wrapper._value = JsonConvert.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装生成器所生成的字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;creator&quot;&gt;</span>字段生成器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByCustom</span>(<span class="params">Func&lt;T&gt; creator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;() &#123; _value = creator() &#125;;</span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用二进制序列化和反序列化解包<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该方法仅可用于被 <span class="doctag">&lt;c&gt;</span>Serializable<span class="doctag">&lt;/c&gt;</span> 标记的字段类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                formatter.Serialize(ms, _value);</span><br><span class="line">                ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">                <span class="keyword">value</span> = (T)formatter.Deserialize(ms);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to unwrap.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用JSON序列化和反序列化解包<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = JsonConvert.SerializeObject(_value);</span><br><span class="line">            <span class="keyword">value</span> = JsonConvert.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to unwrap.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放包装器所包装的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：当所包装字段实现了IDisposable接口时该方法才有效<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DoDispose(<span class="literal">true</span>);</span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoDispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        _isDisposed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (disposing &amp;&amp; _isDisposable &amp;&amp; _value <span class="keyword">is</span> IDisposable ds)</span><br><span class="line">            ds.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~TempWrapper()</span><br><span class="line">    &#123;</span><br><span class="line">        DoDispose(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-3"><a href="#v1-3" class="headerlink" title="v1.3"></a>v1.3</h5><p>【ITempWrapperJsonHandler.cs】</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 临时缓存包装器的 JSON 序列化和反序列化接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该接口主要用来接引 JSON 序列化和反序列化的第三方库<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITempWrapperJsonHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 将指定对象序列化为 JSON 字符串</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">SerializeObject</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 根据 JSON 字符串反序列化为指定类型的对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>JSON 字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">T <span class="title">DeserializeObject</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> <span class="keyword">value</span></span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【TempWrapper.cs】</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 临时包装器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>字段类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提示：该类主要用于创造某个字段的副本作为该字段的临时缓存</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempWrapper</span>&lt;<span class="title">T</span>&gt; : <span class="title">IDisposable</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 缓存字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">value</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">bool</span> _isDisposable = <span class="keyword">typeof</span>(IDisposable).IsAssignableFrom(<span class="keyword">typeof</span>(T));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _key = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    T _value;</span><br><span class="line">    <span class="built_in">bool</span> _isDisposed;</span><br><span class="line">    ITempWrapperJsonHandler _jsonHandler;</span><br><span class="line"></span><br><span class="line">    TempWrapper() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装字段的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用二进制序列化和反序列化生成字段副本<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该方法仅可用于被 <span class="doctag">&lt;c&gt;</span>Serializable<span class="doctag">&lt;/c&gt;</span> 标记的字段类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">                &#123;</span><br><span class="line">                    IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                    formatter.Serialize(ms, <span class="keyword">value</span>);</span><br><span class="line">                    ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">                    wrapper._value = (T)formatter.Deserialize(ms);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用JSON序列化和反序列化生成字段副本<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装字段的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span>, ITempWrapperJsonHandler handler</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> jsonStr = handler.SerializeObject(<span class="keyword">value</span>);</span><br><span class="line">                wrapper._value = handler.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">                wrapper._jsonHandler = handler;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装生成器所生成的字段并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;creator&quot;&gt;</span>字段生成器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByCustom</span>(<span class="params">Func&lt;T&gt; creator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;() &#123; _value = creator() &#125;;</span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用二进制序列化和反序列化解包<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：该方法仅可用于被 <span class="doctag">&lt;c&gt;</span>Serializable<span class="doctag">&lt;/c&gt;</span> 标记的字段类型<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                formatter.Serialize(ms, _value);</span><br><span class="line">                ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">                <span class="keyword">value</span> = (T)formatter.Deserialize(ms);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to unwrap.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：采用JSON序列化和反序列化解包<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = _jsonHandler.SerializeObject(_value);</span><br><span class="line">            <span class="keyword">value</span> = _jsonHandler.DeserializeObject&lt;T&gt;(jsonStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to unwrap.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放包装器所包装的字段</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：当所包装字段实现了IDisposable接口时该方法才有效<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;The wrapper is disposed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DoDispose(<span class="literal">true</span>);</span><br><span class="line">        GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoDispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        _isDisposed = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (disposing &amp;&amp; _isDisposable &amp;&amp; _value <span class="keyword">is</span> IDisposable ds)</span><br><span class="line">            ds.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~TempWrapper()</span><br><span class="line">    &#123;</span><br><span class="line">        DoDispose(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="v1-4"><a href="#v1-4" class="headerlink" title="v1.4"></a>v1.4</h5><p>【ISerializer.cs】</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 通用序列化处理器接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;D&quot;&gt;</span>序列化处理的数据类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISerializer</span>&lt;<span class="title">D</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 序列化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>实体对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span>实体对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>序列化生成的数据<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">D <span class="title">Serialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 反序列化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>实体对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span>序列化生成的数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实体对象<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function">T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">D data</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【TempWrapper.cs】</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 临时包装器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提示：该类主要用于创造某个对象的副本作为该对象的临时缓存</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TempWrapper</span>&lt;<span class="title">T</span>&gt; : <span class="title">ITempWrapper</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 缓存对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">value</span> =&gt; _value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _key = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line">    ISerializer&lt;<span class="built_in">string</span>&gt; _jsonHandler;</span><br><span class="line">    ISerializer&lt;Stream&gt; _binaryHandler;</span><br><span class="line">    T _value;</span><br><span class="line">    <span class="built_in">bool</span> _released = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    TempWrapper() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定对象并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装对象的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>二进制序列化处理器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span>, ISerializer&lt;Stream&gt; handler</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line">                Stream stream = handler.Serialize(<span class="keyword">value</span>);</span><br><span class="line">                wrapper._value = handler.Deserialize&lt;T&gt;(stream);</span><br><span class="line">                wrapper._binaryHandler = handler;</span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装指定对象并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>待包装对象的引用<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;handler&quot;&gt;</span>JSON 序列化处理器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span>, ISerializer&lt;<span class="built_in">string</span>&gt; handler</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;();</span><br><span class="line">                <span class="built_in">string</span> jsonStr = handler.Serialize(<span class="keyword">value</span>);</span><br><span class="line">                wrapper._value = handler.Deserialize&lt;T&gt;(jsonStr);</span><br><span class="line">                wrapper._jsonHandler = handler;</span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 包装生成器所生成的对象并返回包装类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;creator&quot;&gt;</span>对象生成器<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempWrapper&lt;T&gt; <span class="title">WrapByCustom</span>(<span class="params">Func&lt;T&gt; creator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TempWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> TempWrapper&lt;T&gt;() &#123; _value = creator() &#125;;</span><br><span class="line">                <span class="keyword">return</span> wrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to wrap.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的引用</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByBinary</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Stream stream = _binaryHandler.Serialize(_value);</span><br><span class="line">            <span class="keyword">value</span> = _binaryHandler.Deserialize&lt;T&gt;(stream);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to unwrap.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解包包装器并赋值给指定的引用</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnwrapByJson</span>(<span class="params"><span class="keyword">ref</span> T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> jsonStr = _jsonHandler.Serialize(_value);</span><br><span class="line">            <span class="keyword">value</span> = _jsonHandler.Deserialize&lt;T&gt;(jsonStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Failed to unwrap.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放包装器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Release</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_released) <span class="keyword">return</span>;</span><br><span class="line">        _released = <span class="literal">true</span>;</span><br><span class="line">        _jsonHandler = <span class="literal">null</span>;</span><br><span class="line">        _binaryHandler = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (_value <span class="keyword">is</span> IDisposable ds) ds.Dispose();</span><br><span class="line">        _value = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote><p>字段临时缓存包装器有三种包装字段的方式，分别是WrapByBinary、WrapByJson和WrapByCustom，三种方式各有优缺点，择优而用。WrapByBinary采用二进制序列化和反序列化生成字段副本，该方法仅可用于被 <strong>Serializable</strong> 标记的字段类型。WrapByJson采用JSON序列化和反序列化生成字段副本，它虽然比前者包装范围更广，但是不可避免可能会依赖第三方用于JSON序列化和反序列化的库。WrapByCustom则是对前两种方式的补充，当前两种方式都不适用时，则可以自定义包装方式，例如对于Unity对象来说，需要通过Instantiate方法创建对象副本，这个时候就只能用自定义的方法进行包装。</p><hr><p>返回的包装器提供了一些属性和方法，提供了针对WrapByBinary和WrapByJson包装方法的解包方法，还提供了显式释放包装器的方法。解包方法用于将临时缓存的数据重新写入被包装字段中。通过显式释放包装器可以保证那些使用了非托管资源的类型（实现了IDisposable接口）进行资源的释放工作，从而避免内存泄漏等问题。</p><hr><p>但是该包装器存在一些不可避免的限制，若所包装字段越复杂，其性能消耗越高，这是不可避免的。</p><hr><p><strong>注意：</strong> 不要使用包装器去包装其声明所在的类，特别是对于自定义包装逻辑要避免无限递归，否则会导致栈溢出或内存泄漏问题。示例代码如下：</p><pre><code>// 该方法将导致栈溢出public class A&#123;    TempWrapper&lt;A&gt; wrapper;    public A()    &#123;        wrapper = TempWrapper&lt;A&gt;.WrapByCustom(() =&gt; new A());    &#125;&#125;// 该方法将导致内存泄漏public class B:Monobehaviour&#123;    TempWrapper&lt;Transform&gt; wrapper;        void Awake()    &#123;        // Instantiate方法去克隆当前组件对象的Transform组件就会导致无限递归        wrapper = TempWrapper&lt;Transform&gt;.WrapByCustom(() =&gt; Instantiate(transform));    &#125;&#125;</code></pre></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><table><thead><tr><th>版本号</th><th>改进内容</th></tr></thead><tbody><tr><td><strong>v1.1</strong></td><td>1.实例方法不使用线程锁，仅对静态方法使用线程锁； 2.手动执行Dispose方法释放包装器后，所有对公开实例成员的访问都将触发异常； 3.删除IsDisposed属性；</td></tr><tr><td><strong>v1.2</strong></td><td>1.添加了引用类型泛型限制，弃用对值类型包装的支持； 2.关闭了value属性的set访问器，避免外部更改包装器所代理的字段，保持包装器状态的不变性，可变引用类型的内部状态不受约束，若开启set访问器可能导致内存泄漏的问题； 3.为解包方法添加了异常捕捉；</td></tr><tr><td><strong>v1.3</strong></td><td>移除了对第三方Json库的直接依赖，而是改用接口来接引第三方Json库，这样可以避免对特定库的依赖，还可以灵活更换库。</td></tr><tr><td><strong>v1.4</strong></td><td>1.移除了对具体的二进制序列化和反序列化规则的依赖，而是改用接口来接引，使得可以进行灵活的扩展； 2.移除了对IDisposable接口的实现和析构函数，改用Release方法； 3.无论是Json还是二进制，均使用统一的规则接口ISerializer。</td></tr><tr><td>……</td><td>……</td></tr><tr><td>× 表示在指定版本已不受支持 字段、属性、方法</td><td>v1.0</td></tr><tr><td>—</td><td>—</td></tr><tr><td>isValueType</td><td>√</td></tr><tr><td>value</td><td>√</td></tr><tr><td>reference</td><td>√</td></tr><tr><td>isDisposed</td><td>√</td></tr><tr><td>WrapByBinary</td><td>√</td></tr><tr><td>WrapByJson</td><td>√</td></tr><tr><td>WrapByCustom</td><td>√</td></tr><tr><td>UnwrapByBinary</td><td>√</td></tr><tr><td>UnwrapByJson</td><td>√</td></tr><tr><td>Dispose</td><td>√</td></tr><tr><td>Release</td><td>×</td></tr></tbody></table><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p>……</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/142652083">https://blog.csdn.net/hgf1037882434/article/details/142652083</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 个人研究 </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 字段缓存 </tag>
            
            <tag> 包装器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>基于ScriptableObject设计游戏数据表</title>
      
      <link href="/2025/05/04/2025-05-04-%E5%9F%BA%E4%BA%8EScriptableObject%E8%AE%BE%E8%AE%A1%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
      <url>/2025/05/04/2025-05-04-%E5%9F%BA%E4%BA%8EScriptableObject%E8%AE%BE%E8%AE%A1%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本篇文章是针对之前对于ScriptableObject概念讲解的实际应用之一，在游戏开发中，我们可以使用该类来设计编辑器时的可读写数据表或者运行时的只读数据表。本文将针对运行时的只读数据表的应用进行探索，并且结合自定义的本地持久化存储方式使得基于ScriptableObject开发的数据表能够在运行时进行读写。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="代码目录结构"><a href="#代码目录结构" class="headerlink" title="代码目录结构"></a><strong>代码目录结构</strong></h5><blockquote><ul><li>Table <ul><li>Base</li><li>Editor</li><li>Interface</li><li>Unit</li></ul></li></ul></blockquote><blockquote><p>Table则为本模块的根目录，存储各个游戏数据表的脚本，Base目录存储数据表和游戏表基类，Editor目录存储数据表的编辑器脚本，Interface目录存储数据表和数据单元接口，Unit目录存储数据单元。</p></blockquote><h5 id="Base目录"><a href="#Base目录" class="headerlink" title="Base目录"></a><strong>Base目录</strong></h5><p>BaseTable.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 基础表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseTable</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 表类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Type mType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GameTable.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 游戏表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T0&quot;&gt;</span>表类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T1&quot;&gt;</span>表单元类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameTable</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>&gt; : <span class="title">BaseTable</span>, <span class="title">ITableHandler</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T0</span> : <span class="title">GameTable</span>&lt;<span class="title">T0</span>, <span class="title">T1</span>&gt;</span><br><span class="line"><span class="keyword">where</span> <span class="title">T1</span> : <span class="title">ITableUnit</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;是否自动控制加载和保存&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">bool</span> isAutoControl = <span class="literal">true</span>;</span><br><span class="line">    [<span class="meta">HideInInspector, SerializeField</span>] <span class="keyword">protected</span> T1[] units;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> disable CS0414</span></span><br><span class="line">    [<span class="meta">HideInInspector, SerializeField</span>] <span class="built_in">bool</span> isAutoSave = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span> restore CS0414</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">override</span> Type mType =&gt; <span class="keyword">typeof</span>(T0);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ReadOnlyCollection&lt;T1&gt; mUnits =&gt; Array.AsReadOnly(wrapper.<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mCount =&gt; wrapper.<span class="keyword">value</span> == <span class="literal">null</span> ? <span class="number">0</span> : wrapper.<span class="keyword">value</span>.Length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;T1&gt; mModifiedCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> jsonPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> TempWrapper&lt;T1[]&gt; wrapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 保存到本地</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SaveLocally</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.isEditor) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        wrapper.UnWrapByBinary(<span class="keyword">ref</span> units);</span><br><span class="line">        <span class="built_in">string</span> jsonStr = JsonUtility.ToJson(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(jsonStr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> dirPath = Path.GetDirectoryName(jsonPath);</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(dirPath)) Directory.CreateDirectory(dirPath);</span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(jsonPath)) File.Create(jsonPath).Dispose();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(jsonPath, FileMode.OpenOrCreate, FileAccess.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(jsonStr);</span><br><span class="line">                fs.Write(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line">                fs.Flush();</span><br><span class="line">                fs.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从本地加载</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">LoadFromLoacl</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.isEditor) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (File.Exists(jsonPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (TextReader tr = <span class="keyword">new</span> StreamReader(jsonPath, Encoding.UTF8))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> jsonStr = tr.ReadToEnd();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(jsonStr))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        JsonUtility.FromJsonOverwrite(jsonStr, <span class="keyword">this</span>);</span><br><span class="line">                        <span class="built_in">int</span> len = units.Length;</span><br><span class="line">                        wrapper.<span class="keyword">value</span> = <span class="keyword">new</span> T1[len];</span><br><span class="line">                        units.CopyTo(wrapper.<span class="keyword">value</span>, <span class="number">0</span>);</span><br><span class="line">                        InvokeModifiedEvents();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        LogUtility.Log(e.Message, LogType.Error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tr.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> dirPath = Path.GetDirectoryName(jsonPath);</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(dirPath)) Directory.CreateDirectory(dirPath);</span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(jsonPath)) File.Create(jsonPath).Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShareUnitsWith</span>(<span class="params">T1[] array</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> len = wrapper.<span class="keyword">value</span>.Length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array == <span class="literal">null</span> || array.Length != len)</span><br><span class="line">            array = <span class="keyword">new</span> T1[len];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            array[i] = wrapper.<span class="keyword">value</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetDefault</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        T0 table = Resources.Load&lt;T0&gt;(GamePathUtility.GetTableResourcesPath&lt;T0&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> len = table.units.Length;</span><br><span class="line">            wrapper.<span class="keyword">value</span> = <span class="keyword">new</span> T1[len];</span><br><span class="line">            table.units.CopyTo(wrapper.<span class="keyword">value</span>, <span class="number">0</span>);</span><br><span class="line">            InvokeModifiedEvents();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> T1 <span class="title">Get</span>(<span class="params">Func&lt;T1, <span class="built_in">bool</span>&gt; logic</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (logic == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">default</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> len = wrapper.<span class="keyword">value</span>.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">ref</span> T1 unit = <span class="keyword">ref</span> wrapper.<span class="keyword">value</span>[i];</span><br><span class="line">            <span class="keyword">if</span> (logic(unit)) <span class="keyword">return</span> unit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> T1 <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> len = wrapper.<span class="keyword">value</span>.Length;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= len) <span class="keyword">return</span> <span class="literal">default</span>;</span><br><span class="line">        <span class="keyword">return</span> wrapper.<span class="keyword">value</span>[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params">Func&lt;T1, T1&gt; logic</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (logic == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> len = wrapper.<span class="keyword">value</span>.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            wrapper.<span class="keyword">value</span>[i] = logic(wrapper.<span class="keyword">value</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        InvokeModifiedEvents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvokeModifiedEvents</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mModifiedCallback != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> len = wrapper.<span class="keyword">value</span>.Length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                mModifiedCallback.Invoke(wrapper.<span class="keyword">value</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        jsonPath = Path.Combine(Application.dataPath, <span class="string">$&quot;Json/<span class="subst">&#123;mType.Name&#125;</span>.json&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (units == <span class="literal">null</span>) units = Array.Empty&lt;T1&gt;();</span><br><span class="line">        <span class="keyword">if</span> (wrapper == <span class="literal">null</span>) wrapper = TempWrapper&lt;T1[]&gt;.WrapByBinary(<span class="keyword">ref</span> units);</span><br><span class="line">        <span class="keyword">if</span> (isAutoControl) LoadFromLoacl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isAutoControl) SaveLocally();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (wrapper != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            wrapper.Dispose();</span><br><span class="line">            wrapper = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Interface目录"><a href="#Interface目录" class="headerlink" title="Interface目录"></a><strong>Interface目录</strong></h5><p>ITableHandler.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表处理接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITableHandler</span>&lt;<span class="title">TTable</span>, <span class="title">TUnit</span>&gt; <span class="keyword">where</span> <span class="title">TTable</span> : <span class="title">BaseTable</span> <span class="keyword">where</span> <span class="title">TUnit</span> : <span class="title">ITableUnit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 表单元合集的只读视图</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ReadOnlyCollection&lt;TUnit&gt; mUnits &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 表单元合集中元素个数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">int</span> mCount &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 表单元合集更改回调</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">event</span> Action&lt;TUnit&gt; mModifiedCallback;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 分享表单元合集给指定的数组变量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;array&quot;&gt;</span>指定的数组变量<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShareUnitsWith</span>(<span class="params">TUnit[] array</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 设置为默认值</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetDefault</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取表单元</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;logic&quot;&gt;</span>获取逻辑<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">TUnit <span class="title">Get</span>(<span class="params">Func&lt;TUnit, <span class="built_in">bool</span>&gt; logic</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取表单元</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span>索引<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">TUnit <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> index</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 修改表单元</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;logic&quot;&gt;</span>修改逻辑<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Set</span>(<span class="params">Func&lt;TUnit, TUnit&gt; logic</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ITableUnit.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单元接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITableUnit</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Editor目录"><a href="#Editor目录" class="headerlink" title="Editor目录"></a>Editor目录</h5><p>GameTableEditor.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏表编辑器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameTableEditor</span> : <span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> SerializedProperty units, isAutoSave;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> tip = <span class="string">&quot;Should be saved after modification. Everything will be saved when we leave the inspector unless you don&#x27;t check &#x27;Is Auto Save&#x27;. In runtime, everything will be loaded from local in &#x27;OnEnable&#x27; and saved to local in &#x27;OnDisable&#x27; unless you don&#x27;t check &#x27;Is Auto Control&#x27;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        units = serializedObject.FindProperty(<span class="string">&quot;units&quot;</span>);</span><br><span class="line">        isAutoSave = serializedObject.FindProperty(<span class="string">&quot;isAutoSave&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">SaveGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Save&quot;</span>)) Save();</span><br><span class="line">        isAutoSave.boolValue = EditorGUILayout.Toggle(isAutoSave.displayName, isAutoSave.boolValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">TipGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        EditorGUILayout.HelpBox(tip, MessageType.Info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Save</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>()</span> &#123; <span class="keyword">if</span> (isAutoSave.boolValue) Save(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="示例（鼠标样式表）"><a href="#示例（鼠标样式表）" class="headerlink" title="示例（鼠标样式表）"></a>示例（鼠标样式表）</h5><p>CursorStyleUIUnit.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标样式UI单元</span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CursorStyleUIUnit</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;鼠标样式类型&quot;</span>)</span>] <span class="keyword">public</span> CursorStyleType styleType;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;Dropdown组件&quot;</span>)</span>] <span class="keyword">public</span> Dropdown dropdown;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;当前选项的Image组件&quot;</span>)</span>] <span class="keyword">public</span> Image showImage;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;Dropdown组件选项模板下自定义的Image组件&quot;</span>)</span>] <span class="keyword">public</span> Image itemShowImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CursorStyleUnit.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标样式单元</span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> CursorStyleUnit : ITableUnit</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;鼠标样式的属性名称&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">string</span> key;</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;鼠标样式的属性值&quot;</span>)</span>] <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CursorStyleUnit</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CursorStyleTable.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标样式单元存储表</span></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;Assets/Resources/Tables/CursorStyleTable&quot;</span>, menuName = <span class="string">&quot;Custom/Create CursorStyle Table&quot;</span>, order = 1)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">CursorStyleTable</span> : <span class="title">GameTable</span>&lt;<span class="title">CursorStyleTable</span>, <span class="title">CursorStyleUnit</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">HideInInspector, SerializeField</span>] CursorShape defaultShape;</span><br><span class="line">    [<span class="meta">HideInInspector, SerializeField</span>] CursorColor defaultColor;</span><br><span class="line">    [<span class="meta">HideInInspector, SerializeField</span>] <span class="built_in">int</span> defaultSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 默认鼠标形状</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> CursorShape mDefaultShape =&gt; defaultShape;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 默认鼠标颜色</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> CursorColor mDefaultColor =&gt; defaultColor;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 默认鼠标尺寸</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mDefaultSize =&gt; defaultSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CursorStyleTableEditor.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEditorInternal;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CustomEditor(typeof(CursorStyleTable))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">CursorStyleTableEditor</span> : <span class="title">GameTableEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    SerializedProperty defaultShape, defaultColor, defaultSize;</span><br><span class="line">    ReorderableList list;</span><br><span class="line">    <span class="built_in">string</span>[] styleTypes; <span class="comment">// 样式类型合集</span></span><br><span class="line">    Dictionary&lt;<span class="built_in">int</span>, Style&gt; styles; <span class="comment">// key表示该项在整个集合中的索引，value表示样式</span></span><br><span class="line">    Style defaultShapeStyle, defaultColorStyle, defaultSizeStyle; <span class="comment">// 样式默认值</span></span><br><span class="line">    GUIContent defaultShapeContent, defaultColorContent, defaultSizeContent;</span><br><span class="line">    <span class="built_in">string</span>[] shapeDisplayNames, colorDisplayNames, sizeDisplayNames; <span class="comment">// 样式默认值下拉菜单选项</span></span><br><span class="line">    <span class="built_in">int</span> _shapeIndex, _colorIndex, _sizeIndex; <span class="comment">// 样式默认值所选菜单项索引</span></span><br><span class="line">    <span class="built_in">bool</span> isStylesDirty;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> shapeIndex</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _shapeIndex;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_shapeIndex != <span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _shapeIndex = <span class="keyword">value</span>;</span><br><span class="line">                UpdateDefaultStyles(Array.FindIndex(styleTypes, t =&gt; t == CursorStyleConstant.SHAPE));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> colorIndex</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _colorIndex;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_colorIndex != <span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _colorIndex = <span class="keyword">value</span>;</span><br><span class="line">                UpdateDefaultStyles(Array.FindIndex(styleTypes, t =&gt; t == CursorStyleConstant.COLOR));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> sizeIndex</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _sizeIndex;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_sizeIndex != <span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _sizeIndex = <span class="keyword">value</span>;</span><br><span class="line">                UpdateDefaultStyles(Array.FindIndex(styleTypes, t =&gt; t == CursorStyleConstant.SIZE));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录每种样式类型和值</span></span><br><span class="line">    <span class="keyword">struct</span> Style</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> styleTypeIndex; <span class="comment">// 样式类型索引</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">value</span>; <span class="comment">// 样式值</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Style</span>(<span class="params"><span class="built_in">int</span> styleTypeIndex, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.styleTypeIndex = styleTypeIndex;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CompareTo</span>(<span class="params"><span class="keyword">ref</span> Style other</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> styleTypeIndex == other.styleTypeIndex &amp;&amp; <span class="keyword">value</span> == other.<span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Init();</span><br><span class="line">        defaultShape = serializedObject.FindProperty(<span class="string">&quot;defaultShape&quot;</span>);</span><br><span class="line">        defaultColor = serializedObject.FindProperty(<span class="string">&quot;defaultColor&quot;</span>);</span><br><span class="line">        defaultSize = serializedObject.FindProperty(<span class="string">&quot;defaultSize&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list = <span class="keyword">new</span> ReorderableList(serializedObject, units, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            drawElementCallback = DrawUnitCallback,</span><br><span class="line">            onAddCallback = OnAddElement,</span><br><span class="line">            onRemoveCallback = OnDelElement</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        styleTypes = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; CursorStyleConstant.SHAPE, CursorStyleConstant.COLOR, CursorStyleConstant.SIZE &#125;;</span><br><span class="line">        styles = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, Style&gt;();</span><br><span class="line"></span><br><span class="line">        defaultShapeStyle.styleTypeIndex = Array.FindIndex(styleTypes, t =&gt; t == CursorStyleConstant.SHAPE);</span><br><span class="line">        defaultShapeStyle.<span class="keyword">value</span> = ((CursorShape)defaultShape.intValue).ToString();</span><br><span class="line">        defaultColorStyle.styleTypeIndex = Array.FindIndex(styleTypes, t =&gt; t == CursorStyleConstant.COLOR);</span><br><span class="line">        defaultColorStyle.<span class="keyword">value</span> = ((CursorColor)defaultColor.intValue).ToString();</span><br><span class="line">        defaultSizeStyle.styleTypeIndex = Array.FindIndex(styleTypes, t =&gt; t == CursorStyleConstant.SIZE);</span><br><span class="line">        defaultSizeStyle.<span class="keyword">value</span> = defaultSize.intValue.ToString();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> len = units.arraySize;</span><br><span class="line">        SerializedProperty element;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            element = units.GetArrayElementAtIndex(i);</span><br><span class="line">            <span class="built_in">int</span> styleTypeIndex = Array.IndexOf(styleTypes, element.FindPropertyRelative(<span class="string">&quot;key&quot;</span>).stringValue);</span><br><span class="line">            AddOrSetElement(i, <span class="keyword">new</span> Style(styleTypeIndex, element.FindPropertyRelative(<span class="string">&quot;value&quot;</span>).stringValue));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        defaultShapeContent = <span class="keyword">new</span> GUIContent(defaultShape.displayName, defaultShape.tooltip);</span><br><span class="line">        defaultColorContent = <span class="keyword">new</span> GUIContent(defaultColor.displayName, defaultColor.tooltip);</span><br><span class="line">        defaultSizeContent = <span class="keyword">new</span> GUIContent(defaultSize.displayName, defaultSize.tooltip);</span><br><span class="line"></span><br><span class="line">        len = styleTypes.Length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            UpdateDefaultDisplayNames(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> str = defaultShapeStyle.<span class="keyword">value</span>;</span><br><span class="line">        _shapeIndex = Array.FindIndex(shapeDisplayNames, s =&gt; s == str);</span><br><span class="line">        str = defaultColorStyle.<span class="keyword">value</span>;</span><br><span class="line">        _colorIndex = Array.FindIndex(colorDisplayNames, s =&gt; s == str);</span><br><span class="line">        str = defaultSizeStyle.<span class="keyword">value</span>;</span><br><span class="line">        _sizeIndex = Array.FindIndex(sizeDisplayNames, s =&gt; s == str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DrawUnitCallback</span>(<span class="params">Rect rect, <span class="built_in">int</span> index, <span class="built_in">bool</span> isActive, <span class="built_in">bool</span> isFocused</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= styles.Count) styles[index] = <span class="keyword">new</span> Style();</span><br><span class="line"></span><br><span class="line">        Style style = styles[index];</span><br><span class="line">        rect.y += <span class="number">2</span>;</span><br><span class="line">        style.styleTypeIndex = EditorGUI.Popup(<span class="keyword">new</span> Rect(rect.x, rect.y, <span class="number">80</span>, EditorGUIUtility.singleLineHeight), style.styleTypeIndex, styleTypes);</span><br><span class="line">        style.<span class="keyword">value</span> = EditorGUI.TextField(<span class="keyword">new</span> Rect(rect.x + <span class="number">100</span>, rect.y, rect.width - <span class="number">100</span>, EditorGUIUtility.singleLineHeight), style.<span class="keyword">value</span>);</span><br><span class="line">        UpdateStyle(<span class="keyword">ref</span> style, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnAddElement</span>(<span class="params">ReorderableList list</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ReorderableList.defaultBehaviours.DoAddButton(list);</span><br><span class="line">        AddOrSetElement(list.count - <span class="number">1</span>, <span class="keyword">new</span> Style(<span class="number">0</span>, <span class="built_in">string</span>.Empty));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDelElement</span>(<span class="params">ReorderableList list</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DelElement(list.index);</span><br><span class="line">        ReorderableList.defaultBehaviours.DoRemoveButton(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddOrSetElement</span>(<span class="params"><span class="built_in">int</span> index, Style style</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (style.styleTypeIndex &lt; <span class="number">0</span> || style.styleTypeIndex &gt;= styleTypes.Length</span><br><span class="line">        || <span class="built_in">string</span>.IsNullOrEmpty(style.<span class="keyword">value</span>) || index &lt; <span class="number">0</span> || index &gt;= list.count) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        styles[index] = style;</span><br><span class="line">        UpdateDefaultDisplayNames(style.styleTypeIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DelElement</span>(<span class="params"><span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Style style = styles[index];</span><br><span class="line">        styles.Remove(index);</span><br><span class="line">        UpdateDefaultDisplayNames(style.styleTypeIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateDefaultDisplayNames</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] styleTypeIndexes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (styleTypeIndexes == <span class="literal">null</span> || styleTypeIndexes.Length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> len = styleTypeIndexes.Length;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">group</span> = styles.GroupBy(kv =&gt; kv.Value.styleTypeIndex);</span><br><span class="line">        <span class="built_in">string</span> CONST_STR;</span><br><span class="line">        IGrouping&lt;<span class="built_in">int</span>, KeyValuePair&lt;<span class="built_in">int</span>, Style&gt;&gt; temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = styleTypeIndexes[i];</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= styleTypes.Length) <span class="keyword">continue</span>;</span><br><span class="line">            CONST_STR = styleTypes[index];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (CONST_STR)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> CursorStyleConstant.SHAPE:</span><br><span class="line">                    temp = <span class="keyword">group</span>.Where(g =&gt; g.Key == index).FirstOrDefault();</span><br><span class="line">                    <span class="keyword">if</span> (temp != <span class="literal">null</span>) shapeDisplayNames = temp.Select(kv =&gt; kv.Value.<span class="keyword">value</span>).ToArray();</span><br><span class="line">                    <span class="keyword">else</span> shapeDisplayNames = Array.Empty&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CursorStyleConstant.COLOR:</span><br><span class="line">                    temp = <span class="keyword">group</span>.Where(g =&gt; g.Key == index).FirstOrDefault();</span><br><span class="line">                    <span class="keyword">if</span> (temp != <span class="literal">null</span>) colorDisplayNames = temp.Select(kv =&gt; kv.Value.<span class="keyword">value</span>).ToArray();</span><br><span class="line">                    <span class="keyword">else</span> colorDisplayNames = Array.Empty&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CursorStyleConstant.SIZE:</span><br><span class="line">                    temp = <span class="keyword">group</span>.Where(g =&gt; g.Key == index).FirstOrDefault();</span><br><span class="line">                    <span class="keyword">if</span> (temp != <span class="literal">null</span>) sizeDisplayNames = temp.Select(kv =&gt; kv.Value.<span class="keyword">value</span>).ToArray();</span><br><span class="line">                    <span class="keyword">else</span> sizeDisplayNames = Array.Empty&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateDefaultStyles</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] styleTypeIndexes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (styleTypeIndexes == <span class="literal">null</span> || styleTypeIndexes.Length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> len = styleTypeIndexes.Length;</span><br><span class="line">        <span class="built_in">string</span> CONST_STR;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = styleTypeIndexes[i];</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= styleTypes.Length) <span class="keyword">continue</span>;</span><br><span class="line">            CONST_STR = styleTypes[index];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (CONST_STR)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> CursorStyleConstant.SHAPE:</span><br><span class="line">                    <span class="keyword">if</span> (_shapeIndex &lt; <span class="number">0</span> || _shapeIndex &gt;= shapeDisplayNames.Length)</span><br><span class="line">                        defaultShapeStyle.<span class="keyword">value</span> = CursorShape.None.ToString();</span><br><span class="line">                    <span class="keyword">else</span> defaultShapeStyle.<span class="keyword">value</span> = shapeDisplayNames[_shapeIndex];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CursorStyleConstant.COLOR:</span><br><span class="line">                    <span class="keyword">if</span> (_colorIndex &lt; <span class="number">0</span> || _colorIndex &gt;= colorDisplayNames.Length)</span><br><span class="line">                        defaultColorStyle.<span class="keyword">value</span> = CursorColor.None.ToString();</span><br><span class="line">                    <span class="keyword">else</span> defaultColorStyle.<span class="keyword">value</span> = colorDisplayNames[_colorIndex];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CursorStyleConstant.SIZE:</span><br><span class="line">                    <span class="keyword">if</span> (_sizeIndex &lt; <span class="number">0</span> || _sizeIndex &gt;= sizeDisplayNames.Length)</span><br><span class="line">                        defaultSizeStyle.<span class="keyword">value</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                    <span class="keyword">else</span> defaultSizeStyle.<span class="keyword">value</span> = sizeDisplayNames[_sizeIndex];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">UpdateStyle</span>(<span class="params"><span class="keyword">ref</span> Style style, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!styles[index].CompareTo(<span class="keyword">ref</span> style))</span><br><span class="line">        &#123;</span><br><span class="line">            styles[index] = style;</span><br><span class="line">            isStylesDirty = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        serializedObject.Update();</span><br><span class="line">        <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.LabelField(<span class="string">&quot;鼠标样式单元合集&quot;</span>, EditorStyles.boldLabel);</span><br><span class="line">        list.DoLayoutList();</span><br><span class="line"></span><br><span class="line">        EditorGUILayout.LabelField(<span class="string">&quot;鼠标样式默认值&quot;</span>, EditorStyles.boldLabel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isStylesDirty)</span><br><span class="line">        &#123;</span><br><span class="line">            isStylesDirty = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; styleTypes.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                UpdateDefaultDisplayNames(i);</span><br><span class="line">                UpdateDefaultStyles(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        EditorGUI.BeginDisabledGroup(shapeDisplayNames.Length == <span class="number">0</span>);</span><br><span class="line">        shapeIndex = EditorGUILayout.Popup(defaultShapeContent, shapeIndex, shapeDisplayNames);</span><br><span class="line">        EditorGUI.EndDisabledGroup();</span><br><span class="line"></span><br><span class="line">        EditorGUI.BeginDisabledGroup(colorDisplayNames.Length == <span class="number">0</span>);</span><br><span class="line">        colorIndex = EditorGUILayout.Popup(defaultColorContent, colorIndex, colorDisplayNames);</span><br><span class="line">        EditorGUI.EndDisabledGroup();</span><br><span class="line"></span><br><span class="line">        EditorGUI.BeginDisabledGroup(sizeDisplayNames.Length == <span class="number">0</span>);</span><br><span class="line">        sizeIndex = EditorGUILayout.Popup(defaultSizeContent, sizeIndex, sizeDisplayNames);</span><br><span class="line">        EditorGUI.EndDisabledGroup();</span><br><span class="line"></span><br><span class="line">        SaveGUI();</span><br><span class="line">        TipGUI();</span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Save</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;CursorStyleUnit&gt; reserve = <span class="keyword">new</span> List&lt;CursorStyleUnit&gt;();</span><br><span class="line">        <span class="built_in">int</span> len = styles.Count;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Style style = styles[i];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(style.<span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                CursorStyleUnit v_unit = <span class="keyword">new</span> CursorStyleUnit(styleTypes[style.styleTypeIndex], style.<span class="keyword">value</span>);</span><br><span class="line">                <span class="keyword">if</span> (!reserve.Contains(v_unit)) reserve.Add(v_unit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        units.ClearArray();</span><br><span class="line">        styles.Clear();</span><br><span class="line">        len = reserve.Count;</span><br><span class="line">        CursorStyleUnit unit;</span><br><span class="line">        SerializedProperty element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            units.InsertArrayElementAtIndex(i);</span><br><span class="line">            element = units.GetArrayElementAtIndex(i);</span><br><span class="line">            unit = reserve[i];</span><br><span class="line">            element.FindPropertyRelative(<span class="string">&quot;key&quot;</span>).stringValue = unit.key;</span><br><span class="line">            element.FindPropertyRelative(<span class="string">&quot;value&quot;</span>).stringValue = unit.<span class="keyword">value</span>;</span><br><span class="line">            styles[i] = <span class="keyword">new</span> Style(Array.FindIndex(styleTypes, t =&gt; t == unit.key), unit.<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; styleTypes.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            UpdateDefaultDisplayNames(i);</span><br><span class="line">            UpdateDefaultStyles(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Enum.TryParse(defaultShapeStyle.<span class="keyword">value</span>, <span class="keyword">out</span> CursorShape shape))</span><br><span class="line">            defaultShape.intValue = (<span class="built_in">int</span>)shape;</span><br><span class="line">        <span class="keyword">if</span> (Enum.TryParse(defaultColorStyle.<span class="keyword">value</span>, <span class="keyword">out</span> CursorColor color))</span><br><span class="line">            defaultColor.intValue = (<span class="built_in">int</span>)color;</span><br><span class="line">        defaultSize.intValue = Convert.ToInt32(defaultSizeStyle.<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">        serializedObject.ApplyModifiedProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h4><p><img src="https://i-blog.csdnimg.cn/direct/ab597279604543c5ad364be01ba4e8f6.png"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p>BaseTable作为所有表格的抽象基类并继承自ScriptableObject，用于后续扩展。ITableHandler声明表格的公开属性和行为。ITableUnit声明数据单元的公开属性和行为，作为暂留接口用于后续扩展，所有数据单元需要实现该接口。GameTable继承自BaseTable，并实现了ITableHandler接口，作为游戏数据表的基类，实现通用属性和方法，向具体游戏表类开放重写方法。GameTableEditor作为游戏数据表编辑器脚本的基类，实现通用逻辑。</p><hr><p>示例中CursorStyleUIUnit作为鼠标样式的UI单元，负责定义UI界面上与表格数据相对应的UI组件。CursorStyleUnit作为鼠标样式的数据单元，负责定义每一项表格数据。CursorStyleTable则是定义鼠标样式表的具体逻辑。CursorStyleTableEditor用于定义鼠标样式表在编辑器Inspector面板中的GUI界面。</p><hr><p>GameTable中isAutoControl字段用于启用运行时自动进行本地持久化管理的服务，在OnEnable方法中从本地持久化文件中加载内容，在OnDisable方法中将缓存内容保存至本地持久化文件中。isAutoSave字段用于启用编辑器时表格自动保存修改到资产文件的服务，若不勾选，每次在Inspector面板中进行修改后需要手动点击Save按钮进行保存，勾选后会自动保存。提供了指示表类型、表单元只读视图、表单元个数和修改回调等属性，以及本地持久化管理、表单元共享、表单元获取和设置以及重置为默认值等方法。</p><hr><p>对表格进行设计后，我们可以使用表格管理器来统一管理所有表格，基于ScriptableObject的特性，我们可以为每个表格创建资产文件，通过加载资产文件即可获取表格实例。</p><hr><p>TempWrapper称为字段临时缓存包装器，具体请看系列文章中与此相关的内容。</p></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><p>……</p><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p><a href="https://blog.csdn.net/hgf1037882434/article/details/142652083" title="字段临时缓存包装器">字段临时缓存包装器</a></p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/142672439">https://blog.csdn.net/hgf1037882434/article/details/142672439</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 数据存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>游戏中的对象池技术探索（一）</title>
      
      <link href="/2025/05/04/2025-05-04-%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B1%A0%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B1%A0%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>对象池技术在游戏开发中的应用非常普遍，它是一种高效管理对象实例的技术，能够避免频繁和重复创建对象所带来的性能开销。本篇文章我们就来探索一下如何在游戏开发中设计通用对象池，使之易于使用和扩展。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="代码目录结构"><a href="#代码目录结构" class="headerlink" title="代码目录结构"></a>代码目录结构</h5><blockquote><ul><li>ObjectPool <ul><li>Base</li><li>Interface</li><li>Settings</li></ul></li></ul></blockquote><blockquote><p>ObjectPool作为本模块的根目录，用于存储模块子目录和具体的对象池脚本。Base目录用于存储对象池抽象基类，用于规范对象池的设计。Interface目录用于存储对象池相关的接口，用于未来扩展。Settings目录用于存储创建对象池的参数脚本以及对象池的设置。</p></blockquote><h5 id="Base目录"><a href="#Base目录" class="headerlink" title="Base目录"></a>Base目录</h5><p>BasePool.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 对象池基类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BasePool</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池所生产对象的总数量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> totalCount &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池当前空闲对象的数量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> freeCount =&gt; _poolGetter.Count;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否为固定容量的对象池</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>默认值:False<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> isFixed =&gt; _isFixed;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isFixed;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池容量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>默认值:PoolConstant.DEFAULT_CAPACITY<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> capacity =&gt; _capacity;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _capacity;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象创建逻辑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：用来自定义对象的创建逻辑<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> Func&lt;T&gt; overrideCreate;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象重置逻辑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：用来自定义对象的重置逻辑<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> Action&lt;T&gt; overrideReset;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象销毁逻辑</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：用来自定义对象的销毁逻辑<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> Action&lt;T&gt; overrideDestroy;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 池对象访问器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> Stack&lt;T&gt; _poolGetter =&gt; _pool;</span><br><span class="line">        <span class="keyword">private</span> Stack&lt;T&gt; _pool;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象类型是否为可释放对象类型</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> <span class="built_in">bool</span> _isDisposable =&gt; _staticIsDisposable;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">bool</span> _staticIsDisposable = <span class="keyword">typeof</span>(IDisposable).IsAssignableFrom(<span class="keyword">typeof</span>(T));</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象类型名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> <span class="built_in">string</span> _typeName =&gt; _staticTypeName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _staticTypeName = <span class="keyword">typeof</span>(T).Name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">BasePool</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pool = <span class="keyword">new</span> Stack&lt;T&gt;(PoolConstant.DEFAULT_CAPACITY);</span><br><span class="line">            _capacity = PoolConstant.DEFAULT_CAPACITY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">BasePool</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Pool:The capacity is not allowed to be less than or equal to zero for the pool.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _pool = <span class="keyword">new</span> Stack&lt;T&gt;(capacity);</span><br><span class="line">            _capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">BasePool</span>(<span class="params"><span class="built_in">int</span> capacity, <span class="built_in">bool</span> isFixed</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Pool:The capacity is not allowed to be less than or equal to zero for the pool.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            _pool = <span class="keyword">new</span> Stack&lt;T&gt;(capacity);</span><br><span class="line">            _capacity = capacity;</span><br><span class="line">            _isFixed = isFixed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 重置对象并返回</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params">T item</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">Create</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">Get</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 释放对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Release</span>(<span class="params">T item</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清空对象池</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Interface目录"><a href="#Interface目录" class="headerlink" title="Interface目录"></a>Interface目录</h5><p>……</p><h5 id="Settings目录"><a href="#Settings目录" class="headerlink" title="Settings目录"></a>Settings目录</h5><p>PoolConstant.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PoolConstant</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对象池默认容量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UnityObjectPoolSettings.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Unity对象池设置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnityObjectPoolSettings</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">UnityEngine.Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池初始容量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> capacity = PoolConstant.DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池是否持久化</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> isPersistant = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池是否固定容量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> isFixed;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象池容器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> UnityEngine.GameObject container;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象原型</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> T original;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 对象默认名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> defaultName;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取时激活对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> activeWhenGet = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="具体的对象池"><a href="#具体的对象池" class="headerlink" title="具体的对象池"></a>具体的对象池</h5><p>ClassPool.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Class 类型对象池</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>具体的 Class 类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ClassPool</span>&lt;<span class="title">T</span>&gt; : <span class="title">BasePool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClassPool</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClassPool</span>(<span class="params"><span class="built_in">int</span> capacity</span>) : <span class="title">base</span>(<span class="params">capacity</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClassPool</span>(<span class="params"><span class="built_in">int</span> capacity, <span class="built_in">bool</span> isFixed</span>) : <span class="title">base</span>(<span class="params">capacity, isFixed</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            totalCount -= _poolGetter.Count;</span><br><span class="line">            <span class="keyword">while</span> (_poolGetter.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> pop = _poolGetter.Pop();</span><br><span class="line">                <span class="keyword">if</span> (overrideDestroy != <span class="literal">null</span>) overrideDestroy(pop);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_isDisposable)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ((IDisposable)pop).Dispose();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> T <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            T item;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (freeCount &gt; <span class="number">0</span>) item = _poolGetter.Pop();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                item = Create();</span><br><span class="line">                totalCount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Release</span>(<span class="params">T item</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Reset(item);</span><br><span class="line">            _poolGetter.Push(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params">T item</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (overrideReset != <span class="literal">null</span>) overrideReset(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> T <span class="title">Create</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFixed &amp;&amp; totalCount == capacity)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The number of objects in the object pool has reached the upper limit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            T item;</span><br><span class="line">            <span class="keyword">if</span> (overrideCreate != <span class="literal">null</span>) item = overrideCreate();</span><br><span class="line">            <span class="keyword">else</span> item = Activator.CreateInstance&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The item created is null.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UnityObjectPool.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Unity对象池</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>Unity对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnityObjectPool</span>&lt;<span class="title">T</span>&gt; : <span class="title">ClassPool</span>&lt;<span class="title">T</span>&gt;, <span class="title">IDisposable</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">UnityEngine.Object</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">readonly</span> GameObject _container;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">readonly</span> T _original;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _defaultName;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">readonly</span> <span class="built_in">bool</span> _activeWhenGet;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isDisposed;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnityObjectPool</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _container = CreateContainer();</span><br><span class="line">            _activeWhenGet = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnityObjectPool</span>(<span class="params"><span class="built_in">int</span> capacity</span>) : <span class="title">base</span>(<span class="params">capacity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _container = CreateContainer();</span><br><span class="line">            _activeWhenGet = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnityObjectPool</span>(<span class="params"><span class="built_in">int</span> capacity, <span class="built_in">bool</span> isFixed</span>) : <span class="title">base</span>(<span class="params">capacity, isFixed</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _container = CreateContainer();</span><br><span class="line">            _activeWhenGet = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnityObjectPool</span>(<span class="params">UnityObjectPoolSettings&lt;T&gt; settings</span>) :</span></span><br><span class="line"><span class="function">        <span class="title">base</span>(<span class="params">settings == <span class="literal">null</span> ? PoolConstant.DEFAULT_CAPACITY : settings.capacity,</span></span></span><br><span class="line"><span class="params"><span class="function">        settings != <span class="literal">null</span> &amp;&amp; settings.isFixed</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (settings == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _container = CreateContainer();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _container = settings.container;</span><br><span class="line">            _original = settings.original;</span><br><span class="line">            _defaultName = settings.defaultName;</span><br><span class="line">            _activeWhenGet = settings.activeWhenGet;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (settings.isPersistant) MonoBehaviour.DontDestroyOnLoad(_container);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 释放对象池</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para&gt;</span>提示：释放后对象池将无法继续使用<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            Dispose(<span class="literal">true</span>);</span><br><span class="line">            GC.SuppressFinalize(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line">            DoClear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Release</span>(<span class="params">T item</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line">            DoRelease(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">override</span> T <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> DoGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoClear</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            totalCount -= _poolGetter.Count;</span><br><span class="line">            <span class="keyword">while</span> (_poolGetter.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> item = _poolGetter.Pop();</span><br><span class="line">                <span class="keyword">if</span> (overrideDestroy != <span class="literal">null</span>) overrideDestroy(item);</span><br><span class="line">                <span class="keyword">else</span> MonoBehaviour.Destroy(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoRelease</span>(<span class="params">T item</span>)</span> &#123; <span class="keyword">base</span>.Release(item); &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> T <span class="title">DoGet</span>()</span> &#123; <span class="keyword">return</span> <span class="keyword">base</span>.Get(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> GameObject <span class="title">CreateContainer</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> container = <span class="keyword">new</span> GameObject(<span class="string">$&quot;<span class="subst">&#123;_typeName&#125;</span>Pool&quot;</span>);</span><br><span class="line">            MonoBehaviour.DontDestroyOnLoad(container);</span><br><span class="line">            <span class="keyword">return</span> container;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_isDisposed) <span class="keyword">return</span>;</span><br><span class="line">            _isDisposed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (disposing)</span><br><span class="line">            &#123;</span><br><span class="line">                Clear();</span><br><span class="line">                MonoBehaviour.Destroy(_container);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ~UnityObjectPool()</span><br><span class="line">        &#123;</span><br><span class="line">            Dispose(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>GameObjectPool.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> GameObject 对象池</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">GameObjectPool</span> : <span class="title">UnityObjectPool</span>&lt;<span class="title">GameObject</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameObjectPool</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameObjectPool</span>(<span class="params"><span class="built_in">int</span> capacity</span>) : <span class="title">base</span>(<span class="params">capacity</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameObjectPool</span>(<span class="params"><span class="built_in">int</span> capacity, <span class="built_in">bool</span> isFixed</span>) : <span class="title">base</span>(<span class="params">capacity, isFixed</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GameObjectPool</span>(<span class="params">UnityObjectPoolSettings&lt;GameObject&gt; settings</span>) : <span class="title">base</span>(<span class="params">settings</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> GameObject <span class="title">DoGet</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_activeWhenGet) <span class="keyword">return</span> <span class="keyword">base</span>.DoGet();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                GameObject item = <span class="keyword">base</span>.DoGet();</span><br><span class="line">                item.SetActive(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params">GameObject item</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The item being reset is null.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (overrideReset != <span class="literal">null</span>) overrideReset(item);</span><br><span class="line">            <span class="keyword">else</span> item.SetActive(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> GameObject <span class="title">Create</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFixed &amp;&amp; totalCount == capacity)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The number of objects in the object pool has reached the upper limit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            GameObject item;</span><br><span class="line">            <span class="keyword">if</span> (overrideCreate != <span class="literal">null</span>) item = overrideCreate();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_original == <span class="literal">null</span>) item = <span class="keyword">new</span> GameObject();</span><br><span class="line">                <span class="keyword">else</span> item = MonoBehaviour.Instantiate(_original);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(_defaultName)) item.name = _defaultName;</span><br><span class="line">                    item.transform.SetParent(_container.transform);</span><br><span class="line">                    item.SetActive(<span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The item being created is null.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MonoPool.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GameAssistant.Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Monobehaviour 类型对象池</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>具体的 Monobehaviour 类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">MonoPool</span>&lt;<span class="title">T</span>&gt; : <span class="title">UnityObjectPool</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MonoPool</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MonoPool</span>(<span class="params"><span class="built_in">int</span> capacity</span>) : <span class="title">base</span>(<span class="params">capacity</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MonoPool</span>(<span class="params"><span class="built_in">int</span> capacity, <span class="built_in">bool</span> isFixed</span>) : <span class="title">base</span>(<span class="params">capacity, isFixed</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MonoPool</span>(<span class="params">UnityObjectPoolSettings&lt;T&gt; settings</span>) : <span class="title">base</span>(<span class="params">settings</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> T <span class="title">DoGet</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_activeWhenGet) <span class="keyword">return</span> <span class="keyword">base</span>.DoGet();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                T item = <span class="keyword">base</span>.DoGet();</span><br><span class="line">                item.enabled = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params">T item</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The item being reset is null.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (overrideReset != <span class="literal">null</span>) overrideReset(item);</span><br><span class="line">            <span class="keyword">else</span> item.enabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> T <span class="title">Create</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (isFixed &amp;&amp; totalCount == capacity)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The number of objects in the object pool has reached the upper limit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            T item;</span><br><span class="line">            <span class="keyword">if</span> (overrideCreate != <span class="literal">null</span>) item = overrideCreate();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (_original == <span class="literal">null</span>) item = _container.AddComponent&lt;T&gt;();</span><br><span class="line">                <span class="keyword">else</span> item = MonoBehaviour.Instantiate(_original);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(_defaultName)) item.name = _defaultName;</span><br><span class="line">                    item.enabled = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (item == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Pool:The item being created is null.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> GameAssistant.Pool;</span><br><span class="line"><span class="keyword">using</span> NUnit.Framework;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.TestTools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPoolTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 子弹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bullet</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Action&lt;Bullet&gt; onDestroy;</span><br><span class="line">        <span class="keyword">public</span> DamageModel damageModel;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCustomTriggerEnter</span>(<span class="params"><span class="built_in">string</span> tag</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (tag == <span class="string">&quot;Head&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;Attack Head:&quot;</span> + damageModel.AttackHead());</span><br><span class="line">                onDestroy?.Invoke(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tag == <span class="string">&quot;Body&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;Attack Body:&quot;</span> + damageModel.AttackBody());</span><br><span class="line">                onDestroy?.Invoke(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 伤害计算模型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DamageModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">AttackHead</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> damage * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">AttackBody</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> damage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> GameObjectPool bulletPool = <span class="keyword">new</span> GameObjectPool();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> ClassPool&lt;DamageModel&gt; damagePool = <span class="keyword">new</span> ClassPool&lt;DamageModel&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] tags = &#123; <span class="string">&quot;Head&quot;</span>, <span class="string">&quot;Body&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">ObjectPoolTest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        bulletPool.overrideReset = ResetBullet;</span><br><span class="line">        damagePool.overrideReset = ResetDamageModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ResetBullet</span>(<span class="params">GameObject go</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (go.TryGetComponent(<span class="keyword">out</span> Bullet bullet))</span><br><span class="line">        &#123;</span><br><span class="line">            damagePool.Release(bullet.damageModel);</span><br><span class="line">            bullet.damageModel = <span class="literal">null</span>;</span><br><span class="line">            bullet.onDestroy = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        go.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ResetDamageModel</span>(<span class="params">DamageModel dm</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        dm.damage = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Bullet <span class="title">GetBullet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GameObject go = bulletPool.Get();</span><br><span class="line">        <span class="keyword">if</span> (!go.TryGetComponent(<span class="keyword">out</span> Bullet bullet)) bullet = go.AddComponent&lt;Bullet&gt;();</span><br><span class="line">        DamageModel damageModel = damagePool.Get();</span><br><span class="line">        damageModel.damage = UnityEngine.Random.Range(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">        bullet.damageModel = damageModel;</span><br><span class="line">        bullet.onDestroy = OnBulletDestroy;</span><br><span class="line">        <span class="keyword">return</span> bullet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnBulletDestroy</span>(<span class="params">Bullet bullet</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Bullet is being destroied.&quot;</span>);</span><br><span class="line">        bulletPool.Release(bullet.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">UnityTest</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">ObjectPool_Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        WaitForSeconds waitForSeconds = <span class="keyword">new</span> WaitForSeconds(<span class="number">0.5f</span>);</span><br><span class="line">        Stack&lt;Bullet&gt; temp = <span class="keyword">new</span> Stack&lt;Bullet&gt;();</span><br><span class="line">        <span class="keyword">while</span> (index &lt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">$&quot;正在进行第<span class="subst">&#123;index + <span class="number">1</span>&#125;</span>次射击...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> sendBulletCount = UnityEngine.Random.Range(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sendBulletCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">$&quot;正在生成第<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>颗子弹...&quot;</span>);</span><br><span class="line">                temp.Push(GetBullet());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="string">$&quot;生产子弹总量:<span class="subst">&#123;bulletPool.totalCount&#125;</span>，子弹库存:<span class="subst">&#123;bulletPool.freeCount&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (temp.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">$&quot;正在发射第<span class="subst">&#123;j + <span class="number">1</span>&#125;</span>颗子弹...&quot;</span>);</span><br><span class="line">                temp.Pop().OnCustomTriggerEnter(tags[UnityEngine.Random.Range(<span class="number">0</span>, <span class="number">1</span>)]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> waitForSeconds;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Assert.IsTrue(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上述代码基于Unity Test Framework进行测试，模拟了9次射击，每次随机发射1-5颗子弹，随机设置每个子弹的基本伤害为10-100，用对象池技术管理子弹游戏对象实例和伤害计算模型实例。</p></blockquote><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p>BasePool作为所有对象池的抽象基类，规范对象池的必要属性和方法。PoolConstant记录对象池所用的常量值。UnityObjectPoolSettings作为Unity对象池特有的对象池设置参数，在创建Unity对象池时传递。ClassPool作为C#类对象池。UnityObjectPool作为Unity对象池，继承自ClassPool。GameObjectPool作为Unity游戏对象池。MonoPool作为Monobehaviour对象池。</p></blockquote><h4 id="版本改进"><a href="#版本改进" class="headerlink" title="版本改进"></a>版本改进</h4><table><thead><tr><th>版本</th><th>改进说明</th></tr></thead><tbody><tr><td>v1.1</td><td>1.添加overrideDestroy回调； 2.Reset方法更改为”protected abstract void Reset(T item)”； 3.优化代码</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><h4 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h4><p>……</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/142674951">https://blog.csdn.net/hgf1037882434/article/details/142674951</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> c# </tag>
            
            <tag> 个人研究 </tag>
            
            <tag> 对象池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>Unity常见问题合集（一）</title>
      
      <link href="/2025/05/04/2025-05-04-Unity%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/05/04/2025-05-04-Unity%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>PS：不定期更新……</strong></p><hr><p><strong>【目录】</strong></p><p>（1）无法关闭自动编译</p><p>（2）UnityHub打开一直在转圈</p><hr><h6 id="（1）无法关闭自动编译"><a href="#（1）无法关闭自动编译" class="headerlink" title="（1）无法关闭自动编译"></a>（1）无法关闭自动编译</h6><p><strong>描述：</strong> Edit — Preference — General — Auto Refresh，显示”Auto refresh must be set when using collaboration feature.”</p><blockquote><p>1.点击Unity编辑器中的小云朵按钮：</p><p><img src="https://i-blog.csdnimg.cn/direct/13ea3dafc8a74cca8564ffb03ec0eb69.png"></p><p>2.在打开的Service界面中找到”unlink project”的按钮，并点击，然后重新打开编辑器即可：</p><p><img src="https://i-blog.csdnimg.cn/direct/db53da5b1f784bc6acf17e8566ac0f13.png"></p></blockquote><h6 id="（2）UnityHub打开一直在转圈"><a href="#（2）UnityHub打开一直在转圈" class="headerlink" title="（2）UnityHub打开一直在转圈"></a><strong>（2）UnityHub打开一直在转圈</strong></h6><p><strong>解决：</strong> 通常在找到UnityHub的数据文件目录，Windows系统通常在”系统盘&#x2F;用户目录&#x2F;AppData&#x2F;Roaming&#x2F;UnityHub(或Unity Hub)”，可以先看看log的json文件，搜索error级别日志信息看看是网络问题还是什么问题，如果解决不了，就打开任务管理器关闭UnityHub的进程，删除UnityHub的数据文件目录，重新打开。</p><p><strong>如果这篇文章对你有帮助，请给作者点个赞吧！</strong></p><blockquote><p>本文迁移自CSDN: <a href="https://blog.csdn.net/hgf1037882434/article/details/143662083">https://blog.csdn.net/hgf1037882434/article/details/143662083</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Unity开发 </tag>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>